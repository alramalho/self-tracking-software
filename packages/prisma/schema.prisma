generator client {
  provider        = "prisma-client-js"
  output          = "./generated/prisma"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions", "typedSql"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
  schemas    = ["public"]
}

model User {
  id                              String             @id @default(cuid())
  name                            String?
  profile                         String?
  picture                         String?
  age                             Int?
  username                        String?            @unique
  timezone                        String?            @default("Europe/Berlin")
  clerkId                         String?            @unique
  supabaseAuthId                  String?            @unique
  language                        String?            @default("English")
  planType                        PlanType           @default(FREE)
  lastActiveAt                    DateTime?
  email                           String             @unique
  createdAt                       DateTime           @default(now())
  deletedAt                       DateTime?
  isPwaInstalled                  Boolean            @default(false)
  isPwaNotificationsEnabled       Boolean            @default(false)
  lookingForAp                    Boolean?           @default(true)

  // Web Push (PWA) fields
  pwaSubscriptionEndpoint         String?
  pwaSubscriptionKey              String?
  pwaSubscriptionAuthToken        String?

  // iOS Native Push fields
  isIosNotificationsEnabled       Boolean            @default(false)
  iosDeviceToken                  String?
  iosDeviceTokenUpdatedAt         DateTime?

  unactivatedEmailSentAt          DateTime?
  themeBaseColor                  ThemeColor         @default(BLUE)
  themeMode                       ThemeMode          @default(LIGHT)
  recommendationsOutdated         Boolean            @default(false)
  recommendationsLastCalculatedAt DateTime?
  onboardingCompletedAt           DateTime?

  // Daily checkin settings
  dailyCheckinDays String[]          @default([])
  dailyCheckinTime DailyCheckinTime?

  // Coaching message settings (2-hour intervals: 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22)
  preferredCoachingHour Int? @default(6) // Default to 6-8am

  // Stripe settings
  stripeCustomerId         String?            @unique
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?

  // Relations
  activities              Activity[]
  activityEntries         ActivityEntry[]
  metrics                 Metric[]
  metricEntries           MetricEntry[]
  plans                   Plan[]
  notifications           Notification[]
  planGroupMemberships    PlanGroupMember[] @relation("PlanGroupMember")
  planGroupInvitesSent    PlanGroupMember[] @relation("PlanGroupMemberInviter")
  planInviteLinksCreated  PlanInviteLink[]
  recommendations         Recommendation[]
  reactionsSent           Reaction[]
  commentsSent            Comment[]
  coaches                 Coach[]
  chats                   Chat[]
  messageFeedback         MessageFeedback[]

  // Connection relationships (replaces friend system)
  connectionsFrom Connection[] @relation("ConnectionFrom")
  connectionsTo   Connection[] @relation("ConnectionTo")

  // Referral relationships
  referredUsers User[]  @relation("UserReferrals")
  referredBy    User?   @relation("UserReferrals", fields: [referredById], references: [id])
  referredById  String?

  @@map("users")
  @@schema("public")
}

model Connection {
  id        String           @id @default(cuid())
  fromId    String
  toId      String
  status    ConnectionStatus @default(PENDING)
  message   String?
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt

  // Relations
  from User @relation("ConnectionFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to   User @relation("ConnectionTo", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
  @@index([fromId, status])
  @@index([toId, status])
  @@index([status])
  @@map("connections")
  @@schema("public")
}

model Activity {
  id              String              @id @default(cuid())
  userId          String
  title           String
  measure         String
  emoji           String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  colorHex        String?
  deletedAt       DateTime?

  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries      ActivityEntry[]
  planSessions PlanSession[] // sessions on which activity is mentioned
  plans        Plan[]

  @@index([userId, deletedAt])
  @@index([createdAt])
  @@map("activities")
  @@schema("public")
}

model ActivityEntry {
  id          String    @id @default(cuid())
  activityId  String
  userId      String
  quantity    Int
  date        DateTime  @db.Date
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  description String?
  deletedAt   DateTime?
  timezone    String?

  // Image info
  imageS3Path    String?
  imageUrl       String?
  imageExpiresAt DateTime?
  imageCreatedAt DateTime?
  imageIsPublic  Boolean   @default(false)

  // Relations
  activity  Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]
  comments  Comment[]

  @@index([userId, deletedAt])
  @@index([deletedAt, createdAt])
  @@index([activityId])
  @@index([createdAt])
  @@map("activity_entries")
  @@schema("public")
}

model Reaction {
  id              String   @id @default(cuid())
  activityEntryId String
  userId          String // user that added the reaction
  emoji           String
  createdAt       DateTime @default(now())

  // Relations
  activityEntry ActivityEntry @relation(fields: [activityEntryId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([activityEntryId, userId, emoji])
  @@index([activityEntryId])
  @@map("reactions")
  @@schema("public")
}

model Comment {
  id              String    @id @default(cuid())
  activityEntryId String
  userId          String
  text            String
  createdAt       DateTime  @default(now())
  deletedAt       DateTime?

  // Relations
  activityEntry ActivityEntry @relation(fields: [activityEntryId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([activityEntryId, deletedAt])
  @@index([createdAt])
  @@map("comments")
  @@schema("public")
}

model Metric {
  id        String   @id @default(cuid())
  userId    String
  title     String
  emoji     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries MetricEntry[]

  @@index([userId])
  @@index([createdAt])
  @@map("metrics")
  @@schema("public")
}

model MetricEntry {
  id                 String   @id @default(cuid())
  userId             String
  metricId           String
  rating             Int
  date               DateTime @db.Date
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  description        String?
  skipped            Boolean  @default(false)
  descriptionSkipped Boolean  @default(false)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  metric Metric @relation(fields: [metricId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([metricId])
  @@index([createdAt])
  @@index([userId, date])
  @@index([metricId, date])
  @@map("metric_entries")
  @@schema("public")
}

model Plan {
  id                         String                       @id @default(cuid())
  userId                     String
  planGroupId                String?
  coachId                    String?
  goal                       String
  embedding                  Unsupported("vector(1536)")?
  emoji                      String?
  finishingDate              DateTime?                    @db.Date
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @default(now()) @updatedAt
  deletedAt                  DateTime?
  durationType               PlanDurationType?
  outlineType                PlanOutlineType              @default(SPECIFIC)
  timesPerWeek               Int?
  coachSuggestedTimesPerWeek Int?
  notes                      String?
  coachNotes                 String?
  suggestedByCoachAt         DateTime?
  isCoached                  Boolean            @default(false)
  visibility                 Visibility         @default(PUBLIC)
  backgroundImageUrl         String?

  // Current week state
  currentWeekState             PlanState?
  currentWeekStateCalculatedAt DateTime?

  // Progress cache
  progressState        Json?
  progressCalculatedAt DateTime?

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  planGroup         PlanGroup?        @relation(fields: [planGroupId], references: [id])
  coach             Coach?            @relation(fields: [coachId], references: [id], onDelete: SetNull)
  sessions          PlanSession[]
  activities        Activity[]
  milestones        PlanMilestone[]
  planGroupMembers  PlanGroupMember[]
  messages          Message[]

  @@index([userId, deletedAt])
  @@index([userId, id])
  @@index([createdAt])
  @@map("plans")
  @@schema("public")
}

model PlanSession {
  id               String   @id @default(cuid())
  planId           String
  isCoachSuggested Boolean  @default(false)
  activityId       String
  date             DateTime @db.Date
  descriptiveGuide String   @default("")
  quantity         Int
  createdAt        DateTime @default(now())

  // Relations
  plan     Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([planId, isCoachSuggested])
  @@index([activityId])
  @@index([planId, isCoachSuggested, date])
  @@map("plan_sessions")
  @@schema("public")
}

model PlanMilestone {
  id          String   @id @default(cuid())
  planId      String
  date        DateTime @db.Date
  description String
  progress    Int?
  criteria    Json?
  createdAt   DateTime @default(now())

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@map("plan_milestones")
  @@schema("public")
}

model PlanGroup {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  members         PlanGroupMember[]
  plans           Plan[]
  inviteLinks     PlanInviteLink[]

  @@map("plan_groups")
  @@schema("public")
}

model PlanGroupMember {
  id          String          @id @default(cuid())
  planGroupId String
  userId      String
  planId      String?         // their plan copy in this group
  role        PlanGroupRole   @default(MEMBER)
  status      PlanGroupStatus @default(INVITED)
  invitedById String?
  invitedAt   DateTime        @default(now())
  joinedAt    DateTime?
  leftAt      DateTime?

  // Relations
  planGroup PlanGroup @relation(fields: [planGroupId], references: [id], onDelete: Cascade)
  user      User      @relation("PlanGroupMember", fields: [userId], references: [id], onDelete: Cascade)
  plan      Plan?     @relation(fields: [planId], references: [id], onDelete: SetNull)
  invitedBy User?     @relation("PlanGroupMemberInviter", fields: [invitedById], references: [id], onDelete: SetNull)

  @@unique([planGroupId, userId])
  @@index([userId, status])
  @@index([planGroupId, status])
  @@map("plan_group_members")
  @@schema("public")
}

model PlanInviteLink {
  id          String    @id @default(cuid())
  planGroupId String
  createdById String
  expiresAt   DateTime?
  maxUses     Int?      @default(0) // 0 = unlimited
  usedCount   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  // Relations
  planGroup PlanGroup @relation(fields: [planGroupId], references: [id], onDelete: Cascade)
  createdBy User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([planGroupId, isActive])
  @@map("plan_invite_links")
  @@schema("public")
}

model Coach {
  id        String   @id @default(cuid())
  ownerId   String
  details   Json     @default("{}") // bio, personality, appearance, voice, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  plans Plan[]
  chats Chat[]

  @@index([ownerId])
  @@map("coaches")
  @@schema("public")
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  coachId   String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  coach    Coach     @relation(fields: [coachId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId])
  @@index([coachId])
  @@map("chats")
  @@schema("public")
}

model Message {
  id        String      @id @default(cuid())
  chatId    String
  planId    String?
  role      MessageRole
  content   String
  createdAt DateTime    @default(now())

  // Relations
  chat     Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  plan     Plan?             @relation(fields: [planId], references: [id], onDelete: Cascade)
  emotions MessageEmotion[]
  feedback MessageFeedback[]

  @@index([chatId])
  @@index([planId])
  @@index([createdAt])
  @@map("messages")
  @@schema("public")
}

model MessageEmotion {
  id        String @id @default(cuid())
  messageId String
  name      String
  score     Float
  color     String

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_emotions")
  @@schema("public")
}

model MessageFeedback {
  id                 String       @id @default(cuid())
  messageId          String
  userId             String
  feedbackType       FeedbackType
  feedbackReasons    String[]     @default([])
  additionalComments String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("message_feedback")
  @@schema("public")
}

model Notification {
  id          String             @id @default(cuid())
  userId      String
  title       String?
  message     String
  createdAt   DateTime           @default(now())
  sentAt      DateTime?
  processedAt DateTime?
  openedAt    DateTime?
  concludedAt DateTime?
  promptTag   String?
  status      NotificationStatus @default(PENDING)
  type        NotificationType   @default(INFO)
  relatedId   String?
  relatedData Json?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("notifications")
  @@schema("public")
}

model Recommendation {
  id                       String                   @id @default(cuid())
  userId                   String
  recommendationObjectType RecommendationObjectType @default(USER)
  recommendationObjectId   String
  score                    Float
  metadata                 Json                     @default("{}")
  createdAt                DateTime                 @default(now())
  updatedAt                DateTime                 @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recommendations")
  @@schema("public")
}

model JobRun {
  id           String    @id @default(cuid())
  jobType      JobType
  startedAt    DateTime  @default(now())
  completedAt  DateTime?
  success      Boolean   @default(false)
  input        Json?
  output       Json?
  errorMessage String?
  errorStack   String?
  triggeredBy  String    @default("CRON")

  @@index([jobType, startedAt])
  @@index([success])
  @@index([startedAt])
  @@map("job_runs")
  @@schema("public")
}

// Enums
enum JobType {
  HOURLY
  DAILY

  @@schema("public")
}

enum PlanType {
  FREE
  PLUS

  @@schema("public")
}

enum ThemeColor {
  RANDOM
  SLATE
  BLUE
  VIOLET
  AMBER
  EMERALD
  ROSE

  @@schema("public")
}

enum ThemeMode {
  LIGHT
  DARK
  AUTO

  @@schema("public")
}

enum Visibility {
  PUBLIC
  PRIVATE
  FRIENDS

  @@schema("public")
}

enum DailyCheckinTime {
  MORNING
  AFTERNOON
  EVENING

  @@schema("public")
}

enum PlanDurationType {
  HABIT
  LIFESTYLE
  CUSTOM

  @@schema("public")
}

enum PlanOutlineType {
  SPECIFIC
  TIMES_PER_WEEK

  @@schema("public")
}

enum PlanState {
  ON_TRACK
  AT_RISK
  FAILED
  COMPLETED

  @@schema("public")
}

enum CriteriaJunction {
  AND
  OR

  @@schema("public")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED

  @@schema("public")
}

enum NotificationStatus {
  PENDING
  PROCESSED
  OPENED
  CONCLUDED

  @@schema("public")
}

enum NotificationType {
  FRIEND_REQUEST
  PLAN_INVITATION
  ENGAGEMENT
  INFO
  METRIC_CHECKIN
  COACH

  @@schema("public")
}

enum RecommendationObjectType {
  USER

  @@schema("public")
}

enum MessageRole {
  USER
  COACH
  SYSTEM

  @@schema("public")
}

enum FeedbackType {
  POSITIVE
  NEGATIVE

  @@schema("public")
}

enum PlanGroupRole {
  OWNER
  MEMBER

  @@schema("public")
}

enum PlanGroupStatus {
  INVITED
  ACTIVE
  LEFT
  REJECTED

  @@schema("public")
}
