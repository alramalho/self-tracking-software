
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Connection
 * 
 */
export type Connection = $Result.DefaultSelection<Prisma.$ConnectionPayload>
/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>
/**
 * Model ActivityEntry
 * 
 */
export type ActivityEntry = $Result.DefaultSelection<Prisma.$ActivityEntryPayload>
/**
 * Model Reaction
 * 
 */
export type Reaction = $Result.DefaultSelection<Prisma.$ReactionPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model Metric
 * 
 */
export type Metric = $Result.DefaultSelection<Prisma.$MetricPayload>
/**
 * Model MetricEntry
 * 
 */
export type MetricEntry = $Result.DefaultSelection<Prisma.$MetricEntryPayload>
/**
 * Model Plan
 * 
 */
export type Plan = $Result.DefaultSelection<Prisma.$PlanPayload>
/**
 * Model PlanSession
 * 
 */
export type PlanSession = $Result.DefaultSelection<Prisma.$PlanSessionPayload>
/**
 * Model PlanMilestone
 * 
 */
export type PlanMilestone = $Result.DefaultSelection<Prisma.$PlanMilestonePayload>
/**
 * Model PlanGroup
 * 
 */
export type PlanGroup = $Result.DefaultSelection<Prisma.$PlanGroupPayload>
/**
 * Model PlanInvitation
 * 
 */
export type PlanInvitation = $Result.DefaultSelection<Prisma.$PlanInvitationPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model MessageEmotion
 * 
 */
export type MessageEmotion = $Result.DefaultSelection<Prisma.$MessageEmotionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Recommendation
 * 
 */
export type Recommendation = $Result.DefaultSelection<Prisma.$RecommendationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const PlanType: {
  FREE: 'FREE',
  PLUS: 'PLUS'
};

export type PlanType = (typeof PlanType)[keyof typeof PlanType]


export const ThemeColor: {
  RANDOM: 'RANDOM',
  SLATE: 'SLATE',
  BLUE: 'BLUE',
  VIOLET: 'VIOLET',
  AMBER: 'AMBER',
  EMERALD: 'EMERALD',
  ROSE: 'ROSE'
};

export type ThemeColor = (typeof ThemeColor)[keyof typeof ThemeColor]


export const ActivityVisibility: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  FRIENDS: 'FRIENDS'
};

export type ActivityVisibility = (typeof ActivityVisibility)[keyof typeof ActivityVisibility]


export const DailyCheckinTime: {
  MORNING: 'MORNING',
  AFTERNOON: 'AFTERNOON',
  EVENING: 'EVENING'
};

export type DailyCheckinTime = (typeof DailyCheckinTime)[keyof typeof DailyCheckinTime]


export const PlanDurationType: {
  HABIT: 'HABIT',
  LIFESTYLE: 'LIFESTYLE',
  CUSTOM: 'CUSTOM'
};

export type PlanDurationType = (typeof PlanDurationType)[keyof typeof PlanDurationType]


export const PlanOutlineType: {
  SPECIFIC: 'SPECIFIC',
  TIMES_PER_WEEK: 'TIMES_PER_WEEK'
};

export type PlanOutlineType = (typeof PlanOutlineType)[keyof typeof PlanOutlineType]


export const PlanState: {
  ON_TRACK: 'ON_TRACK',
  AT_RISK: 'AT_RISK',
  FAILED: 'FAILED',
  COMPLETED: 'COMPLETED'
};

export type PlanState = (typeof PlanState)[keyof typeof PlanState]


export const CriteriaJunction: {
  AND: 'AND',
  OR: 'OR'
};

export type CriteriaJunction = (typeof CriteriaJunction)[keyof typeof CriteriaJunction]


export const ConnectionStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  BLOCKED: 'BLOCKED'
};

export type ConnectionStatus = (typeof ConnectionStatus)[keyof typeof ConnectionStatus]


export const InvitationStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

export type InvitationStatus = (typeof InvitationStatus)[keyof typeof InvitationStatus]


export const NotificationStatus: {
  PENDING: 'PENDING',
  PROCESSED: 'PROCESSED',
  OPENED: 'OPENED',
  CONCLUDED: 'CONCLUDED'
};

export type NotificationStatus = (typeof NotificationStatus)[keyof typeof NotificationStatus]


export const NotificationType: {
  FRIEND_REQUEST: 'FRIEND_REQUEST',
  PLAN_INVITATION: 'PLAN_INVITATION',
  ENGAGEMENT: 'ENGAGEMENT',
  INFO: 'INFO',
  METRIC_CHECKIN: 'METRIC_CHECKIN',
  COACH: 'COACH'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const RecommendationObjectType: {
  USER: 'USER'
};

export type RecommendationObjectType = (typeof RecommendationObjectType)[keyof typeof RecommendationObjectType]


export const MessageRole: {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT',
  SYSTEM: 'SYSTEM'
};

export type MessageRole = (typeof MessageRole)[keyof typeof MessageRole]

}

export type PlanType = $Enums.PlanType

export const PlanType: typeof $Enums.PlanType

export type ThemeColor = $Enums.ThemeColor

export const ThemeColor: typeof $Enums.ThemeColor

export type ActivityVisibility = $Enums.ActivityVisibility

export const ActivityVisibility: typeof $Enums.ActivityVisibility

export type DailyCheckinTime = $Enums.DailyCheckinTime

export const DailyCheckinTime: typeof $Enums.DailyCheckinTime

export type PlanDurationType = $Enums.PlanDurationType

export const PlanDurationType: typeof $Enums.PlanDurationType

export type PlanOutlineType = $Enums.PlanOutlineType

export const PlanOutlineType: typeof $Enums.PlanOutlineType

export type PlanState = $Enums.PlanState

export const PlanState: typeof $Enums.PlanState

export type CriteriaJunction = $Enums.CriteriaJunction

export const CriteriaJunction: typeof $Enums.CriteriaJunction

export type ConnectionStatus = $Enums.ConnectionStatus

export const ConnectionStatus: typeof $Enums.ConnectionStatus

export type InvitationStatus = $Enums.InvitationStatus

export const InvitationStatus: typeof $Enums.InvitationStatus

export type NotificationStatus = $Enums.NotificationStatus

export const NotificationStatus: typeof $Enums.NotificationStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type RecommendationObjectType = $Enums.RecommendationObjectType

export const RecommendationObjectType: typeof $Enums.RecommendationObjectType

export type MessageRole = $Enums.MessageRole

export const MessageRole: typeof $Enums.MessageRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.connection`: Exposes CRUD operations for the **Connection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Connections
    * const connections = await prisma.connection.findMany()
    * ```
    */
  get connection(): Prisma.ConnectionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.activityEntry`: Exposes CRUD operations for the **ActivityEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityEntries
    * const activityEntries = await prisma.activityEntry.findMany()
    * ```
    */
  get activityEntry(): Prisma.ActivityEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reaction`: Exposes CRUD operations for the **Reaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reactions
    * const reactions = await prisma.reaction.findMany()
    * ```
    */
  get reaction(): Prisma.ReactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metric`: Exposes CRUD operations for the **Metric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Metrics
    * const metrics = await prisma.metric.findMany()
    * ```
    */
  get metric(): Prisma.MetricDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.metricEntry`: Exposes CRUD operations for the **MetricEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetricEntries
    * const metricEntries = await prisma.metricEntry.findMany()
    * ```
    */
  get metricEntry(): Prisma.MetricEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.plan`: Exposes CRUD operations for the **Plan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plan.findMany()
    * ```
    */
  get plan(): Prisma.PlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.planSession`: Exposes CRUD operations for the **PlanSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlanSessions
    * const planSessions = await prisma.planSession.findMany()
    * ```
    */
  get planSession(): Prisma.PlanSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.planMilestone`: Exposes CRUD operations for the **PlanMilestone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlanMilestones
    * const planMilestones = await prisma.planMilestone.findMany()
    * ```
    */
  get planMilestone(): Prisma.PlanMilestoneDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.planGroup`: Exposes CRUD operations for the **PlanGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlanGroups
    * const planGroups = await prisma.planGroup.findMany()
    * ```
    */
  get planGroup(): Prisma.PlanGroupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.planInvitation`: Exposes CRUD operations for the **PlanInvitation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlanInvitations
    * const planInvitations = await prisma.planInvitation.findMany()
    * ```
    */
  get planInvitation(): Prisma.PlanInvitationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messageEmotion`: Exposes CRUD operations for the **MessageEmotion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessageEmotions
    * const messageEmotions = await prisma.messageEmotion.findMany()
    * ```
    */
  get messageEmotion(): Prisma.MessageEmotionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.recommendation`: Exposes CRUD operations for the **Recommendation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recommendations
    * const recommendations = await prisma.recommendation.findMany()
    * ```
    */
  get recommendation(): Prisma.RecommendationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Connection: 'Connection',
    Activity: 'Activity',
    ActivityEntry: 'ActivityEntry',
    Reaction: 'Reaction',
    Comment: 'Comment',
    Metric: 'Metric',
    MetricEntry: 'MetricEntry',
    Plan: 'Plan',
    PlanSession: 'PlanSession',
    PlanMilestone: 'PlanMilestone',
    PlanGroup: 'PlanGroup',
    PlanInvitation: 'PlanInvitation',
    Message: 'Message',
    MessageEmotion: 'MessageEmotion',
    Notification: 'Notification',
    Recommendation: 'Recommendation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "connection" | "activity" | "activityEntry" | "reaction" | "comment" | "metric" | "metricEntry" | "plan" | "planSession" | "planMilestone" | "planGroup" | "planInvitation" | "message" | "messageEmotion" | "notification" | "recommendation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Connection: {
        payload: Prisma.$ConnectionPayload<ExtArgs>
        fields: Prisma.ConnectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConnectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConnectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          findFirst: {
            args: Prisma.ConnectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConnectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          findMany: {
            args: Prisma.ConnectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>[]
          }
          create: {
            args: Prisma.ConnectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          createMany: {
            args: Prisma.ConnectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConnectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>[]
          }
          delete: {
            args: Prisma.ConnectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          update: {
            args: Prisma.ConnectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          deleteMany: {
            args: Prisma.ConnectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConnectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConnectionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>[]
          }
          upsert: {
            args: Prisma.ConnectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConnectionPayload>
          }
          aggregate: {
            args: Prisma.ConnectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConnection>
          }
          groupBy: {
            args: Prisma.ConnectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConnectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConnectionCountArgs<ExtArgs>
            result: $Utils.Optional<ConnectionCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      ActivityEntry: {
        payload: Prisma.$ActivityEntryPayload<ExtArgs>
        fields: Prisma.ActivityEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>
          }
          findFirst: {
            args: Prisma.ActivityEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>
          }
          findMany: {
            args: Prisma.ActivityEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>[]
          }
          create: {
            args: Prisma.ActivityEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>
          }
          createMany: {
            args: Prisma.ActivityEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ActivityEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>[]
          }
          delete: {
            args: Prisma.ActivityEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>
          }
          update: {
            args: Prisma.ActivityEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>
          }
          deleteMany: {
            args: Prisma.ActivityEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ActivityEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>[]
          }
          upsert: {
            args: Prisma.ActivityEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ActivityEntryPayload>
          }
          aggregate: {
            args: Prisma.ActivityEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivityEntry>
          }
          groupBy: {
            args: Prisma.ActivityEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityEntryCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityEntryCountAggregateOutputType> | number
          }
        }
      }
      Reaction: {
        payload: Prisma.$ReactionPayload<ExtArgs>
        fields: Prisma.ReactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          findFirst: {
            args: Prisma.ReactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          findMany: {
            args: Prisma.ReactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>[]
          }
          create: {
            args: Prisma.ReactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          createMany: {
            args: Prisma.ReactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>[]
          }
          delete: {
            args: Prisma.ReactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          update: {
            args: Prisma.ReactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          deleteMany: {
            args: Prisma.ReactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>[]
          }
          upsert: {
            args: Prisma.ReactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReactionPayload>
          }
          aggregate: {
            args: Prisma.ReactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReaction>
          }
          groupBy: {
            args: Prisma.ReactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReactionCountArgs<ExtArgs>
            result: $Utils.Optional<ReactionCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      Metric: {
        payload: Prisma.$MetricPayload<ExtArgs>
        fields: Prisma.MetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          findFirst: {
            args: Prisma.MetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          findMany: {
            args: Prisma.MetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>[]
          }
          create: {
            args: Prisma.MetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          createMany: {
            args: Prisma.MetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>[]
          }
          delete: {
            args: Prisma.MetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          update: {
            args: Prisma.MetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          deleteMany: {
            args: Prisma.MetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MetricUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>[]
          }
          upsert: {
            args: Prisma.MetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          aggregate: {
            args: Prisma.MetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetric>
          }
          groupBy: {
            args: Prisma.MetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricCountArgs<ExtArgs>
            result: $Utils.Optional<MetricCountAggregateOutputType> | number
          }
        }
      }
      MetricEntry: {
        payload: Prisma.$MetricEntryPayload<ExtArgs>
        fields: Prisma.MetricEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>
          }
          findFirst: {
            args: Prisma.MetricEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>
          }
          findMany: {
            args: Prisma.MetricEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>[]
          }
          create: {
            args: Prisma.MetricEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>
          }
          createMany: {
            args: Prisma.MetricEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>[]
          }
          delete: {
            args: Prisma.MetricEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>
          }
          update: {
            args: Prisma.MetricEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>
          }
          deleteMany: {
            args: Prisma.MetricEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MetricEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>[]
          }
          upsert: {
            args: Prisma.MetricEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricEntryPayload>
          }
          aggregate: {
            args: Prisma.MetricEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetricEntry>
          }
          groupBy: {
            args: Prisma.MetricEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricEntryCountArgs<ExtArgs>
            result: $Utils.Optional<MetricEntryCountAggregateOutputType> | number
          }
        }
      }
      Plan: {
        payload: Prisma.$PlanPayload<ExtArgs>
        fields: Prisma.PlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findFirst: {
            args: Prisma.PlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findMany: {
            args: Prisma.PlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          create: {
            args: Prisma.PlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          createMany: {
            args: Prisma.PlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          delete: {
            args: Prisma.PlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          update: {
            args: Prisma.PlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          deleteMany: {
            args: Prisma.PlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          upsert: {
            args: Prisma.PlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          aggregate: {
            args: Prisma.PlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlan>
          }
          groupBy: {
            args: Prisma.PlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanCountArgs<ExtArgs>
            result: $Utils.Optional<PlanCountAggregateOutputType> | number
          }
        }
      }
      PlanSession: {
        payload: Prisma.$PlanSessionPayload<ExtArgs>
        fields: Prisma.PlanSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>
          }
          findFirst: {
            args: Prisma.PlanSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>
          }
          findMany: {
            args: Prisma.PlanSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>[]
          }
          create: {
            args: Prisma.PlanSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>
          }
          createMany: {
            args: Prisma.PlanSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>[]
          }
          delete: {
            args: Prisma.PlanSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>
          }
          update: {
            args: Prisma.PlanSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>
          }
          deleteMany: {
            args: Prisma.PlanSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlanSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>[]
          }
          upsert: {
            args: Prisma.PlanSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanSessionPayload>
          }
          aggregate: {
            args: Prisma.PlanSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlanSession>
          }
          groupBy: {
            args: Prisma.PlanSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanSessionCountArgs<ExtArgs>
            result: $Utils.Optional<PlanSessionCountAggregateOutputType> | number
          }
        }
      }
      PlanMilestone: {
        payload: Prisma.$PlanMilestonePayload<ExtArgs>
        fields: Prisma.PlanMilestoneFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanMilestoneFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanMilestoneFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>
          }
          findFirst: {
            args: Prisma.PlanMilestoneFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanMilestoneFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>
          }
          findMany: {
            args: Prisma.PlanMilestoneFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>[]
          }
          create: {
            args: Prisma.PlanMilestoneCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>
          }
          createMany: {
            args: Prisma.PlanMilestoneCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanMilestoneCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>[]
          }
          delete: {
            args: Prisma.PlanMilestoneDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>
          }
          update: {
            args: Prisma.PlanMilestoneUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>
          }
          deleteMany: {
            args: Prisma.PlanMilestoneDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanMilestoneUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlanMilestoneUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>[]
          }
          upsert: {
            args: Prisma.PlanMilestoneUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanMilestonePayload>
          }
          aggregate: {
            args: Prisma.PlanMilestoneAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlanMilestone>
          }
          groupBy: {
            args: Prisma.PlanMilestoneGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanMilestoneGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanMilestoneCountArgs<ExtArgs>
            result: $Utils.Optional<PlanMilestoneCountAggregateOutputType> | number
          }
        }
      }
      PlanGroup: {
        payload: Prisma.$PlanGroupPayload<ExtArgs>
        fields: Prisma.PlanGroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanGroupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanGroupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>
          }
          findFirst: {
            args: Prisma.PlanGroupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanGroupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>
          }
          findMany: {
            args: Prisma.PlanGroupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>[]
          }
          create: {
            args: Prisma.PlanGroupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>
          }
          createMany: {
            args: Prisma.PlanGroupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanGroupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>[]
          }
          delete: {
            args: Prisma.PlanGroupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>
          }
          update: {
            args: Prisma.PlanGroupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>
          }
          deleteMany: {
            args: Prisma.PlanGroupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanGroupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlanGroupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>[]
          }
          upsert: {
            args: Prisma.PlanGroupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanGroupPayload>
          }
          aggregate: {
            args: Prisma.PlanGroupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlanGroup>
          }
          groupBy: {
            args: Prisma.PlanGroupGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanGroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanGroupCountArgs<ExtArgs>
            result: $Utils.Optional<PlanGroupCountAggregateOutputType> | number
          }
        }
      }
      PlanInvitation: {
        payload: Prisma.$PlanInvitationPayload<ExtArgs>
        fields: Prisma.PlanInvitationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanInvitationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanInvitationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>
          }
          findFirst: {
            args: Prisma.PlanInvitationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanInvitationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>
          }
          findMany: {
            args: Prisma.PlanInvitationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>[]
          }
          create: {
            args: Prisma.PlanInvitationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>
          }
          createMany: {
            args: Prisma.PlanInvitationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlanInvitationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>[]
          }
          delete: {
            args: Prisma.PlanInvitationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>
          }
          update: {
            args: Prisma.PlanInvitationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>
          }
          deleteMany: {
            args: Prisma.PlanInvitationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlanInvitationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlanInvitationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>[]
          }
          upsert: {
            args: Prisma.PlanInvitationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlanInvitationPayload>
          }
          aggregate: {
            args: Prisma.PlanInvitationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlanInvitation>
          }
          groupBy: {
            args: Prisma.PlanInvitationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlanInvitationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanInvitationCountArgs<ExtArgs>
            result: $Utils.Optional<PlanInvitationCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      MessageEmotion: {
        payload: Prisma.$MessageEmotionPayload<ExtArgs>
        fields: Prisma.MessageEmotionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageEmotionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageEmotionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>
          }
          findFirst: {
            args: Prisma.MessageEmotionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageEmotionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>
          }
          findMany: {
            args: Prisma.MessageEmotionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>[]
          }
          create: {
            args: Prisma.MessageEmotionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>
          }
          createMany: {
            args: Prisma.MessageEmotionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageEmotionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>[]
          }
          delete: {
            args: Prisma.MessageEmotionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>
          }
          update: {
            args: Prisma.MessageEmotionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>
          }
          deleteMany: {
            args: Prisma.MessageEmotionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageEmotionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageEmotionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>[]
          }
          upsert: {
            args: Prisma.MessageEmotionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessageEmotionPayload>
          }
          aggregate: {
            args: Prisma.MessageEmotionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessageEmotion>
          }
          groupBy: {
            args: Prisma.MessageEmotionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageEmotionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageEmotionCountArgs<ExtArgs>
            result: $Utils.Optional<MessageEmotionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Recommendation: {
        payload: Prisma.$RecommendationPayload<ExtArgs>
        fields: Prisma.RecommendationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecommendationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecommendationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findFirst: {
            args: Prisma.RecommendationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecommendationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          findMany: {
            args: Prisma.RecommendationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          create: {
            args: Prisma.RecommendationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          createMany: {
            args: Prisma.RecommendationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RecommendationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          delete: {
            args: Prisma.RecommendationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          update: {
            args: Prisma.RecommendationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          deleteMany: {
            args: Prisma.RecommendationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RecommendationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RecommendationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>[]
          }
          upsert: {
            args: Prisma.RecommendationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RecommendationPayload>
          }
          aggregate: {
            args: Prisma.RecommendationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecommendation>
          }
          groupBy: {
            args: Prisma.RecommendationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RecommendationGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecommendationCountArgs<ExtArgs>
            result: $Utils.Optional<RecommendationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    connection?: ConnectionOmit
    activity?: ActivityOmit
    activityEntry?: ActivityEntryOmit
    reaction?: ReactionOmit
    comment?: CommentOmit
    metric?: MetricOmit
    metricEntry?: MetricEntryOmit
    plan?: PlanOmit
    planSession?: PlanSessionOmit
    planMilestone?: PlanMilestoneOmit
    planGroup?: PlanGroupOmit
    planInvitation?: PlanInvitationOmit
    message?: MessageOmit
    messageEmotion?: MessageEmotionOmit
    notification?: NotificationOmit
    recommendation?: RecommendationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    activities: number
    activityEntries: number
    metrics: number
    metricEntries: number
    plans: number
    messages: number
    notifications: number
    planInvitationsSent: number
    planInvitationsReceived: number
    planGroupMemberships: number
    recommendations: number
    reactionsSent: number
    connectionsFrom: number
    connectionsTo: number
    referredUsers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    activityEntries?: boolean | UserCountOutputTypeCountActivityEntriesArgs
    metrics?: boolean | UserCountOutputTypeCountMetricsArgs
    metricEntries?: boolean | UserCountOutputTypeCountMetricEntriesArgs
    plans?: boolean | UserCountOutputTypeCountPlansArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    planInvitationsSent?: boolean | UserCountOutputTypeCountPlanInvitationsSentArgs
    planInvitationsReceived?: boolean | UserCountOutputTypeCountPlanInvitationsReceivedArgs
    planGroupMemberships?: boolean | UserCountOutputTypeCountPlanGroupMembershipsArgs
    recommendations?: boolean | UserCountOutputTypeCountRecommendationsArgs
    reactionsSent?: boolean | UserCountOutputTypeCountReactionsSentArgs
    connectionsFrom?: boolean | UserCountOutputTypeCountConnectionsFromArgs
    connectionsTo?: boolean | UserCountOutputTypeCountConnectionsToArgs
    referredUsers?: boolean | UserCountOutputTypeCountReferredUsersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivityEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMetricEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlanInvitationsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanInvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlanInvitationsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanInvitationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPlanGroupMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanGroupWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRecommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReactionsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConnectionsFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConnectionsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReferredUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type ActivityCountOutputType
   */

  export type ActivityCountOutputType = {
    entries: number
    planSessions: number
    plans: number
  }

  export type ActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entries?: boolean | ActivityCountOutputTypeCountEntriesArgs
    planSessions?: boolean | ActivityCountOutputTypeCountPlanSessionsArgs
    plans?: boolean | ActivityCountOutputTypeCountPlansArgs
  }

  // Custom InputTypes
  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCountOutputType
     */
    select?: ActivityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityEntryWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountPlanSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanSessionWhereInput
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
  }


  /**
   * Count Type ActivityEntryCountOutputType
   */

  export type ActivityEntryCountOutputType = {
    reactions: number
    comments: number
  }

  export type ActivityEntryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reactions?: boolean | ActivityEntryCountOutputTypeCountReactionsArgs
    comments?: boolean | ActivityEntryCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * ActivityEntryCountOutputType without action
   */
  export type ActivityEntryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntryCountOutputType
     */
    select?: ActivityEntryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityEntryCountOutputType without action
   */
  export type ActivityEntryCountOutputTypeCountReactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
  }

  /**
   * ActivityEntryCountOutputType without action
   */
  export type ActivityEntryCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type MetricCountOutputType
   */

  export type MetricCountOutputType = {
    entries: number
  }

  export type MetricCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entries?: boolean | MetricCountOutputTypeCountEntriesArgs
  }

  // Custom InputTypes
  /**
   * MetricCountOutputType without action
   */
  export type MetricCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricCountOutputType
     */
    select?: MetricCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MetricCountOutputType without action
   */
  export type MetricCountOutputTypeCountEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricEntryWhereInput
  }


  /**
   * Count Type PlanCountOutputType
   */

  export type PlanCountOutputType = {
    sessions: number
    activities: number
    invitations: number
    milestones: number
  }

  export type PlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | PlanCountOutputTypeCountSessionsArgs
    activities?: boolean | PlanCountOutputTypeCountActivitiesArgs
    invitations?: boolean | PlanCountOutputTypeCountInvitationsArgs
    milestones?: boolean | PlanCountOutputTypeCountMilestonesArgs
  }

  // Custom InputTypes
  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCountOutputType
     */
    select?: PlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanSessionWhereInput
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountInvitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanInvitationWhereInput
  }

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountMilestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanMilestoneWhereInput
  }


  /**
   * Count Type PlanGroupCountOutputType
   */

  export type PlanGroupCountOutputType = {
    members: number
    plans: number
  }

  export type PlanGroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | PlanGroupCountOutputTypeCountMembersArgs
    plans?: boolean | PlanGroupCountOutputTypeCountPlansArgs
  }

  // Custom InputTypes
  /**
   * PlanGroupCountOutputType without action
   */
  export type PlanGroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroupCountOutputType
     */
    select?: PlanGroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlanGroupCountOutputType without action
   */
  export type PlanGroupCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * PlanGroupCountOutputType without action
   */
  export type PlanGroupCountOutputTypeCountPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
  }


  /**
   * Count Type MessageCountOutputType
   */

  export type MessageCountOutputType = {
    emotions: number
  }

  export type MessageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    emotions?: boolean | MessageCountOutputTypeCountEmotionsArgs
  }

  // Custom InputTypes
  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageCountOutputType
     */
    select?: MessageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MessageCountOutputType without action
   */
  export type MessageCountOutputTypeCountEmotionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageEmotionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    age: number | null
  }

  export type UserSumAggregateOutputType = {
    age: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    profile: string | null
    picture: string | null
    age: number | null
    username: string | null
    timezone: string | null
    clerkId: string | null
    language: string | null
    planType: $Enums.PlanType | null
    lastActiveAt: Date | null
    email: string | null
    createdAt: Date | null
    deletedAt: Date | null
    isPwaInstalled: boolean | null
    isPwaNotificationsEnabled: boolean | null
    lookingForAp: boolean | null
    pwaSubscriptionEndpoint: string | null
    pwaSubscriptionKey: string | null
    pwaSubscriptionAuthToken: string | null
    unactivatedEmailSentAt: Date | null
    themeBaseColor: $Enums.ThemeColor | null
    defaultActivityVisibility: $Enums.ActivityVisibility | null
    recommendationsOutdated: boolean | null
    recommendationsLastCalculatedAt: Date | null
    dailyCheckinTime: $Enums.DailyCheckinTime | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSubscriptionStatus: string | null
    referredById: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    profile: string | null
    picture: string | null
    age: number | null
    username: string | null
    timezone: string | null
    clerkId: string | null
    language: string | null
    planType: $Enums.PlanType | null
    lastActiveAt: Date | null
    email: string | null
    createdAt: Date | null
    deletedAt: Date | null
    isPwaInstalled: boolean | null
    isPwaNotificationsEnabled: boolean | null
    lookingForAp: boolean | null
    pwaSubscriptionEndpoint: string | null
    pwaSubscriptionKey: string | null
    pwaSubscriptionAuthToken: string | null
    unactivatedEmailSentAt: Date | null
    themeBaseColor: $Enums.ThemeColor | null
    defaultActivityVisibility: $Enums.ActivityVisibility | null
    recommendationsOutdated: boolean | null
    recommendationsLastCalculatedAt: Date | null
    dailyCheckinTime: $Enums.DailyCheckinTime | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSubscriptionStatus: string | null
    referredById: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    profile: number
    picture: number
    age: number
    username: number
    timezone: number
    clerkId: number
    language: number
    planType: number
    lastActiveAt: number
    email: number
    createdAt: number
    deletedAt: number
    isPwaInstalled: number
    isPwaNotificationsEnabled: number
    lookingForAp: number
    pwaSubscriptionEndpoint: number
    pwaSubscriptionKey: number
    pwaSubscriptionAuthToken: number
    unactivatedEmailSentAt: number
    themeBaseColor: number
    defaultActivityVisibility: number
    recommendationsOutdated: number
    recommendationsLastCalculatedAt: number
    dailyCheckinDays: number
    dailyCheckinTime: number
    stripeCustomerId: number
    stripeSubscriptionId: number
    stripeSubscriptionStatus: number
    referredById: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    age?: true
  }

  export type UserSumAggregateInputType = {
    age?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    profile?: true
    picture?: true
    age?: true
    username?: true
    timezone?: true
    clerkId?: true
    language?: true
    planType?: true
    lastActiveAt?: true
    email?: true
    createdAt?: true
    deletedAt?: true
    isPwaInstalled?: true
    isPwaNotificationsEnabled?: true
    lookingForAp?: true
    pwaSubscriptionEndpoint?: true
    pwaSubscriptionKey?: true
    pwaSubscriptionAuthToken?: true
    unactivatedEmailSentAt?: true
    themeBaseColor?: true
    defaultActivityVisibility?: true
    recommendationsOutdated?: true
    recommendationsLastCalculatedAt?: true
    dailyCheckinTime?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSubscriptionStatus?: true
    referredById?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    profile?: true
    picture?: true
    age?: true
    username?: true
    timezone?: true
    clerkId?: true
    language?: true
    planType?: true
    lastActiveAt?: true
    email?: true
    createdAt?: true
    deletedAt?: true
    isPwaInstalled?: true
    isPwaNotificationsEnabled?: true
    lookingForAp?: true
    pwaSubscriptionEndpoint?: true
    pwaSubscriptionKey?: true
    pwaSubscriptionAuthToken?: true
    unactivatedEmailSentAt?: true
    themeBaseColor?: true
    defaultActivityVisibility?: true
    recommendationsOutdated?: true
    recommendationsLastCalculatedAt?: true
    dailyCheckinTime?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSubscriptionStatus?: true
    referredById?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    profile?: true
    picture?: true
    age?: true
    username?: true
    timezone?: true
    clerkId?: true
    language?: true
    planType?: true
    lastActiveAt?: true
    email?: true
    createdAt?: true
    deletedAt?: true
    isPwaInstalled?: true
    isPwaNotificationsEnabled?: true
    lookingForAp?: true
    pwaSubscriptionEndpoint?: true
    pwaSubscriptionKey?: true
    pwaSubscriptionAuthToken?: true
    unactivatedEmailSentAt?: true
    themeBaseColor?: true
    defaultActivityVisibility?: true
    recommendationsOutdated?: true
    recommendationsLastCalculatedAt?: true
    dailyCheckinDays?: true
    dailyCheckinTime?: true
    stripeCustomerId?: true
    stripeSubscriptionId?: true
    stripeSubscriptionStatus?: true
    referredById?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    profile: string | null
    picture: string | null
    age: number | null
    username: string | null
    timezone: string | null
    clerkId: string | null
    language: string | null
    planType: $Enums.PlanType
    lastActiveAt: Date | null
    email: string
    createdAt: Date
    deletedAt: Date | null
    isPwaInstalled: boolean
    isPwaNotificationsEnabled: boolean
    lookingForAp: boolean | null
    pwaSubscriptionEndpoint: string | null
    pwaSubscriptionKey: string | null
    pwaSubscriptionAuthToken: string | null
    unactivatedEmailSentAt: Date | null
    themeBaseColor: $Enums.ThemeColor
    defaultActivityVisibility: $Enums.ActivityVisibility
    recommendationsOutdated: boolean
    recommendationsLastCalculatedAt: Date | null
    dailyCheckinDays: string[]
    dailyCheckinTime: $Enums.DailyCheckinTime | null
    stripeCustomerId: string | null
    stripeSubscriptionId: string | null
    stripeSubscriptionStatus: string | null
    referredById: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    profile?: boolean
    picture?: boolean
    age?: boolean
    username?: boolean
    timezone?: boolean
    clerkId?: boolean
    language?: boolean
    planType?: boolean
    lastActiveAt?: boolean
    email?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean
    pwaSubscriptionEndpoint?: boolean
    pwaSubscriptionKey?: boolean
    pwaSubscriptionAuthToken?: boolean
    unactivatedEmailSentAt?: boolean
    themeBaseColor?: boolean
    defaultActivityVisibility?: boolean
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: boolean
    dailyCheckinDays?: boolean
    dailyCheckinTime?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSubscriptionStatus?: boolean
    referredById?: boolean
    activities?: boolean | User$activitiesArgs<ExtArgs>
    activityEntries?: boolean | User$activityEntriesArgs<ExtArgs>
    metrics?: boolean | User$metricsArgs<ExtArgs>
    metricEntries?: boolean | User$metricEntriesArgs<ExtArgs>
    plans?: boolean | User$plansArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    planInvitationsSent?: boolean | User$planInvitationsSentArgs<ExtArgs>
    planInvitationsReceived?: boolean | User$planInvitationsReceivedArgs<ExtArgs>
    planGroupMemberships?: boolean | User$planGroupMembershipsArgs<ExtArgs>
    recommendations?: boolean | User$recommendationsArgs<ExtArgs>
    reactionsSent?: boolean | User$reactionsSentArgs<ExtArgs>
    connectionsFrom?: boolean | User$connectionsFromArgs<ExtArgs>
    connectionsTo?: boolean | User$connectionsToArgs<ExtArgs>
    referredUsers?: boolean | User$referredUsersArgs<ExtArgs>
    referredBy?: boolean | User$referredByArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    profile?: boolean
    picture?: boolean
    age?: boolean
    username?: boolean
    timezone?: boolean
    clerkId?: boolean
    language?: boolean
    planType?: boolean
    lastActiveAt?: boolean
    email?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean
    pwaSubscriptionEndpoint?: boolean
    pwaSubscriptionKey?: boolean
    pwaSubscriptionAuthToken?: boolean
    unactivatedEmailSentAt?: boolean
    themeBaseColor?: boolean
    defaultActivityVisibility?: boolean
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: boolean
    dailyCheckinDays?: boolean
    dailyCheckinTime?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSubscriptionStatus?: boolean
    referredById?: boolean
    referredBy?: boolean | User$referredByArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    profile?: boolean
    picture?: boolean
    age?: boolean
    username?: boolean
    timezone?: boolean
    clerkId?: boolean
    language?: boolean
    planType?: boolean
    lastActiveAt?: boolean
    email?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean
    pwaSubscriptionEndpoint?: boolean
    pwaSubscriptionKey?: boolean
    pwaSubscriptionAuthToken?: boolean
    unactivatedEmailSentAt?: boolean
    themeBaseColor?: boolean
    defaultActivityVisibility?: boolean
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: boolean
    dailyCheckinDays?: boolean
    dailyCheckinTime?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSubscriptionStatus?: boolean
    referredById?: boolean
    referredBy?: boolean | User$referredByArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    profile?: boolean
    picture?: boolean
    age?: boolean
    username?: boolean
    timezone?: boolean
    clerkId?: boolean
    language?: boolean
    planType?: boolean
    lastActiveAt?: boolean
    email?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean
    pwaSubscriptionEndpoint?: boolean
    pwaSubscriptionKey?: boolean
    pwaSubscriptionAuthToken?: boolean
    unactivatedEmailSentAt?: boolean
    themeBaseColor?: boolean
    defaultActivityVisibility?: boolean
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: boolean
    dailyCheckinDays?: boolean
    dailyCheckinTime?: boolean
    stripeCustomerId?: boolean
    stripeSubscriptionId?: boolean
    stripeSubscriptionStatus?: boolean
    referredById?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "profile" | "picture" | "age" | "username" | "timezone" | "clerkId" | "language" | "planType" | "lastActiveAt" | "email" | "createdAt" | "deletedAt" | "isPwaInstalled" | "isPwaNotificationsEnabled" | "lookingForAp" | "pwaSubscriptionEndpoint" | "pwaSubscriptionKey" | "pwaSubscriptionAuthToken" | "unactivatedEmailSentAt" | "themeBaseColor" | "defaultActivityVisibility" | "recommendationsOutdated" | "recommendationsLastCalculatedAt" | "dailyCheckinDays" | "dailyCheckinTime" | "stripeCustomerId" | "stripeSubscriptionId" | "stripeSubscriptionStatus" | "referredById", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activities?: boolean | User$activitiesArgs<ExtArgs>
    activityEntries?: boolean | User$activityEntriesArgs<ExtArgs>
    metrics?: boolean | User$metricsArgs<ExtArgs>
    metricEntries?: boolean | User$metricEntriesArgs<ExtArgs>
    plans?: boolean | User$plansArgs<ExtArgs>
    messages?: boolean | User$messagesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    planInvitationsSent?: boolean | User$planInvitationsSentArgs<ExtArgs>
    planInvitationsReceived?: boolean | User$planInvitationsReceivedArgs<ExtArgs>
    planGroupMemberships?: boolean | User$planGroupMembershipsArgs<ExtArgs>
    recommendations?: boolean | User$recommendationsArgs<ExtArgs>
    reactionsSent?: boolean | User$reactionsSentArgs<ExtArgs>
    connectionsFrom?: boolean | User$connectionsFromArgs<ExtArgs>
    connectionsTo?: boolean | User$connectionsToArgs<ExtArgs>
    referredUsers?: boolean | User$referredUsersArgs<ExtArgs>
    referredBy?: boolean | User$referredByArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referredBy?: boolean | User$referredByArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    referredBy?: boolean | User$referredByArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      activityEntries: Prisma.$ActivityEntryPayload<ExtArgs>[]
      metrics: Prisma.$MetricPayload<ExtArgs>[]
      metricEntries: Prisma.$MetricEntryPayload<ExtArgs>[]
      plans: Prisma.$PlanPayload<ExtArgs>[]
      messages: Prisma.$MessagePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      planInvitationsSent: Prisma.$PlanInvitationPayload<ExtArgs>[]
      planInvitationsReceived: Prisma.$PlanInvitationPayload<ExtArgs>[]
      planGroupMemberships: Prisma.$PlanGroupPayload<ExtArgs>[]
      recommendations: Prisma.$RecommendationPayload<ExtArgs>[]
      reactionsSent: Prisma.$ReactionPayload<ExtArgs>[]
      connectionsFrom: Prisma.$ConnectionPayload<ExtArgs>[]
      connectionsTo: Prisma.$ConnectionPayload<ExtArgs>[]
      referredUsers: Prisma.$UserPayload<ExtArgs>[]
      referredBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      profile: string | null
      picture: string | null
      age: number | null
      username: string | null
      timezone: string | null
      clerkId: string | null
      language: string | null
      planType: $Enums.PlanType
      lastActiveAt: Date | null
      email: string
      createdAt: Date
      deletedAt: Date | null
      isPwaInstalled: boolean
      isPwaNotificationsEnabled: boolean
      lookingForAp: boolean | null
      pwaSubscriptionEndpoint: string | null
      pwaSubscriptionKey: string | null
      pwaSubscriptionAuthToken: string | null
      unactivatedEmailSentAt: Date | null
      themeBaseColor: $Enums.ThemeColor
      defaultActivityVisibility: $Enums.ActivityVisibility
      recommendationsOutdated: boolean
      recommendationsLastCalculatedAt: Date | null
      dailyCheckinDays: string[]
      dailyCheckinTime: $Enums.DailyCheckinTime | null
      stripeCustomerId: string | null
      stripeSubscriptionId: string | null
      stripeSubscriptionStatus: string | null
      referredById: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activityEntries<T extends User$activityEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$activityEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    metrics<T extends User$metricsArgs<ExtArgs> = {}>(args?: Subset<T, User$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    metricEntries<T extends User$metricEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$metricEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    plans<T extends User$plansArgs<ExtArgs> = {}>(args?: Subset<T, User$plansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    messages<T extends User$messagesArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    planInvitationsSent<T extends User$planInvitationsSentArgs<ExtArgs> = {}>(args?: Subset<T, User$planInvitationsSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    planInvitationsReceived<T extends User$planInvitationsReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$planInvitationsReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    planGroupMemberships<T extends User$planGroupMembershipsArgs<ExtArgs> = {}>(args?: Subset<T, User$planGroupMembershipsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    recommendations<T extends User$recommendationsArgs<ExtArgs> = {}>(args?: Subset<T, User$recommendationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reactionsSent<T extends User$reactionsSentArgs<ExtArgs> = {}>(args?: Subset<T, User$reactionsSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    connectionsFrom<T extends User$connectionsFromArgs<ExtArgs> = {}>(args?: Subset<T, User$connectionsFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    connectionsTo<T extends User$connectionsToArgs<ExtArgs> = {}>(args?: Subset<T, User$connectionsToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    referredUsers<T extends User$referredUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$referredUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    referredBy<T extends User$referredByArgs<ExtArgs> = {}>(args?: Subset<T, User$referredByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly profile: FieldRef<"User", 'String'>
    readonly picture: FieldRef<"User", 'String'>
    readonly age: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly clerkId: FieldRef<"User", 'String'>
    readonly language: FieldRef<"User", 'String'>
    readonly planType: FieldRef<"User", 'PlanType'>
    readonly lastActiveAt: FieldRef<"User", 'DateTime'>
    readonly email: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'DateTime'>
    readonly isPwaInstalled: FieldRef<"User", 'Boolean'>
    readonly isPwaNotificationsEnabled: FieldRef<"User", 'Boolean'>
    readonly lookingForAp: FieldRef<"User", 'Boolean'>
    readonly pwaSubscriptionEndpoint: FieldRef<"User", 'String'>
    readonly pwaSubscriptionKey: FieldRef<"User", 'String'>
    readonly pwaSubscriptionAuthToken: FieldRef<"User", 'String'>
    readonly unactivatedEmailSentAt: FieldRef<"User", 'DateTime'>
    readonly themeBaseColor: FieldRef<"User", 'ThemeColor'>
    readonly defaultActivityVisibility: FieldRef<"User", 'ActivityVisibility'>
    readonly recommendationsOutdated: FieldRef<"User", 'Boolean'>
    readonly recommendationsLastCalculatedAt: FieldRef<"User", 'DateTime'>
    readonly dailyCheckinDays: FieldRef<"User", 'String[]'>
    readonly dailyCheckinTime: FieldRef<"User", 'DailyCheckinTime'>
    readonly stripeCustomerId: FieldRef<"User", 'String'>
    readonly stripeSubscriptionId: FieldRef<"User", 'String'>
    readonly stripeSubscriptionStatus: FieldRef<"User", 'String'>
    readonly referredById: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * User.activityEntries
   */
  export type User$activityEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    where?: ActivityEntryWhereInput
    orderBy?: ActivityEntryOrderByWithRelationInput | ActivityEntryOrderByWithRelationInput[]
    cursor?: ActivityEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityEntryScalarFieldEnum | ActivityEntryScalarFieldEnum[]
  }

  /**
   * User.metrics
   */
  export type User$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    where?: MetricWhereInput
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    cursor?: MetricWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * User.metricEntries
   */
  export type User$metricEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    where?: MetricEntryWhereInput
    orderBy?: MetricEntryOrderByWithRelationInput | MetricEntryOrderByWithRelationInput[]
    cursor?: MetricEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricEntryScalarFieldEnum | MetricEntryScalarFieldEnum[]
  }

  /**
   * User.plans
   */
  export type User$plansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    cursor?: PlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * User.messages
   */
  export type User$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.planInvitationsSent
   */
  export type User$planInvitationsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    where?: PlanInvitationWhereInput
    orderBy?: PlanInvitationOrderByWithRelationInput | PlanInvitationOrderByWithRelationInput[]
    cursor?: PlanInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanInvitationScalarFieldEnum | PlanInvitationScalarFieldEnum[]
  }

  /**
   * User.planInvitationsReceived
   */
  export type User$planInvitationsReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    where?: PlanInvitationWhereInput
    orderBy?: PlanInvitationOrderByWithRelationInput | PlanInvitationOrderByWithRelationInput[]
    cursor?: PlanInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanInvitationScalarFieldEnum | PlanInvitationScalarFieldEnum[]
  }

  /**
   * User.planGroupMemberships
   */
  export type User$planGroupMembershipsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    where?: PlanGroupWhereInput
    orderBy?: PlanGroupOrderByWithRelationInput | PlanGroupOrderByWithRelationInput[]
    cursor?: PlanGroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanGroupScalarFieldEnum | PlanGroupScalarFieldEnum[]
  }

  /**
   * User.recommendations
   */
  export type User$recommendationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    cursor?: RecommendationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * User.reactionsSent
   */
  export type User$reactionsSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    cursor?: ReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * User.connectionsFrom
   */
  export type User$connectionsFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    cursor?: ConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * User.connectionsTo
   */
  export type User$connectionsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    cursor?: ConnectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * User.referredUsers
   */
  export type User$referredUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.referredBy
   */
  export type User$referredByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Connection
   */

  export type AggregateConnection = {
    _count: ConnectionCountAggregateOutputType | null
    _min: ConnectionMinAggregateOutputType | null
    _max: ConnectionMaxAggregateOutputType | null
  }

  export type ConnectionMinAggregateOutputType = {
    id: string | null
    fromId: string | null
    toId: string | null
    status: $Enums.ConnectionStatus | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConnectionMaxAggregateOutputType = {
    id: string | null
    fromId: string | null
    toId: string | null
    status: $Enums.ConnectionStatus | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConnectionCountAggregateOutputType = {
    id: number
    fromId: number
    toId: number
    status: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConnectionMinAggregateInputType = {
    id?: true
    fromId?: true
    toId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConnectionMaxAggregateInputType = {
    id?: true
    fromId?: true
    toId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConnectionCountAggregateInputType = {
    id?: true
    fromId?: true
    toId?: true
    status?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConnectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Connection to aggregate.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Connections
    **/
    _count?: true | ConnectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConnectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConnectionMaxAggregateInputType
  }

  export type GetConnectionAggregateType<T extends ConnectionAggregateArgs> = {
        [P in keyof T & keyof AggregateConnection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConnection[P]>
      : GetScalarType<T[P], AggregateConnection[P]>
  }




  export type ConnectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConnectionWhereInput
    orderBy?: ConnectionOrderByWithAggregationInput | ConnectionOrderByWithAggregationInput[]
    by: ConnectionScalarFieldEnum[] | ConnectionScalarFieldEnum
    having?: ConnectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConnectionCountAggregateInputType | true
    _min?: ConnectionMinAggregateInputType
    _max?: ConnectionMaxAggregateInputType
  }

  export type ConnectionGroupByOutputType = {
    id: string
    fromId: string
    toId: string
    status: $Enums.ConnectionStatus
    message: string | null
    createdAt: Date
    updatedAt: Date | null
    _count: ConnectionCountAggregateOutputType | null
    _min: ConnectionMinAggregateOutputType | null
    _max: ConnectionMaxAggregateOutputType | null
  }

  type GetConnectionGroupByPayload<T extends ConnectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConnectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConnectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConnectionGroupByOutputType[P]>
            : GetScalarType<T[P], ConnectionGroupByOutputType[P]>
        }
      >
    >


  export type ConnectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromId?: boolean
    toId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    from?: boolean | UserDefaultArgs<ExtArgs>
    to?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["connection"]>

  export type ConnectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromId?: boolean
    toId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    from?: boolean | UserDefaultArgs<ExtArgs>
    to?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["connection"]>

  export type ConnectionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromId?: boolean
    toId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    from?: boolean | UserDefaultArgs<ExtArgs>
    to?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["connection"]>

  export type ConnectionSelectScalar = {
    id?: boolean
    fromId?: boolean
    toId?: boolean
    status?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConnectionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fromId" | "toId" | "status" | "message" | "createdAt" | "updatedAt", ExtArgs["result"]["connection"]>
  export type ConnectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    from?: boolean | UserDefaultArgs<ExtArgs>
    to?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ConnectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    from?: boolean | UserDefaultArgs<ExtArgs>
    to?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ConnectionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    from?: boolean | UserDefaultArgs<ExtArgs>
    to?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ConnectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Connection"
    objects: {
      from: Prisma.$UserPayload<ExtArgs>
      to: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fromId: string
      toId: string
      status: $Enums.ConnectionStatus
      message: string | null
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["connection"]>
    composites: {}
  }

  type ConnectionGetPayload<S extends boolean | null | undefined | ConnectionDefaultArgs> = $Result.GetResult<Prisma.$ConnectionPayload, S>

  type ConnectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConnectionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConnectionCountAggregateInputType | true
    }

  export interface ConnectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Connection'], meta: { name: 'Connection' } }
    /**
     * Find zero or one Connection that matches the filter.
     * @param {ConnectionFindUniqueArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConnectionFindUniqueArgs>(args: SelectSubset<T, ConnectionFindUniqueArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Connection that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConnectionFindUniqueOrThrowArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConnectionFindUniqueOrThrowArgs>(args: SelectSubset<T, ConnectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Connection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindFirstArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConnectionFindFirstArgs>(args?: SelectSubset<T, ConnectionFindFirstArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Connection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindFirstOrThrowArgs} args - Arguments to find a Connection
     * @example
     * // Get one Connection
     * const connection = await prisma.connection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConnectionFindFirstOrThrowArgs>(args?: SelectSubset<T, ConnectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Connections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Connections
     * const connections = await prisma.connection.findMany()
     * 
     * // Get first 10 Connections
     * const connections = await prisma.connection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const connectionWithIdOnly = await prisma.connection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConnectionFindManyArgs>(args?: SelectSubset<T, ConnectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Connection.
     * @param {ConnectionCreateArgs} args - Arguments to create a Connection.
     * @example
     * // Create one Connection
     * const Connection = await prisma.connection.create({
     *   data: {
     *     // ... data to create a Connection
     *   }
     * })
     * 
     */
    create<T extends ConnectionCreateArgs>(args: SelectSubset<T, ConnectionCreateArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Connections.
     * @param {ConnectionCreateManyArgs} args - Arguments to create many Connections.
     * @example
     * // Create many Connections
     * const connection = await prisma.connection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConnectionCreateManyArgs>(args?: SelectSubset<T, ConnectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Connections and returns the data saved in the database.
     * @param {ConnectionCreateManyAndReturnArgs} args - Arguments to create many Connections.
     * @example
     * // Create many Connections
     * const connection = await prisma.connection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Connections and only return the `id`
     * const connectionWithIdOnly = await prisma.connection.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConnectionCreateManyAndReturnArgs>(args?: SelectSubset<T, ConnectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Connection.
     * @param {ConnectionDeleteArgs} args - Arguments to delete one Connection.
     * @example
     * // Delete one Connection
     * const Connection = await prisma.connection.delete({
     *   where: {
     *     // ... filter to delete one Connection
     *   }
     * })
     * 
     */
    delete<T extends ConnectionDeleteArgs>(args: SelectSubset<T, ConnectionDeleteArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Connection.
     * @param {ConnectionUpdateArgs} args - Arguments to update one Connection.
     * @example
     * // Update one Connection
     * const connection = await prisma.connection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConnectionUpdateArgs>(args: SelectSubset<T, ConnectionUpdateArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Connections.
     * @param {ConnectionDeleteManyArgs} args - Arguments to filter Connections to delete.
     * @example
     * // Delete a few Connections
     * const { count } = await prisma.connection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConnectionDeleteManyArgs>(args?: SelectSubset<T, ConnectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Connections
     * const connection = await prisma.connection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConnectionUpdateManyArgs>(args: SelectSubset<T, ConnectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Connections and returns the data updated in the database.
     * @param {ConnectionUpdateManyAndReturnArgs} args - Arguments to update many Connections.
     * @example
     * // Update many Connections
     * const connection = await prisma.connection.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Connections and only return the `id`
     * const connectionWithIdOnly = await prisma.connection.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConnectionUpdateManyAndReturnArgs>(args: SelectSubset<T, ConnectionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Connection.
     * @param {ConnectionUpsertArgs} args - Arguments to update or create a Connection.
     * @example
     * // Update or create a Connection
     * const connection = await prisma.connection.upsert({
     *   create: {
     *     // ... data to create a Connection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Connection we want to update
     *   }
     * })
     */
    upsert<T extends ConnectionUpsertArgs>(args: SelectSubset<T, ConnectionUpsertArgs<ExtArgs>>): Prisma__ConnectionClient<$Result.GetResult<Prisma.$ConnectionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Connections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionCountArgs} args - Arguments to filter Connections to count.
     * @example
     * // Count the number of Connections
     * const count = await prisma.connection.count({
     *   where: {
     *     // ... the filter for the Connections we want to count
     *   }
     * })
    **/
    count<T extends ConnectionCountArgs>(
      args?: Subset<T, ConnectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConnectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConnectionAggregateArgs>(args: Subset<T, ConnectionAggregateArgs>): Prisma.PrismaPromise<GetConnectionAggregateType<T>>

    /**
     * Group by Connection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConnectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConnectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConnectionGroupByArgs['orderBy'] }
        : { orderBy?: ConnectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConnectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConnectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Connection model
   */
  readonly fields: ConnectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Connection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConnectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    from<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    to<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Connection model
   */
  interface ConnectionFieldRefs {
    readonly id: FieldRef<"Connection", 'String'>
    readonly fromId: FieldRef<"Connection", 'String'>
    readonly toId: FieldRef<"Connection", 'String'>
    readonly status: FieldRef<"Connection", 'ConnectionStatus'>
    readonly message: FieldRef<"Connection", 'String'>
    readonly createdAt: FieldRef<"Connection", 'DateTime'>
    readonly updatedAt: FieldRef<"Connection", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Connection findUnique
   */
  export type ConnectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection findUniqueOrThrow
   */
  export type ConnectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection findFirst
   */
  export type ConnectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connections.
     */
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * Connection findFirstOrThrow
   */
  export type ConnectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connection to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Connections.
     */
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * Connection findMany
   */
  export type ConnectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter, which Connections to fetch.
     */
    where?: ConnectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Connections to fetch.
     */
    orderBy?: ConnectionOrderByWithRelationInput | ConnectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Connections.
     */
    cursor?: ConnectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Connections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Connections.
     */
    skip?: number
    distinct?: ConnectionScalarFieldEnum | ConnectionScalarFieldEnum[]
  }

  /**
   * Connection create
   */
  export type ConnectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The data needed to create a Connection.
     */
    data: XOR<ConnectionCreateInput, ConnectionUncheckedCreateInput>
  }

  /**
   * Connection createMany
   */
  export type ConnectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Connections.
     */
    data: ConnectionCreateManyInput | ConnectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Connection createManyAndReturn
   */
  export type ConnectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * The data used to create many Connections.
     */
    data: ConnectionCreateManyInput | ConnectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Connection update
   */
  export type ConnectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The data needed to update a Connection.
     */
    data: XOR<ConnectionUpdateInput, ConnectionUncheckedUpdateInput>
    /**
     * Choose, which Connection to update.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection updateMany
   */
  export type ConnectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Connections.
     */
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyInput>
    /**
     * Filter which Connections to update
     */
    where?: ConnectionWhereInput
    /**
     * Limit how many Connections to update.
     */
    limit?: number
  }

  /**
   * Connection updateManyAndReturn
   */
  export type ConnectionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * The data used to update Connections.
     */
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyInput>
    /**
     * Filter which Connections to update
     */
    where?: ConnectionWhereInput
    /**
     * Limit how many Connections to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Connection upsert
   */
  export type ConnectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * The filter to search for the Connection to update in case it exists.
     */
    where: ConnectionWhereUniqueInput
    /**
     * In case the Connection found by the `where` argument doesn't exist, create a new Connection with this data.
     */
    create: XOR<ConnectionCreateInput, ConnectionUncheckedCreateInput>
    /**
     * In case the Connection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConnectionUpdateInput, ConnectionUncheckedUpdateInput>
  }

  /**
   * Connection delete
   */
  export type ConnectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
    /**
     * Filter which Connection to delete.
     */
    where: ConnectionWhereUniqueInput
  }

  /**
   * Connection deleteMany
   */
  export type ConnectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Connections to delete
     */
    where?: ConnectionWhereInput
    /**
     * Limit how many Connections to delete.
     */
    limit?: number
  }

  /**
   * Connection without action
   */
  export type ConnectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Connection
     */
    select?: ConnectionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Connection
     */
    omit?: ConnectionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConnectionInclude<ExtArgs> | null
  }


  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    measure: string | null
    emoji: string | null
    createdAt: Date | null
    privacySettings: $Enums.ActivityVisibility | null
    colorHex: string | null
    deletedAt: Date | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    measure: string | null
    emoji: string | null
    createdAt: Date | null
    privacySettings: $Enums.ActivityVisibility | null
    colorHex: string | null
    deletedAt: Date | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    measure: number
    emoji: number
    createdAt: number
    privacySettings: number
    colorHex: number
    deletedAt: number
    _all: number
  }


  export type ActivityMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    measure?: true
    emoji?: true
    createdAt?: true
    privacySettings?: true
    colorHex?: true
    deletedAt?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    measure?: true
    emoji?: true
    createdAt?: true
    privacySettings?: true
    colorHex?: true
    deletedAt?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    measure?: true
    emoji?: true
    createdAt?: true
    privacySettings?: true
    colorHex?: true
    deletedAt?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: string
    userId: string
    title: string
    measure: string
    emoji: string
    createdAt: Date
    privacySettings: $Enums.ActivityVisibility | null
    colorHex: string | null
    deletedAt: Date | null
    _count: ActivityCountAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    measure?: boolean
    emoji?: boolean
    createdAt?: boolean
    privacySettings?: boolean
    colorHex?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    entries?: boolean | Activity$entriesArgs<ExtArgs>
    planSessions?: boolean | Activity$planSessionsArgs<ExtArgs>
    plans?: boolean | Activity$plansArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    measure?: boolean
    emoji?: boolean
    createdAt?: boolean
    privacySettings?: boolean
    colorHex?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    measure?: boolean
    emoji?: boolean
    createdAt?: boolean
    privacySettings?: boolean
    colorHex?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    measure?: boolean
    emoji?: boolean
    createdAt?: boolean
    privacySettings?: boolean
    colorHex?: boolean
    deletedAt?: boolean
  }

  export type ActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "measure" | "emoji" | "createdAt" | "privacySettings" | "colorHex" | "deletedAt", ExtArgs["result"]["activity"]>
  export type ActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    entries?: boolean | Activity$entriesArgs<ExtArgs>
    planSessions?: boolean | Activity$planSessionsArgs<ExtArgs>
    plans?: boolean | Activity$plansArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      entries: Prisma.$ActivityEntryPayload<ExtArgs>[]
      planSessions: Prisma.$PlanSessionPayload<ExtArgs>[]
      plans: Prisma.$PlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      measure: string
      emoji: string
      createdAt: Date
      privacySettings: $Enums.ActivityVisibility | null
      colorHex: string | null
      deletedAt: Date | null
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }

  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityFindUniqueArgs>(args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityFindFirstArgs>(args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityFindManyArgs>(args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
     */
    create<T extends ActivityCreateArgs>(args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Activities.
     * @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityCreateManyArgs>(args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Activities and returns the data saved in the database.
     * @param {ActivityCreateManyAndReturnArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
     */
    delete<T extends ActivityDeleteArgs>(args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityUpdateArgs>(args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityDeleteManyArgs>(args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityUpdateManyArgs>(args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities and returns the data updated in the database.
     * @param {ActivityUpdateManyAndReturnArgs} args - Arguments to update many Activities.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Activities and only return the `id`
     * const activityWithIdOnly = await prisma.activity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends ActivityUpsertArgs>(args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    entries<T extends Activity$entriesArgs<ExtArgs> = {}>(args?: Subset<T, Activity$entriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    planSessions<T extends Activity$planSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$planSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    plans<T extends Activity$plansArgs<ExtArgs> = {}>(args?: Subset<T, Activity$plansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Activity model
   */
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", 'String'>
    readonly userId: FieldRef<"Activity", 'String'>
    readonly title: FieldRef<"Activity", 'String'>
    readonly measure: FieldRef<"Activity", 'String'>
    readonly emoji: FieldRef<"Activity", 'String'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
    readonly privacySettings: FieldRef<"Activity", 'ActivityVisibility'>
    readonly colorHex: FieldRef<"Activity", 'String'>
    readonly deletedAt: FieldRef<"Activity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }

  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Activity createManyAndReturn
   */
  export type ActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
  }

  /**
   * Activity updateManyAndReturn
   */
  export type ActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }

  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }

  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
    /**
     * Limit how many Activities to delete.
     */
    limit?: number
  }

  /**
   * Activity.entries
   */
  export type Activity$entriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    where?: ActivityEntryWhereInput
    orderBy?: ActivityEntryOrderByWithRelationInput | ActivityEntryOrderByWithRelationInput[]
    cursor?: ActivityEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityEntryScalarFieldEnum | ActivityEntryScalarFieldEnum[]
  }

  /**
   * Activity.planSessions
   */
  export type Activity$planSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    where?: PlanSessionWhereInput
    orderBy?: PlanSessionOrderByWithRelationInput | PlanSessionOrderByWithRelationInput[]
    cursor?: PlanSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanSessionScalarFieldEnum | PlanSessionScalarFieldEnum[]
  }

  /**
   * Activity.plans
   */
  export type Activity$plansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    cursor?: PlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
  }


  /**
   * Model ActivityEntry
   */

  export type AggregateActivityEntry = {
    _count: ActivityEntryCountAggregateOutputType | null
    _avg: ActivityEntryAvgAggregateOutputType | null
    _sum: ActivityEntrySumAggregateOutputType | null
    _min: ActivityEntryMinAggregateOutputType | null
    _max: ActivityEntryMaxAggregateOutputType | null
  }

  export type ActivityEntryAvgAggregateOutputType = {
    quantity: number | null
  }

  export type ActivityEntrySumAggregateOutputType = {
    quantity: number | null
  }

  export type ActivityEntryMinAggregateOutputType = {
    id: string | null
    activityId: string | null
    userId: string | null
    quantity: number | null
    date: Date | null
    createdAt: Date | null
    description: string | null
    deletedAt: Date | null
    timezone: string | null
    imageS3Path: string | null
    imageUrl: string | null
    imageExpiresAt: Date | null
    imageCreatedAt: Date | null
    imageIsPublic: boolean | null
  }

  export type ActivityEntryMaxAggregateOutputType = {
    id: string | null
    activityId: string | null
    userId: string | null
    quantity: number | null
    date: Date | null
    createdAt: Date | null
    description: string | null
    deletedAt: Date | null
    timezone: string | null
    imageS3Path: string | null
    imageUrl: string | null
    imageExpiresAt: Date | null
    imageCreatedAt: Date | null
    imageIsPublic: boolean | null
  }

  export type ActivityEntryCountAggregateOutputType = {
    id: number
    activityId: number
    userId: number
    quantity: number
    date: number
    createdAt: number
    description: number
    deletedAt: number
    timezone: number
    imageS3Path: number
    imageUrl: number
    imageExpiresAt: number
    imageCreatedAt: number
    imageIsPublic: number
    _all: number
  }


  export type ActivityEntryAvgAggregateInputType = {
    quantity?: true
  }

  export type ActivityEntrySumAggregateInputType = {
    quantity?: true
  }

  export type ActivityEntryMinAggregateInputType = {
    id?: true
    activityId?: true
    userId?: true
    quantity?: true
    date?: true
    createdAt?: true
    description?: true
    deletedAt?: true
    timezone?: true
    imageS3Path?: true
    imageUrl?: true
    imageExpiresAt?: true
    imageCreatedAt?: true
    imageIsPublic?: true
  }

  export type ActivityEntryMaxAggregateInputType = {
    id?: true
    activityId?: true
    userId?: true
    quantity?: true
    date?: true
    createdAt?: true
    description?: true
    deletedAt?: true
    timezone?: true
    imageS3Path?: true
    imageUrl?: true
    imageExpiresAt?: true
    imageCreatedAt?: true
    imageIsPublic?: true
  }

  export type ActivityEntryCountAggregateInputType = {
    id?: true
    activityId?: true
    userId?: true
    quantity?: true
    date?: true
    createdAt?: true
    description?: true
    deletedAt?: true
    timezone?: true
    imageS3Path?: true
    imageUrl?: true
    imageExpiresAt?: true
    imageCreatedAt?: true
    imageIsPublic?: true
    _all?: true
  }

  export type ActivityEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityEntry to aggregate.
     */
    where?: ActivityEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityEntries to fetch.
     */
    orderBy?: ActivityEntryOrderByWithRelationInput | ActivityEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityEntries
    **/
    _count?: true | ActivityEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityEntryMaxAggregateInputType
  }

  export type GetActivityEntryAggregateType<T extends ActivityEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityEntry[P]>
      : GetScalarType<T[P], AggregateActivityEntry[P]>
  }




  export type ActivityEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityEntryWhereInput
    orderBy?: ActivityEntryOrderByWithAggregationInput | ActivityEntryOrderByWithAggregationInput[]
    by: ActivityEntryScalarFieldEnum[] | ActivityEntryScalarFieldEnum
    having?: ActivityEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityEntryCountAggregateInputType | true
    _avg?: ActivityEntryAvgAggregateInputType
    _sum?: ActivityEntrySumAggregateInputType
    _min?: ActivityEntryMinAggregateInputType
    _max?: ActivityEntryMaxAggregateInputType
  }

  export type ActivityEntryGroupByOutputType = {
    id: string
    activityId: string
    userId: string
    quantity: number
    date: Date
    createdAt: Date
    description: string | null
    deletedAt: Date | null
    timezone: string | null
    imageS3Path: string | null
    imageUrl: string | null
    imageExpiresAt: Date | null
    imageCreatedAt: Date | null
    imageIsPublic: boolean
    _count: ActivityEntryCountAggregateOutputType | null
    _avg: ActivityEntryAvgAggregateOutputType | null
    _sum: ActivityEntrySumAggregateOutputType | null
    _min: ActivityEntryMinAggregateOutputType | null
    _max: ActivityEntryMaxAggregateOutputType | null
  }

  type GetActivityEntryGroupByPayload<T extends ActivityEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityEntryGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityEntryGroupByOutputType[P]>
        }
      >
    >


  export type ActivityEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    userId?: boolean
    quantity?: boolean
    date?: boolean
    createdAt?: boolean
    description?: boolean
    deletedAt?: boolean
    timezone?: boolean
    imageS3Path?: boolean
    imageUrl?: boolean
    imageExpiresAt?: boolean
    imageCreatedAt?: boolean
    imageIsPublic?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    reactions?: boolean | ActivityEntry$reactionsArgs<ExtArgs>
    comments?: boolean | ActivityEntry$commentsArgs<ExtArgs>
    _count?: boolean | ActivityEntryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityEntry"]>

  export type ActivityEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    userId?: boolean
    quantity?: boolean
    date?: boolean
    createdAt?: boolean
    description?: boolean
    deletedAt?: boolean
    timezone?: boolean
    imageS3Path?: boolean
    imageUrl?: boolean
    imageExpiresAt?: boolean
    imageCreatedAt?: boolean
    imageIsPublic?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityEntry"]>

  export type ActivityEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    userId?: boolean
    quantity?: boolean
    date?: boolean
    createdAt?: boolean
    description?: boolean
    deletedAt?: boolean
    timezone?: boolean
    imageS3Path?: boolean
    imageUrl?: boolean
    imageExpiresAt?: boolean
    imageCreatedAt?: boolean
    imageIsPublic?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityEntry"]>

  export type ActivityEntrySelectScalar = {
    id?: boolean
    activityId?: boolean
    userId?: boolean
    quantity?: boolean
    date?: boolean
    createdAt?: boolean
    description?: boolean
    deletedAt?: boolean
    timezone?: boolean
    imageS3Path?: boolean
    imageUrl?: boolean
    imageExpiresAt?: boolean
    imageCreatedAt?: boolean
    imageIsPublic?: boolean
  }

  export type ActivityEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "userId" | "quantity" | "date" | "createdAt" | "description" | "deletedAt" | "timezone" | "imageS3Path" | "imageUrl" | "imageExpiresAt" | "imageCreatedAt" | "imageIsPublic", ExtArgs["result"]["activityEntry"]>
  export type ActivityEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    reactions?: boolean | ActivityEntry$reactionsArgs<ExtArgs>
    comments?: boolean | ActivityEntry$commentsArgs<ExtArgs>
    _count?: boolean | ActivityEntryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ActivityEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ActivityEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ActivityEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityEntry"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      reactions: Prisma.$ReactionPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityId: string
      userId: string
      quantity: number
      date: Date
      createdAt: Date
      description: string | null
      deletedAt: Date | null
      timezone: string | null
      imageS3Path: string | null
      imageUrl: string | null
      imageExpiresAt: Date | null
      imageCreatedAt: Date | null
      imageIsPublic: boolean
    }, ExtArgs["result"]["activityEntry"]>
    composites: {}
  }

  type ActivityEntryGetPayload<S extends boolean | null | undefined | ActivityEntryDefaultArgs> = $Result.GetResult<Prisma.$ActivityEntryPayload, S>

  type ActivityEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ActivityEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityEntryCountAggregateInputType | true
    }

  export interface ActivityEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityEntry'], meta: { name: 'ActivityEntry' } }
    /**
     * Find zero or one ActivityEntry that matches the filter.
     * @param {ActivityEntryFindUniqueArgs} args - Arguments to find a ActivityEntry
     * @example
     * // Get one ActivityEntry
     * const activityEntry = await prisma.activityEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ActivityEntryFindUniqueArgs>(args: SelectSubset<T, ActivityEntryFindUniqueArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ActivityEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ActivityEntryFindUniqueOrThrowArgs} args - Arguments to find a ActivityEntry
     * @example
     * // Get one ActivityEntry
     * const activityEntry = await prisma.activityEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ActivityEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, ActivityEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityEntryFindFirstArgs} args - Arguments to find a ActivityEntry
     * @example
     * // Get one ActivityEntry
     * const activityEntry = await prisma.activityEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ActivityEntryFindFirstArgs>(args?: SelectSubset<T, ActivityEntryFindFirstArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ActivityEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityEntryFindFirstOrThrowArgs} args - Arguments to find a ActivityEntry
     * @example
     * // Get one ActivityEntry
     * const activityEntry = await prisma.activityEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ActivityEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, ActivityEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ActivityEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityEntries
     * const activityEntries = await prisma.activityEntry.findMany()
     * 
     * // Get first 10 ActivityEntries
     * const activityEntries = await prisma.activityEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityEntryWithIdOnly = await prisma.activityEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ActivityEntryFindManyArgs>(args?: SelectSubset<T, ActivityEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ActivityEntry.
     * @param {ActivityEntryCreateArgs} args - Arguments to create a ActivityEntry.
     * @example
     * // Create one ActivityEntry
     * const ActivityEntry = await prisma.activityEntry.create({
     *   data: {
     *     // ... data to create a ActivityEntry
     *   }
     * })
     * 
     */
    create<T extends ActivityEntryCreateArgs>(args: SelectSubset<T, ActivityEntryCreateArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ActivityEntries.
     * @param {ActivityEntryCreateManyArgs} args - Arguments to create many ActivityEntries.
     * @example
     * // Create many ActivityEntries
     * const activityEntry = await prisma.activityEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ActivityEntryCreateManyArgs>(args?: SelectSubset<T, ActivityEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ActivityEntries and returns the data saved in the database.
     * @param {ActivityEntryCreateManyAndReturnArgs} args - Arguments to create many ActivityEntries.
     * @example
     * // Create many ActivityEntries
     * const activityEntry = await prisma.activityEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ActivityEntries and only return the `id`
     * const activityEntryWithIdOnly = await prisma.activityEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ActivityEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, ActivityEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ActivityEntry.
     * @param {ActivityEntryDeleteArgs} args - Arguments to delete one ActivityEntry.
     * @example
     * // Delete one ActivityEntry
     * const ActivityEntry = await prisma.activityEntry.delete({
     *   where: {
     *     // ... filter to delete one ActivityEntry
     *   }
     * })
     * 
     */
    delete<T extends ActivityEntryDeleteArgs>(args: SelectSubset<T, ActivityEntryDeleteArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ActivityEntry.
     * @param {ActivityEntryUpdateArgs} args - Arguments to update one ActivityEntry.
     * @example
     * // Update one ActivityEntry
     * const activityEntry = await prisma.activityEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ActivityEntryUpdateArgs>(args: SelectSubset<T, ActivityEntryUpdateArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ActivityEntries.
     * @param {ActivityEntryDeleteManyArgs} args - Arguments to filter ActivityEntries to delete.
     * @example
     * // Delete a few ActivityEntries
     * const { count } = await prisma.activityEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ActivityEntryDeleteManyArgs>(args?: SelectSubset<T, ActivityEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityEntries
     * const activityEntry = await prisma.activityEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ActivityEntryUpdateManyArgs>(args: SelectSubset<T, ActivityEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityEntries and returns the data updated in the database.
     * @param {ActivityEntryUpdateManyAndReturnArgs} args - Arguments to update many ActivityEntries.
     * @example
     * // Update many ActivityEntries
     * const activityEntry = await prisma.activityEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ActivityEntries and only return the `id`
     * const activityEntryWithIdOnly = await prisma.activityEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ActivityEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, ActivityEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ActivityEntry.
     * @param {ActivityEntryUpsertArgs} args - Arguments to update or create a ActivityEntry.
     * @example
     * // Update or create a ActivityEntry
     * const activityEntry = await prisma.activityEntry.upsert({
     *   create: {
     *     // ... data to create a ActivityEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityEntry we want to update
     *   }
     * })
     */
    upsert<T extends ActivityEntryUpsertArgs>(args: SelectSubset<T, ActivityEntryUpsertArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ActivityEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityEntryCountArgs} args - Arguments to filter ActivityEntries to count.
     * @example
     * // Count the number of ActivityEntries
     * const count = await prisma.activityEntry.count({
     *   where: {
     *     // ... the filter for the ActivityEntries we want to count
     *   }
     * })
    **/
    count<T extends ActivityEntryCountArgs>(
      args?: Subset<T, ActivityEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityEntryAggregateArgs>(args: Subset<T, ActivityEntryAggregateArgs>): Prisma.PrismaPromise<GetActivityEntryAggregateType<T>>

    /**
     * Group by ActivityEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityEntryGroupByArgs['orderBy'] }
        : { orderBy?: ActivityEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityEntry model
   */
  readonly fields: ActivityEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reactions<T extends ActivityEntry$reactionsArgs<ExtArgs> = {}>(args?: Subset<T, ActivityEntry$reactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    comments<T extends ActivityEntry$commentsArgs<ExtArgs> = {}>(args?: Subset<T, ActivityEntry$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ActivityEntry model
   */
  interface ActivityEntryFieldRefs {
    readonly id: FieldRef<"ActivityEntry", 'String'>
    readonly activityId: FieldRef<"ActivityEntry", 'String'>
    readonly userId: FieldRef<"ActivityEntry", 'String'>
    readonly quantity: FieldRef<"ActivityEntry", 'Int'>
    readonly date: FieldRef<"ActivityEntry", 'DateTime'>
    readonly createdAt: FieldRef<"ActivityEntry", 'DateTime'>
    readonly description: FieldRef<"ActivityEntry", 'String'>
    readonly deletedAt: FieldRef<"ActivityEntry", 'DateTime'>
    readonly timezone: FieldRef<"ActivityEntry", 'String'>
    readonly imageS3Path: FieldRef<"ActivityEntry", 'String'>
    readonly imageUrl: FieldRef<"ActivityEntry", 'String'>
    readonly imageExpiresAt: FieldRef<"ActivityEntry", 'DateTime'>
    readonly imageCreatedAt: FieldRef<"ActivityEntry", 'DateTime'>
    readonly imageIsPublic: FieldRef<"ActivityEntry", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ActivityEntry findUnique
   */
  export type ActivityEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityEntry to fetch.
     */
    where: ActivityEntryWhereUniqueInput
  }

  /**
   * ActivityEntry findUniqueOrThrow
   */
  export type ActivityEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityEntry to fetch.
     */
    where: ActivityEntryWhereUniqueInput
  }

  /**
   * ActivityEntry findFirst
   */
  export type ActivityEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityEntry to fetch.
     */
    where?: ActivityEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityEntries to fetch.
     */
    orderBy?: ActivityEntryOrderByWithRelationInput | ActivityEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityEntries.
     */
    cursor?: ActivityEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityEntries.
     */
    distinct?: ActivityEntryScalarFieldEnum | ActivityEntryScalarFieldEnum[]
  }

  /**
   * ActivityEntry findFirstOrThrow
   */
  export type ActivityEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityEntry to fetch.
     */
    where?: ActivityEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityEntries to fetch.
     */
    orderBy?: ActivityEntryOrderByWithRelationInput | ActivityEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityEntries.
     */
    cursor?: ActivityEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityEntries.
     */
    distinct?: ActivityEntryScalarFieldEnum | ActivityEntryScalarFieldEnum[]
  }

  /**
   * ActivityEntry findMany
   */
  export type ActivityEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * Filter, which ActivityEntries to fetch.
     */
    where?: ActivityEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityEntries to fetch.
     */
    orderBy?: ActivityEntryOrderByWithRelationInput | ActivityEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityEntries.
     */
    cursor?: ActivityEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityEntries.
     */
    skip?: number
    distinct?: ActivityEntryScalarFieldEnum | ActivityEntryScalarFieldEnum[]
  }

  /**
   * ActivityEntry create
   */
  export type ActivityEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityEntry.
     */
    data: XOR<ActivityEntryCreateInput, ActivityEntryUncheckedCreateInput>
  }

  /**
   * ActivityEntry createMany
   */
  export type ActivityEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityEntries.
     */
    data: ActivityEntryCreateManyInput | ActivityEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ActivityEntry createManyAndReturn
   */
  export type ActivityEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * The data used to create many ActivityEntries.
     */
    data: ActivityEntryCreateManyInput | ActivityEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityEntry update
   */
  export type ActivityEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityEntry.
     */
    data: XOR<ActivityEntryUpdateInput, ActivityEntryUncheckedUpdateInput>
    /**
     * Choose, which ActivityEntry to update.
     */
    where: ActivityEntryWhereUniqueInput
  }

  /**
   * ActivityEntry updateMany
   */
  export type ActivityEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityEntries.
     */
    data: XOR<ActivityEntryUpdateManyMutationInput, ActivityEntryUncheckedUpdateManyInput>
    /**
     * Filter which ActivityEntries to update
     */
    where?: ActivityEntryWhereInput
    /**
     * Limit how many ActivityEntries to update.
     */
    limit?: number
  }

  /**
   * ActivityEntry updateManyAndReturn
   */
  export type ActivityEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * The data used to update ActivityEntries.
     */
    data: XOR<ActivityEntryUpdateManyMutationInput, ActivityEntryUncheckedUpdateManyInput>
    /**
     * Filter which ActivityEntries to update
     */
    where?: ActivityEntryWhereInput
    /**
     * Limit how many ActivityEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ActivityEntry upsert
   */
  export type ActivityEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityEntry to update in case it exists.
     */
    where: ActivityEntryWhereUniqueInput
    /**
     * In case the ActivityEntry found by the `where` argument doesn't exist, create a new ActivityEntry with this data.
     */
    create: XOR<ActivityEntryCreateInput, ActivityEntryUncheckedCreateInput>
    /**
     * In case the ActivityEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityEntryUpdateInput, ActivityEntryUncheckedUpdateInput>
  }

  /**
   * ActivityEntry delete
   */
  export type ActivityEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
    /**
     * Filter which ActivityEntry to delete.
     */
    where: ActivityEntryWhereUniqueInput
  }

  /**
   * ActivityEntry deleteMany
   */
  export type ActivityEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityEntries to delete
     */
    where?: ActivityEntryWhereInput
    /**
     * Limit how many ActivityEntries to delete.
     */
    limit?: number
  }

  /**
   * ActivityEntry.reactions
   */
  export type ActivityEntry$reactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    cursor?: ReactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * ActivityEntry.comments
   */
  export type ActivityEntry$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * ActivityEntry without action
   */
  export type ActivityEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityEntry
     */
    select?: ActivityEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ActivityEntry
     */
    omit?: ActivityEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityEntryInclude<ExtArgs> | null
  }


  /**
   * Model Reaction
   */

  export type AggregateReaction = {
    _count: ReactionCountAggregateOutputType | null
    _min: ReactionMinAggregateOutputType | null
    _max: ReactionMaxAggregateOutputType | null
  }

  export type ReactionMinAggregateOutputType = {
    id: string | null
    activityEntryId: string | null
    userId: string | null
    emoji: string | null
    createdAt: Date | null
  }

  export type ReactionMaxAggregateOutputType = {
    id: string | null
    activityEntryId: string | null
    userId: string | null
    emoji: string | null
    createdAt: Date | null
  }

  export type ReactionCountAggregateOutputType = {
    id: number
    activityEntryId: number
    userId: number
    emoji: number
    createdAt: number
    _all: number
  }


  export type ReactionMinAggregateInputType = {
    id?: true
    activityEntryId?: true
    userId?: true
    emoji?: true
    createdAt?: true
  }

  export type ReactionMaxAggregateInputType = {
    id?: true
    activityEntryId?: true
    userId?: true
    emoji?: true
    createdAt?: true
  }

  export type ReactionCountAggregateInputType = {
    id?: true
    activityEntryId?: true
    userId?: true
    emoji?: true
    createdAt?: true
    _all?: true
  }

  export type ReactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reaction to aggregate.
     */
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     */
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reactions
    **/
    _count?: true | ReactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReactionMaxAggregateInputType
  }

  export type GetReactionAggregateType<T extends ReactionAggregateArgs> = {
        [P in keyof T & keyof AggregateReaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReaction[P]>
      : GetScalarType<T[P], AggregateReaction[P]>
  }




  export type ReactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReactionWhereInput
    orderBy?: ReactionOrderByWithAggregationInput | ReactionOrderByWithAggregationInput[]
    by: ReactionScalarFieldEnum[] | ReactionScalarFieldEnum
    having?: ReactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReactionCountAggregateInputType | true
    _min?: ReactionMinAggregateInputType
    _max?: ReactionMaxAggregateInputType
  }

  export type ReactionGroupByOutputType = {
    id: string
    activityEntryId: string
    userId: string
    emoji: string
    createdAt: Date
    _count: ReactionCountAggregateOutputType | null
    _min: ReactionMinAggregateOutputType | null
    _max: ReactionMaxAggregateOutputType | null
  }

  type GetReactionGroupByPayload<T extends ReactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReactionGroupByOutputType[P]>
            : GetScalarType<T[P], ReactionGroupByOutputType[P]>
        }
      >
    >


  export type ReactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityEntryId?: boolean
    userId?: boolean
    emoji?: boolean
    createdAt?: boolean
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reaction"]>

  export type ReactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityEntryId?: boolean
    userId?: boolean
    emoji?: boolean
    createdAt?: boolean
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reaction"]>

  export type ReactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityEntryId?: boolean
    userId?: boolean
    emoji?: boolean
    createdAt?: boolean
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reaction"]>

  export type ReactionSelectScalar = {
    id?: boolean
    activityEntryId?: boolean
    userId?: boolean
    emoji?: boolean
    createdAt?: boolean
  }

  export type ReactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityEntryId" | "userId" | "emoji" | "createdAt", ExtArgs["result"]["reaction"]>
  export type ReactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reaction"
    objects: {
      activityEntry: Prisma.$ActivityEntryPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityEntryId: string
      userId: string
      emoji: string
      createdAt: Date
    }, ExtArgs["result"]["reaction"]>
    composites: {}
  }

  type ReactionGetPayload<S extends boolean | null | undefined | ReactionDefaultArgs> = $Result.GetResult<Prisma.$ReactionPayload, S>

  type ReactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReactionCountAggregateInputType | true
    }

  export interface ReactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reaction'], meta: { name: 'Reaction' } }
    /**
     * Find zero or one Reaction that matches the filter.
     * @param {ReactionFindUniqueArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReactionFindUniqueArgs>(args: SelectSubset<T, ReactionFindUniqueArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReactionFindUniqueOrThrowArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReactionFindUniqueOrThrowArgs>(args: SelectSubset<T, ReactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindFirstArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReactionFindFirstArgs>(args?: SelectSubset<T, ReactionFindFirstArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindFirstOrThrowArgs} args - Arguments to find a Reaction
     * @example
     * // Get one Reaction
     * const reaction = await prisma.reaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReactionFindFirstOrThrowArgs>(args?: SelectSubset<T, ReactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reactions
     * const reactions = await prisma.reaction.findMany()
     * 
     * // Get first 10 Reactions
     * const reactions = await prisma.reaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reactionWithIdOnly = await prisma.reaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReactionFindManyArgs>(args?: SelectSubset<T, ReactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reaction.
     * @param {ReactionCreateArgs} args - Arguments to create a Reaction.
     * @example
     * // Create one Reaction
     * const Reaction = await prisma.reaction.create({
     *   data: {
     *     // ... data to create a Reaction
     *   }
     * })
     * 
     */
    create<T extends ReactionCreateArgs>(args: SelectSubset<T, ReactionCreateArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reactions.
     * @param {ReactionCreateManyArgs} args - Arguments to create many Reactions.
     * @example
     * // Create many Reactions
     * const reaction = await prisma.reaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReactionCreateManyArgs>(args?: SelectSubset<T, ReactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reactions and returns the data saved in the database.
     * @param {ReactionCreateManyAndReturnArgs} args - Arguments to create many Reactions.
     * @example
     * // Create many Reactions
     * const reaction = await prisma.reaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reactions and only return the `id`
     * const reactionWithIdOnly = await prisma.reaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReactionCreateManyAndReturnArgs>(args?: SelectSubset<T, ReactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Reaction.
     * @param {ReactionDeleteArgs} args - Arguments to delete one Reaction.
     * @example
     * // Delete one Reaction
     * const Reaction = await prisma.reaction.delete({
     *   where: {
     *     // ... filter to delete one Reaction
     *   }
     * })
     * 
     */
    delete<T extends ReactionDeleteArgs>(args: SelectSubset<T, ReactionDeleteArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reaction.
     * @param {ReactionUpdateArgs} args - Arguments to update one Reaction.
     * @example
     * // Update one Reaction
     * const reaction = await prisma.reaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReactionUpdateArgs>(args: SelectSubset<T, ReactionUpdateArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reactions.
     * @param {ReactionDeleteManyArgs} args - Arguments to filter Reactions to delete.
     * @example
     * // Delete a few Reactions
     * const { count } = await prisma.reaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReactionDeleteManyArgs>(args?: SelectSubset<T, ReactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reactions
     * const reaction = await prisma.reaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReactionUpdateManyArgs>(args: SelectSubset<T, ReactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reactions and returns the data updated in the database.
     * @param {ReactionUpdateManyAndReturnArgs} args - Arguments to update many Reactions.
     * @example
     * // Update many Reactions
     * const reaction = await prisma.reaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reactions and only return the `id`
     * const reactionWithIdOnly = await prisma.reaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReactionUpdateManyAndReturnArgs>(args: SelectSubset<T, ReactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Reaction.
     * @param {ReactionUpsertArgs} args - Arguments to update or create a Reaction.
     * @example
     * // Update or create a Reaction
     * const reaction = await prisma.reaction.upsert({
     *   create: {
     *     // ... data to create a Reaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reaction we want to update
     *   }
     * })
     */
    upsert<T extends ReactionUpsertArgs>(args: SelectSubset<T, ReactionUpsertArgs<ExtArgs>>): Prisma__ReactionClient<$Result.GetResult<Prisma.$ReactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionCountArgs} args - Arguments to filter Reactions to count.
     * @example
     * // Count the number of Reactions
     * const count = await prisma.reaction.count({
     *   where: {
     *     // ... the filter for the Reactions we want to count
     *   }
     * })
    **/
    count<T extends ReactionCountArgs>(
      args?: Subset<T, ReactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReactionAggregateArgs>(args: Subset<T, ReactionAggregateArgs>): Prisma.PrismaPromise<GetReactionAggregateType<T>>

    /**
     * Group by Reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReactionGroupByArgs['orderBy'] }
        : { orderBy?: ReactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reaction model
   */
  readonly fields: ReactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityEntry<T extends ActivityEntryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityEntryDefaultArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reaction model
   */
  interface ReactionFieldRefs {
    readonly id: FieldRef<"Reaction", 'String'>
    readonly activityEntryId: FieldRef<"Reaction", 'String'>
    readonly userId: FieldRef<"Reaction", 'String'>
    readonly emoji: FieldRef<"Reaction", 'String'>
    readonly createdAt: FieldRef<"Reaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reaction findUnique
   */
  export type ReactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reaction to fetch.
     */
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction findUniqueOrThrow
   */
  export type ReactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reaction to fetch.
     */
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction findFirst
   */
  export type ReactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reaction to fetch.
     */
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     */
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reactions.
     */
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reactions.
     */
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * Reaction findFirstOrThrow
   */
  export type ReactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reaction to fetch.
     */
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     */
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reactions.
     */
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reactions.
     */
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * Reaction findMany
   */
  export type ReactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter, which Reactions to fetch.
     */
    where?: ReactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reactions to fetch.
     */
    orderBy?: ReactionOrderByWithRelationInput | ReactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reactions.
     */
    cursor?: ReactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reactions.
     */
    skip?: number
    distinct?: ReactionScalarFieldEnum | ReactionScalarFieldEnum[]
  }

  /**
   * Reaction create
   */
  export type ReactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Reaction.
     */
    data: XOR<ReactionCreateInput, ReactionUncheckedCreateInput>
  }

  /**
   * Reaction createMany
   */
  export type ReactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reactions.
     */
    data: ReactionCreateManyInput | ReactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Reaction createManyAndReturn
   */
  export type ReactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * The data used to create many Reactions.
     */
    data: ReactionCreateManyInput | ReactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reaction update
   */
  export type ReactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Reaction.
     */
    data: XOR<ReactionUpdateInput, ReactionUncheckedUpdateInput>
    /**
     * Choose, which Reaction to update.
     */
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction updateMany
   */
  export type ReactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reactions.
     */
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyInput>
    /**
     * Filter which Reactions to update
     */
    where?: ReactionWhereInput
    /**
     * Limit how many Reactions to update.
     */
    limit?: number
  }

  /**
   * Reaction updateManyAndReturn
   */
  export type ReactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * The data used to update Reactions.
     */
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyInput>
    /**
     * Filter which Reactions to update
     */
    where?: ReactionWhereInput
    /**
     * Limit how many Reactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Reaction upsert
   */
  export type ReactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Reaction to update in case it exists.
     */
    where: ReactionWhereUniqueInput
    /**
     * In case the Reaction found by the `where` argument doesn't exist, create a new Reaction with this data.
     */
    create: XOR<ReactionCreateInput, ReactionUncheckedCreateInput>
    /**
     * In case the Reaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReactionUpdateInput, ReactionUncheckedUpdateInput>
  }

  /**
   * Reaction delete
   */
  export type ReactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
    /**
     * Filter which Reaction to delete.
     */
    where: ReactionWhereUniqueInput
  }

  /**
   * Reaction deleteMany
   */
  export type ReactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reactions to delete
     */
    where?: ReactionWhereInput
    /**
     * Limit how many Reactions to delete.
     */
    limit?: number
  }

  /**
   * Reaction without action
   */
  export type ReactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reaction
     */
    select?: ReactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reaction
     */
    omit?: ReactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReactionInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    activityEntryId: string | null
    userId: string | null
    username: string | null
    text: string | null
    createdAt: Date | null
    deletedAt: Date | null
    picture: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    activityEntryId: string | null
    userId: string | null
    username: string | null
    text: string | null
    createdAt: Date | null
    deletedAt: Date | null
    picture: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    activityEntryId: number
    userId: number
    username: number
    text: number
    createdAt: number
    deletedAt: number
    picture: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    activityEntryId?: true
    userId?: true
    username?: true
    text?: true
    createdAt?: true
    deletedAt?: true
    picture?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    activityEntryId?: true
    userId?: true
    username?: true
    text?: true
    createdAt?: true
    deletedAt?: true
    picture?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    activityEntryId?: true
    userId?: true
    username?: true
    text?: true
    createdAt?: true
    deletedAt?: true
    picture?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    activityEntryId: string
    userId: string
    username: string
    text: string
    createdAt: Date
    deletedAt: Date | null
    picture: string | null
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityEntryId?: boolean
    userId?: boolean
    username?: boolean
    text?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    picture?: boolean
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityEntryId?: boolean
    userId?: boolean
    username?: boolean
    text?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    picture?: boolean
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityEntryId?: boolean
    userId?: boolean
    username?: boolean
    text?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    picture?: boolean
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    activityEntryId?: boolean
    userId?: boolean
    username?: boolean
    text?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    picture?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityEntryId" | "userId" | "username" | "text" | "createdAt" | "deletedAt" | "picture", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityEntry?: boolean | ActivityEntryDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      activityEntry: Prisma.$ActivityEntryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      activityEntryId: string
      userId: string
      username: string
      text: string
      createdAt: Date
      deletedAt: Date | null
      picture: string | null
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    activityEntry<T extends ActivityEntryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityEntryDefaultArgs<ExtArgs>>): Prisma__ActivityEntryClient<$Result.GetResult<Prisma.$ActivityEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly activityEntryId: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly username: FieldRef<"Comment", 'String'>
    readonly text: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly deletedAt: FieldRef<"Comment", 'DateTime'>
    readonly picture: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model Metric
   */

  export type AggregateMetric = {
    _count: MetricCountAggregateOutputType | null
    _min: MetricMinAggregateOutputType | null
    _max: MetricMaxAggregateOutputType | null
  }

  export type MetricMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    emoji: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetricMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    emoji: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MetricCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    emoji: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MetricMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    emoji?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetricMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    emoji?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MetricCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    emoji?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Metric to aggregate.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Metrics
    **/
    _count?: true | MetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricMaxAggregateInputType
  }

  export type GetMetricAggregateType<T extends MetricAggregateArgs> = {
        [P in keyof T & keyof AggregateMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetric[P]>
      : GetScalarType<T[P], AggregateMetric[P]>
  }




  export type MetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricWhereInput
    orderBy?: MetricOrderByWithAggregationInput | MetricOrderByWithAggregationInput[]
    by: MetricScalarFieldEnum[] | MetricScalarFieldEnum
    having?: MetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricCountAggregateInputType | true
    _min?: MetricMinAggregateInputType
    _max?: MetricMaxAggregateInputType
  }

  export type MetricGroupByOutputType = {
    id: string
    userId: string
    title: string
    emoji: string
    createdAt: Date
    updatedAt: Date
    _count: MetricCountAggregateOutputType | null
    _min: MetricMinAggregateOutputType | null
    _max: MetricMaxAggregateOutputType | null
  }

  type GetMetricGroupByPayload<T extends MetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricGroupByOutputType[P]>
            : GetScalarType<T[P], MetricGroupByOutputType[P]>
        }
      >
    >


  export type MetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    emoji?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    entries?: boolean | Metric$entriesArgs<ExtArgs>
    _count?: boolean | MetricCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metric"]>

  export type MetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    emoji?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metric"]>

  export type MetricSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    emoji?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metric"]>

  export type MetricSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    emoji?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MetricOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "title" | "emoji" | "createdAt" | "updatedAt", ExtArgs["result"]["metric"]>
  export type MetricInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    entries?: boolean | Metric$entriesArgs<ExtArgs>
    _count?: boolean | MetricCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MetricIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MetricIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Metric"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      entries: Prisma.$MetricEntryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      emoji: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["metric"]>
    composites: {}
  }

  type MetricGetPayload<S extends boolean | null | undefined | MetricDefaultArgs> = $Result.GetResult<Prisma.$MetricPayload, S>

  type MetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MetricFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MetricCountAggregateInputType | true
    }

  export interface MetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Metric'], meta: { name: 'Metric' } }
    /**
     * Find zero or one Metric that matches the filter.
     * @param {MetricFindUniqueArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricFindUniqueArgs>(args: SelectSubset<T, MetricFindUniqueArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Metric that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MetricFindUniqueOrThrowArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Metric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindFirstArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricFindFirstArgs>(args?: SelectSubset<T, MetricFindFirstArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Metric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindFirstOrThrowArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Metrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Metrics
     * const metrics = await prisma.metric.findMany()
     * 
     * // Get first 10 Metrics
     * const metrics = await prisma.metric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metricWithIdOnly = await prisma.metric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetricFindManyArgs>(args?: SelectSubset<T, MetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Metric.
     * @param {MetricCreateArgs} args - Arguments to create a Metric.
     * @example
     * // Create one Metric
     * const Metric = await prisma.metric.create({
     *   data: {
     *     // ... data to create a Metric
     *   }
     * })
     * 
     */
    create<T extends MetricCreateArgs>(args: SelectSubset<T, MetricCreateArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Metrics.
     * @param {MetricCreateManyArgs} args - Arguments to create many Metrics.
     * @example
     * // Create many Metrics
     * const metric = await prisma.metric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricCreateManyArgs>(args?: SelectSubset<T, MetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Metrics and returns the data saved in the database.
     * @param {MetricCreateManyAndReturnArgs} args - Arguments to create many Metrics.
     * @example
     * // Create many Metrics
     * const metric = await prisma.metric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Metrics and only return the `id`
     * const metricWithIdOnly = await prisma.metric.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Metric.
     * @param {MetricDeleteArgs} args - Arguments to delete one Metric.
     * @example
     * // Delete one Metric
     * const Metric = await prisma.metric.delete({
     *   where: {
     *     // ... filter to delete one Metric
     *   }
     * })
     * 
     */
    delete<T extends MetricDeleteArgs>(args: SelectSubset<T, MetricDeleteArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Metric.
     * @param {MetricUpdateArgs} args - Arguments to update one Metric.
     * @example
     * // Update one Metric
     * const metric = await prisma.metric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricUpdateArgs>(args: SelectSubset<T, MetricUpdateArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Metrics.
     * @param {MetricDeleteManyArgs} args - Arguments to filter Metrics to delete.
     * @example
     * // Delete a few Metrics
     * const { count } = await prisma.metric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricDeleteManyArgs>(args?: SelectSubset<T, MetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Metrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Metrics
     * const metric = await prisma.metric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricUpdateManyArgs>(args: SelectSubset<T, MetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Metrics and returns the data updated in the database.
     * @param {MetricUpdateManyAndReturnArgs} args - Arguments to update many Metrics.
     * @example
     * // Update many Metrics
     * const metric = await prisma.metric.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Metrics and only return the `id`
     * const metricWithIdOnly = await prisma.metric.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MetricUpdateManyAndReturnArgs>(args: SelectSubset<T, MetricUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Metric.
     * @param {MetricUpsertArgs} args - Arguments to update or create a Metric.
     * @example
     * // Update or create a Metric
     * const metric = await prisma.metric.upsert({
     *   create: {
     *     // ... data to create a Metric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Metric we want to update
     *   }
     * })
     */
    upsert<T extends MetricUpsertArgs>(args: SelectSubset<T, MetricUpsertArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Metrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricCountArgs} args - Arguments to filter Metrics to count.
     * @example
     * // Count the number of Metrics
     * const count = await prisma.metric.count({
     *   where: {
     *     // ... the filter for the Metrics we want to count
     *   }
     * })
    **/
    count<T extends MetricCountArgs>(
      args?: Subset<T, MetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Metric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricAggregateArgs>(args: Subset<T, MetricAggregateArgs>): Prisma.PrismaPromise<GetMetricAggregateType<T>>

    /**
     * Group by Metric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricGroupByArgs['orderBy'] }
        : { orderBy?: MetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Metric model
   */
  readonly fields: MetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Metric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    entries<T extends Metric$entriesArgs<ExtArgs> = {}>(args?: Subset<T, Metric$entriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Metric model
   */
  interface MetricFieldRefs {
    readonly id: FieldRef<"Metric", 'String'>
    readonly userId: FieldRef<"Metric", 'String'>
    readonly title: FieldRef<"Metric", 'String'>
    readonly emoji: FieldRef<"Metric", 'String'>
    readonly createdAt: FieldRef<"Metric", 'DateTime'>
    readonly updatedAt: FieldRef<"Metric", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Metric findUnique
   */
  export type MetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric findUniqueOrThrow
   */
  export type MetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric findFirst
   */
  export type MetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Metrics.
     */
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric findFirstOrThrow
   */
  export type MetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Metrics.
     */
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric findMany
   */
  export type MetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metrics to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric create
   */
  export type MetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * The data needed to create a Metric.
     */
    data: XOR<MetricCreateInput, MetricUncheckedCreateInput>
  }

  /**
   * Metric createMany
   */
  export type MetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Metrics.
     */
    data: MetricCreateManyInput | MetricCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Metric createManyAndReturn
   */
  export type MetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * The data used to create many Metrics.
     */
    data: MetricCreateManyInput | MetricCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Metric update
   */
  export type MetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * The data needed to update a Metric.
     */
    data: XOR<MetricUpdateInput, MetricUncheckedUpdateInput>
    /**
     * Choose, which Metric to update.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric updateMany
   */
  export type MetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Metrics.
     */
    data: XOR<MetricUpdateManyMutationInput, MetricUncheckedUpdateManyInput>
    /**
     * Filter which Metrics to update
     */
    where?: MetricWhereInput
    /**
     * Limit how many Metrics to update.
     */
    limit?: number
  }

  /**
   * Metric updateManyAndReturn
   */
  export type MetricUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * The data used to update Metrics.
     */
    data: XOR<MetricUpdateManyMutationInput, MetricUncheckedUpdateManyInput>
    /**
     * Filter which Metrics to update
     */
    where?: MetricWhereInput
    /**
     * Limit how many Metrics to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Metric upsert
   */
  export type MetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * The filter to search for the Metric to update in case it exists.
     */
    where: MetricWhereUniqueInput
    /**
     * In case the Metric found by the `where` argument doesn't exist, create a new Metric with this data.
     */
    create: XOR<MetricCreateInput, MetricUncheckedCreateInput>
    /**
     * In case the Metric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricUpdateInput, MetricUncheckedUpdateInput>
  }

  /**
   * Metric delete
   */
  export type MetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter which Metric to delete.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric deleteMany
   */
  export type MetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Metrics to delete
     */
    where?: MetricWhereInput
    /**
     * Limit how many Metrics to delete.
     */
    limit?: number
  }

  /**
   * Metric.entries
   */
  export type Metric$entriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    where?: MetricEntryWhereInput
    orderBy?: MetricEntryOrderByWithRelationInput | MetricEntryOrderByWithRelationInput[]
    cursor?: MetricEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricEntryScalarFieldEnum | MetricEntryScalarFieldEnum[]
  }

  /**
   * Metric without action
   */
  export type MetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Metric
     */
    omit?: MetricOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
  }


  /**
   * Model MetricEntry
   */

  export type AggregateMetricEntry = {
    _count: MetricEntryCountAggregateOutputType | null
    _avg: MetricEntryAvgAggregateOutputType | null
    _sum: MetricEntrySumAggregateOutputType | null
    _min: MetricEntryMinAggregateOutputType | null
    _max: MetricEntryMaxAggregateOutputType | null
  }

  export type MetricEntryAvgAggregateOutputType = {
    rating: number | null
  }

  export type MetricEntrySumAggregateOutputType = {
    rating: number | null
  }

  export type MetricEntryMinAggregateOutputType = {
    id: string | null
    userId: string | null
    metricId: string | null
    rating: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    description: string | null
    skipped: boolean | null
    descriptionSkipped: boolean | null
  }

  export type MetricEntryMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    metricId: string | null
    rating: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    description: string | null
    skipped: boolean | null
    descriptionSkipped: boolean | null
  }

  export type MetricEntryCountAggregateOutputType = {
    id: number
    userId: number
    metricId: number
    rating: number
    date: number
    createdAt: number
    updatedAt: number
    description: number
    skipped: number
    descriptionSkipped: number
    _all: number
  }


  export type MetricEntryAvgAggregateInputType = {
    rating?: true
  }

  export type MetricEntrySumAggregateInputType = {
    rating?: true
  }

  export type MetricEntryMinAggregateInputType = {
    id?: true
    userId?: true
    metricId?: true
    rating?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    description?: true
    skipped?: true
    descriptionSkipped?: true
  }

  export type MetricEntryMaxAggregateInputType = {
    id?: true
    userId?: true
    metricId?: true
    rating?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    description?: true
    skipped?: true
    descriptionSkipped?: true
  }

  export type MetricEntryCountAggregateInputType = {
    id?: true
    userId?: true
    metricId?: true
    rating?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    description?: true
    skipped?: true
    descriptionSkipped?: true
    _all?: true
  }

  export type MetricEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricEntry to aggregate.
     */
    where?: MetricEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricEntries to fetch.
     */
    orderBy?: MetricEntryOrderByWithRelationInput | MetricEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetricEntries
    **/
    _count?: true | MetricEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetricEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetricEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricEntryMaxAggregateInputType
  }

  export type GetMetricEntryAggregateType<T extends MetricEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateMetricEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetricEntry[P]>
      : GetScalarType<T[P], AggregateMetricEntry[P]>
  }




  export type MetricEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricEntryWhereInput
    orderBy?: MetricEntryOrderByWithAggregationInput | MetricEntryOrderByWithAggregationInput[]
    by: MetricEntryScalarFieldEnum[] | MetricEntryScalarFieldEnum
    having?: MetricEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricEntryCountAggregateInputType | true
    _avg?: MetricEntryAvgAggregateInputType
    _sum?: MetricEntrySumAggregateInputType
    _min?: MetricEntryMinAggregateInputType
    _max?: MetricEntryMaxAggregateInputType
  }

  export type MetricEntryGroupByOutputType = {
    id: string
    userId: string
    metricId: string
    rating: number
    date: Date
    createdAt: Date
    updatedAt: Date
    description: string | null
    skipped: boolean
    descriptionSkipped: boolean
    _count: MetricEntryCountAggregateOutputType | null
    _avg: MetricEntryAvgAggregateOutputType | null
    _sum: MetricEntrySumAggregateOutputType | null
    _min: MetricEntryMinAggregateOutputType | null
    _max: MetricEntryMaxAggregateOutputType | null
  }

  type GetMetricEntryGroupByPayload<T extends MetricEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricEntryGroupByOutputType[P]>
            : GetScalarType<T[P], MetricEntryGroupByOutputType[P]>
        }
      >
    >


  export type MetricEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    metricId?: boolean
    rating?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    skipped?: boolean
    descriptionSkipped?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    metric?: boolean | MetricDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metricEntry"]>

  export type MetricEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    metricId?: boolean
    rating?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    skipped?: boolean
    descriptionSkipped?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    metric?: boolean | MetricDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metricEntry"]>

  export type MetricEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    metricId?: boolean
    rating?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    skipped?: boolean
    descriptionSkipped?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    metric?: boolean | MetricDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metricEntry"]>

  export type MetricEntrySelectScalar = {
    id?: boolean
    userId?: boolean
    metricId?: boolean
    rating?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    description?: boolean
    skipped?: boolean
    descriptionSkipped?: boolean
  }

  export type MetricEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "metricId" | "rating" | "date" | "createdAt" | "updatedAt" | "description" | "skipped" | "descriptionSkipped", ExtArgs["result"]["metricEntry"]>
  export type MetricEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    metric?: boolean | MetricDefaultArgs<ExtArgs>
  }
  export type MetricEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    metric?: boolean | MetricDefaultArgs<ExtArgs>
  }
  export type MetricEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    metric?: boolean | MetricDefaultArgs<ExtArgs>
  }

  export type $MetricEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetricEntry"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      metric: Prisma.$MetricPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      metricId: string
      rating: number
      date: Date
      createdAt: Date
      updatedAt: Date
      description: string | null
      skipped: boolean
      descriptionSkipped: boolean
    }, ExtArgs["result"]["metricEntry"]>
    composites: {}
  }

  type MetricEntryGetPayload<S extends boolean | null | undefined | MetricEntryDefaultArgs> = $Result.GetResult<Prisma.$MetricEntryPayload, S>

  type MetricEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MetricEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MetricEntryCountAggregateInputType | true
    }

  export interface MetricEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricEntry'], meta: { name: 'MetricEntry' } }
    /**
     * Find zero or one MetricEntry that matches the filter.
     * @param {MetricEntryFindUniqueArgs} args - Arguments to find a MetricEntry
     * @example
     * // Get one MetricEntry
     * const metricEntry = await prisma.metricEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricEntryFindUniqueArgs>(args: SelectSubset<T, MetricEntryFindUniqueArgs<ExtArgs>>): Prisma__MetricEntryClient<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MetricEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MetricEntryFindUniqueOrThrowArgs} args - Arguments to find a MetricEntry
     * @example
     * // Get one MetricEntry
     * const metricEntry = await prisma.metricEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricEntryClient<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricEntryFindFirstArgs} args - Arguments to find a MetricEntry
     * @example
     * // Get one MetricEntry
     * const metricEntry = await prisma.metricEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricEntryFindFirstArgs>(args?: SelectSubset<T, MetricEntryFindFirstArgs<ExtArgs>>): Prisma__MetricEntryClient<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MetricEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricEntryFindFirstOrThrowArgs} args - Arguments to find a MetricEntry
     * @example
     * // Get one MetricEntry
     * const metricEntry = await prisma.metricEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricEntryClient<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MetricEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetricEntries
     * const metricEntries = await prisma.metricEntry.findMany()
     * 
     * // Get first 10 MetricEntries
     * const metricEntries = await prisma.metricEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metricEntryWithIdOnly = await prisma.metricEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetricEntryFindManyArgs>(args?: SelectSubset<T, MetricEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MetricEntry.
     * @param {MetricEntryCreateArgs} args - Arguments to create a MetricEntry.
     * @example
     * // Create one MetricEntry
     * const MetricEntry = await prisma.metricEntry.create({
     *   data: {
     *     // ... data to create a MetricEntry
     *   }
     * })
     * 
     */
    create<T extends MetricEntryCreateArgs>(args: SelectSubset<T, MetricEntryCreateArgs<ExtArgs>>): Prisma__MetricEntryClient<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MetricEntries.
     * @param {MetricEntryCreateManyArgs} args - Arguments to create many MetricEntries.
     * @example
     * // Create many MetricEntries
     * const metricEntry = await prisma.metricEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricEntryCreateManyArgs>(args?: SelectSubset<T, MetricEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MetricEntries and returns the data saved in the database.
     * @param {MetricEntryCreateManyAndReturnArgs} args - Arguments to create many MetricEntries.
     * @example
     * // Create many MetricEntries
     * const metricEntry = await prisma.metricEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MetricEntries and only return the `id`
     * const metricEntryWithIdOnly = await prisma.metricEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MetricEntry.
     * @param {MetricEntryDeleteArgs} args - Arguments to delete one MetricEntry.
     * @example
     * // Delete one MetricEntry
     * const MetricEntry = await prisma.metricEntry.delete({
     *   where: {
     *     // ... filter to delete one MetricEntry
     *   }
     * })
     * 
     */
    delete<T extends MetricEntryDeleteArgs>(args: SelectSubset<T, MetricEntryDeleteArgs<ExtArgs>>): Prisma__MetricEntryClient<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MetricEntry.
     * @param {MetricEntryUpdateArgs} args - Arguments to update one MetricEntry.
     * @example
     * // Update one MetricEntry
     * const metricEntry = await prisma.metricEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricEntryUpdateArgs>(args: SelectSubset<T, MetricEntryUpdateArgs<ExtArgs>>): Prisma__MetricEntryClient<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MetricEntries.
     * @param {MetricEntryDeleteManyArgs} args - Arguments to filter MetricEntries to delete.
     * @example
     * // Delete a few MetricEntries
     * const { count } = await prisma.metricEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricEntryDeleteManyArgs>(args?: SelectSubset<T, MetricEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetricEntries
     * const metricEntry = await prisma.metricEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricEntryUpdateManyArgs>(args: SelectSubset<T, MetricEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricEntries and returns the data updated in the database.
     * @param {MetricEntryUpdateManyAndReturnArgs} args - Arguments to update many MetricEntries.
     * @example
     * // Update many MetricEntries
     * const metricEntry = await prisma.metricEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MetricEntries and only return the `id`
     * const metricEntryWithIdOnly = await prisma.metricEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MetricEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, MetricEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MetricEntry.
     * @param {MetricEntryUpsertArgs} args - Arguments to update or create a MetricEntry.
     * @example
     * // Update or create a MetricEntry
     * const metricEntry = await prisma.metricEntry.upsert({
     *   create: {
     *     // ... data to create a MetricEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetricEntry we want to update
     *   }
     * })
     */
    upsert<T extends MetricEntryUpsertArgs>(args: SelectSubset<T, MetricEntryUpsertArgs<ExtArgs>>): Prisma__MetricEntryClient<$Result.GetResult<Prisma.$MetricEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MetricEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricEntryCountArgs} args - Arguments to filter MetricEntries to count.
     * @example
     * // Count the number of MetricEntries
     * const count = await prisma.metricEntry.count({
     *   where: {
     *     // ... the filter for the MetricEntries we want to count
     *   }
     * })
    **/
    count<T extends MetricEntryCountArgs>(
      args?: Subset<T, MetricEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetricEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricEntryAggregateArgs>(args: Subset<T, MetricEntryAggregateArgs>): Prisma.PrismaPromise<GetMetricEntryAggregateType<T>>

    /**
     * Group by MetricEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricEntryGroupByArgs['orderBy'] }
        : { orderBy?: MetricEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetricEntry model
   */
  readonly fields: MetricEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetricEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    metric<T extends MetricDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MetricDefaultArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MetricEntry model
   */
  interface MetricEntryFieldRefs {
    readonly id: FieldRef<"MetricEntry", 'String'>
    readonly userId: FieldRef<"MetricEntry", 'String'>
    readonly metricId: FieldRef<"MetricEntry", 'String'>
    readonly rating: FieldRef<"MetricEntry", 'Int'>
    readonly date: FieldRef<"MetricEntry", 'DateTime'>
    readonly createdAt: FieldRef<"MetricEntry", 'DateTime'>
    readonly updatedAt: FieldRef<"MetricEntry", 'DateTime'>
    readonly description: FieldRef<"MetricEntry", 'String'>
    readonly skipped: FieldRef<"MetricEntry", 'Boolean'>
    readonly descriptionSkipped: FieldRef<"MetricEntry", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * MetricEntry findUnique
   */
  export type MetricEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * Filter, which MetricEntry to fetch.
     */
    where: MetricEntryWhereUniqueInput
  }

  /**
   * MetricEntry findUniqueOrThrow
   */
  export type MetricEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * Filter, which MetricEntry to fetch.
     */
    where: MetricEntryWhereUniqueInput
  }

  /**
   * MetricEntry findFirst
   */
  export type MetricEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * Filter, which MetricEntry to fetch.
     */
    where?: MetricEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricEntries to fetch.
     */
    orderBy?: MetricEntryOrderByWithRelationInput | MetricEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricEntries.
     */
    cursor?: MetricEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricEntries.
     */
    distinct?: MetricEntryScalarFieldEnum | MetricEntryScalarFieldEnum[]
  }

  /**
   * MetricEntry findFirstOrThrow
   */
  export type MetricEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * Filter, which MetricEntry to fetch.
     */
    where?: MetricEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricEntries to fetch.
     */
    orderBy?: MetricEntryOrderByWithRelationInput | MetricEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricEntries.
     */
    cursor?: MetricEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricEntries.
     */
    distinct?: MetricEntryScalarFieldEnum | MetricEntryScalarFieldEnum[]
  }

  /**
   * MetricEntry findMany
   */
  export type MetricEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * Filter, which MetricEntries to fetch.
     */
    where?: MetricEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricEntries to fetch.
     */
    orderBy?: MetricEntryOrderByWithRelationInput | MetricEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetricEntries.
     */
    cursor?: MetricEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricEntries.
     */
    skip?: number
    distinct?: MetricEntryScalarFieldEnum | MetricEntryScalarFieldEnum[]
  }

  /**
   * MetricEntry create
   */
  export type MetricEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a MetricEntry.
     */
    data: XOR<MetricEntryCreateInput, MetricEntryUncheckedCreateInput>
  }

  /**
   * MetricEntry createMany
   */
  export type MetricEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetricEntries.
     */
    data: MetricEntryCreateManyInput | MetricEntryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MetricEntry createManyAndReturn
   */
  export type MetricEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * The data used to create many MetricEntries.
     */
    data: MetricEntryCreateManyInput | MetricEntryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetricEntry update
   */
  export type MetricEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a MetricEntry.
     */
    data: XOR<MetricEntryUpdateInput, MetricEntryUncheckedUpdateInput>
    /**
     * Choose, which MetricEntry to update.
     */
    where: MetricEntryWhereUniqueInput
  }

  /**
   * MetricEntry updateMany
   */
  export type MetricEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetricEntries.
     */
    data: XOR<MetricEntryUpdateManyMutationInput, MetricEntryUncheckedUpdateManyInput>
    /**
     * Filter which MetricEntries to update
     */
    where?: MetricEntryWhereInput
    /**
     * Limit how many MetricEntries to update.
     */
    limit?: number
  }

  /**
   * MetricEntry updateManyAndReturn
   */
  export type MetricEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * The data used to update MetricEntries.
     */
    data: XOR<MetricEntryUpdateManyMutationInput, MetricEntryUncheckedUpdateManyInput>
    /**
     * Filter which MetricEntries to update
     */
    where?: MetricEntryWhereInput
    /**
     * Limit how many MetricEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetricEntry upsert
   */
  export type MetricEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the MetricEntry to update in case it exists.
     */
    where: MetricEntryWhereUniqueInput
    /**
     * In case the MetricEntry found by the `where` argument doesn't exist, create a new MetricEntry with this data.
     */
    create: XOR<MetricEntryCreateInput, MetricEntryUncheckedCreateInput>
    /**
     * In case the MetricEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricEntryUpdateInput, MetricEntryUncheckedUpdateInput>
  }

  /**
   * MetricEntry delete
   */
  export type MetricEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
    /**
     * Filter which MetricEntry to delete.
     */
    where: MetricEntryWhereUniqueInput
  }

  /**
   * MetricEntry deleteMany
   */
  export type MetricEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricEntries to delete
     */
    where?: MetricEntryWhereInput
    /**
     * Limit how many MetricEntries to delete.
     */
    limit?: number
  }

  /**
   * MetricEntry without action
   */
  export type MetricEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricEntry
     */
    select?: MetricEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the MetricEntry
     */
    omit?: MetricEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricEntryInclude<ExtArgs> | null
  }


  /**
   * Model Plan
   */

  export type AggregatePlan = {
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  export type PlanAvgAggregateOutputType = {
    timesPerWeek: number | null
    coachSuggestedTimesPerWeek: number | null
    sortOrder: number | null
  }

  export type PlanSumAggregateOutputType = {
    timesPerWeek: number | null
    coachSuggestedTimesPerWeek: number | null
    sortOrder: number | null
  }

  export type PlanMinAggregateOutputType = {
    id: string | null
    userId: string | null
    planGroupId: string | null
    goal: string | null
    emoji: string | null
    finishingDate: Date | null
    createdAt: Date | null
    deletedAt: Date | null
    durationType: $Enums.PlanDurationType | null
    outlineType: $Enums.PlanOutlineType | null
    timesPerWeek: number | null
    coachSuggestedTimesPerWeek: number | null
    notes: string | null
    coachNotes: string | null
    suggestedByCoachAt: Date | null
    sortOrder: number | null
    currentWeekState: $Enums.PlanState | null
    currentWeekStateCalculatedAt: Date | null
  }

  export type PlanMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    planGroupId: string | null
    goal: string | null
    emoji: string | null
    finishingDate: Date | null
    createdAt: Date | null
    deletedAt: Date | null
    durationType: $Enums.PlanDurationType | null
    outlineType: $Enums.PlanOutlineType | null
    timesPerWeek: number | null
    coachSuggestedTimesPerWeek: number | null
    notes: string | null
    coachNotes: string | null
    suggestedByCoachAt: Date | null
    sortOrder: number | null
    currentWeekState: $Enums.PlanState | null
    currentWeekStateCalculatedAt: Date | null
  }

  export type PlanCountAggregateOutputType = {
    id: number
    userId: number
    planGroupId: number
    goal: number
    emoji: number
    finishingDate: number
    createdAt: number
    deletedAt: number
    durationType: number
    outlineType: number
    timesPerWeek: number
    coachSuggestedTimesPerWeek: number
    notes: number
    coachNotes: number
    suggestedByCoachAt: number
    sortOrder: number
    currentWeekState: number
    currentWeekStateCalculatedAt: number
    _all: number
  }


  export type PlanAvgAggregateInputType = {
    timesPerWeek?: true
    coachSuggestedTimesPerWeek?: true
    sortOrder?: true
  }

  export type PlanSumAggregateInputType = {
    timesPerWeek?: true
    coachSuggestedTimesPerWeek?: true
    sortOrder?: true
  }

  export type PlanMinAggregateInputType = {
    id?: true
    userId?: true
    planGroupId?: true
    goal?: true
    emoji?: true
    finishingDate?: true
    createdAt?: true
    deletedAt?: true
    durationType?: true
    outlineType?: true
    timesPerWeek?: true
    coachSuggestedTimesPerWeek?: true
    notes?: true
    coachNotes?: true
    suggestedByCoachAt?: true
    sortOrder?: true
    currentWeekState?: true
    currentWeekStateCalculatedAt?: true
  }

  export type PlanMaxAggregateInputType = {
    id?: true
    userId?: true
    planGroupId?: true
    goal?: true
    emoji?: true
    finishingDate?: true
    createdAt?: true
    deletedAt?: true
    durationType?: true
    outlineType?: true
    timesPerWeek?: true
    coachSuggestedTimesPerWeek?: true
    notes?: true
    coachNotes?: true
    suggestedByCoachAt?: true
    sortOrder?: true
    currentWeekState?: true
    currentWeekStateCalculatedAt?: true
  }

  export type PlanCountAggregateInputType = {
    id?: true
    userId?: true
    planGroupId?: true
    goal?: true
    emoji?: true
    finishingDate?: true
    createdAt?: true
    deletedAt?: true
    durationType?: true
    outlineType?: true
    timesPerWeek?: true
    coachSuggestedTimesPerWeek?: true
    notes?: true
    coachNotes?: true
    suggestedByCoachAt?: true
    sortOrder?: true
    currentWeekState?: true
    currentWeekStateCalculatedAt?: true
    _all?: true
  }

  export type PlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plan to aggregate.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plans
    **/
    _count?: true | PlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMaxAggregateInputType
  }

  export type GetPlanAggregateType<T extends PlanAggregateArgs> = {
        [P in keyof T & keyof AggregatePlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlan[P]>
      : GetScalarType<T[P], AggregatePlan[P]>
  }




  export type PlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithAggregationInput | PlanOrderByWithAggregationInput[]
    by: PlanScalarFieldEnum[] | PlanScalarFieldEnum
    having?: PlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanCountAggregateInputType | true
    _avg?: PlanAvgAggregateInputType
    _sum?: PlanSumAggregateInputType
    _min?: PlanMinAggregateInputType
    _max?: PlanMaxAggregateInputType
  }

  export type PlanGroupByOutputType = {
    id: string
    userId: string
    planGroupId: string | null
    goal: string
    emoji: string | null
    finishingDate: Date | null
    createdAt: Date
    deletedAt: Date | null
    durationType: $Enums.PlanDurationType | null
    outlineType: $Enums.PlanOutlineType
    timesPerWeek: number | null
    coachSuggestedTimesPerWeek: number | null
    notes: string | null
    coachNotes: string | null
    suggestedByCoachAt: Date | null
    sortOrder: number | null
    currentWeekState: $Enums.PlanState
    currentWeekStateCalculatedAt: Date | null
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  type GetPlanGroupByPayload<T extends PlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanGroupByOutputType[P]>
            : GetScalarType<T[P], PlanGroupByOutputType[P]>
        }
      >
    >


  export type PlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planGroupId?: boolean
    goal?: boolean
    emoji?: boolean
    finishingDate?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    durationType?: boolean
    outlineType?: boolean
    timesPerWeek?: boolean
    coachSuggestedTimesPerWeek?: boolean
    notes?: boolean
    coachNotes?: boolean
    suggestedByCoachAt?: boolean
    sortOrder?: boolean
    currentWeekState?: boolean
    currentWeekStateCalculatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    planGroup?: boolean | Plan$planGroupArgs<ExtArgs>
    sessions?: boolean | Plan$sessionsArgs<ExtArgs>
    activities?: boolean | Plan$activitiesArgs<ExtArgs>
    invitations?: boolean | Plan$invitationsArgs<ExtArgs>
    milestones?: boolean | Plan$milestonesArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planGroupId?: boolean
    goal?: boolean
    emoji?: boolean
    finishingDate?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    durationType?: boolean
    outlineType?: boolean
    timesPerWeek?: boolean
    coachSuggestedTimesPerWeek?: boolean
    notes?: boolean
    coachNotes?: boolean
    suggestedByCoachAt?: boolean
    sortOrder?: boolean
    currentWeekState?: boolean
    currentWeekStateCalculatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    planGroup?: boolean | Plan$planGroupArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    planGroupId?: boolean
    goal?: boolean
    emoji?: boolean
    finishingDate?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    durationType?: boolean
    outlineType?: boolean
    timesPerWeek?: boolean
    coachSuggestedTimesPerWeek?: boolean
    notes?: boolean
    coachNotes?: boolean
    suggestedByCoachAt?: boolean
    sortOrder?: boolean
    currentWeekState?: boolean
    currentWeekStateCalculatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    planGroup?: boolean | Plan$planGroupArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectScalar = {
    id?: boolean
    userId?: boolean
    planGroupId?: boolean
    goal?: boolean
    emoji?: boolean
    finishingDate?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    durationType?: boolean
    outlineType?: boolean
    timesPerWeek?: boolean
    coachSuggestedTimesPerWeek?: boolean
    notes?: boolean
    coachNotes?: boolean
    suggestedByCoachAt?: boolean
    sortOrder?: boolean
    currentWeekState?: boolean
    currentWeekStateCalculatedAt?: boolean
  }

  export type PlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "planGroupId" | "goal" | "emoji" | "finishingDate" | "createdAt" | "deletedAt" | "durationType" | "outlineType" | "timesPerWeek" | "coachSuggestedTimesPerWeek" | "notes" | "coachNotes" | "suggestedByCoachAt" | "sortOrder" | "currentWeekState" | "currentWeekStateCalculatedAt", ExtArgs["result"]["plan"]>
  export type PlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    planGroup?: boolean | Plan$planGroupArgs<ExtArgs>
    sessions?: boolean | Plan$sessionsArgs<ExtArgs>
    activities?: boolean | Plan$activitiesArgs<ExtArgs>
    invitations?: boolean | Plan$invitationsArgs<ExtArgs>
    milestones?: boolean | Plan$milestonesArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    planGroup?: boolean | Plan$planGroupArgs<ExtArgs>
  }
  export type PlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    planGroup?: boolean | Plan$planGroupArgs<ExtArgs>
  }

  export type $PlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plan"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      planGroup: Prisma.$PlanGroupPayload<ExtArgs> | null
      sessions: Prisma.$PlanSessionPayload<ExtArgs>[]
      activities: Prisma.$ActivityPayload<ExtArgs>[]
      invitations: Prisma.$PlanInvitationPayload<ExtArgs>[]
      milestones: Prisma.$PlanMilestonePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      planGroupId: string | null
      goal: string
      emoji: string | null
      finishingDate: Date | null
      createdAt: Date
      deletedAt: Date | null
      durationType: $Enums.PlanDurationType | null
      outlineType: $Enums.PlanOutlineType
      timesPerWeek: number | null
      coachSuggestedTimesPerWeek: number | null
      notes: string | null
      coachNotes: string | null
      suggestedByCoachAt: Date | null
      sortOrder: number | null
      currentWeekState: $Enums.PlanState
      currentWeekStateCalculatedAt: Date | null
    }, ExtArgs["result"]["plan"]>
    composites: {}
  }

  type PlanGetPayload<S extends boolean | null | undefined | PlanDefaultArgs> = $Result.GetResult<Prisma.$PlanPayload, S>

  type PlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlanCountAggregateInputType | true
    }

  export interface PlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plan'], meta: { name: 'Plan' } }
    /**
     * Find zero or one Plan that matches the filter.
     * @param {PlanFindUniqueArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanFindUniqueArgs>(args: SelectSubset<T, PlanFindUniqueArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Plan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlanFindUniqueOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanFindFirstArgs>(args?: SelectSubset<T, PlanFindFirstArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Plan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plan.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planWithIdOnly = await prisma.plan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanFindManyArgs>(args?: SelectSubset<T, PlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Plan.
     * @param {PlanCreateArgs} args - Arguments to create a Plan.
     * @example
     * // Create one Plan
     * const Plan = await prisma.plan.create({
     *   data: {
     *     // ... data to create a Plan
     *   }
     * })
     * 
     */
    create<T extends PlanCreateArgs>(args: SelectSubset<T, PlanCreateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Plans.
     * @param {PlanCreateManyArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanCreateManyArgs>(args?: SelectSubset<T, PlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Plans and returns the data saved in the database.
     * @param {PlanCreateManyAndReturnArgs} args - Arguments to create many Plans.
     * @example
     * // Create many Plans
     * const plan = await prisma.plan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Plans and only return the `id`
     * const planWithIdOnly = await prisma.plan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Plan.
     * @param {PlanDeleteArgs} args - Arguments to delete one Plan.
     * @example
     * // Delete one Plan
     * const Plan = await prisma.plan.delete({
     *   where: {
     *     // ... filter to delete one Plan
     *   }
     * })
     * 
     */
    delete<T extends PlanDeleteArgs>(args: SelectSubset<T, PlanDeleteArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Plan.
     * @param {PlanUpdateArgs} args - Arguments to update one Plan.
     * @example
     * // Update one Plan
     * const plan = await prisma.plan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanUpdateArgs>(args: SelectSubset<T, PlanUpdateArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Plans.
     * @param {PlanDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanDeleteManyArgs>(args?: SelectSubset<T, PlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanUpdateManyArgs>(args: SelectSubset<T, PlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans and returns the data updated in the database.
     * @param {PlanUpdateManyAndReturnArgs} args - Arguments to update many Plans.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Plans and only return the `id`
     * const planWithIdOnly = await prisma.plan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlanUpdateManyAndReturnArgs>(args: SelectSubset<T, PlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Plan.
     * @param {PlanUpsertArgs} args - Arguments to update or create a Plan.
     * @example
     * // Update or create a Plan
     * const plan = await prisma.plan.upsert({
     *   create: {
     *     // ... data to create a Plan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plan we want to update
     *   }
     * })
     */
    upsert<T extends PlanUpsertArgs>(args: SelectSubset<T, PlanUpsertArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plan.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends PlanCountArgs>(
      args?: Subset<T, PlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanAggregateArgs>(args: Subset<T, PlanAggregateArgs>): Prisma.PrismaPromise<GetPlanAggregateType<T>>

    /**
     * Group by Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanGroupByArgs['orderBy'] }
        : { orderBy?: PlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plan model
   */
  readonly fields: PlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    planGroup<T extends Plan$planGroupArgs<ExtArgs> = {}>(args?: Subset<T, Plan$planGroupArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sessions<T extends Plan$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activities<T extends Plan$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, Plan$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invitations<T extends Plan$invitationsArgs<ExtArgs> = {}>(args?: Subset<T, Plan$invitationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    milestones<T extends Plan$milestonesArgs<ExtArgs> = {}>(args?: Subset<T, Plan$milestonesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Plan model
   */
  interface PlanFieldRefs {
    readonly id: FieldRef<"Plan", 'String'>
    readonly userId: FieldRef<"Plan", 'String'>
    readonly planGroupId: FieldRef<"Plan", 'String'>
    readonly goal: FieldRef<"Plan", 'String'>
    readonly emoji: FieldRef<"Plan", 'String'>
    readonly finishingDate: FieldRef<"Plan", 'DateTime'>
    readonly createdAt: FieldRef<"Plan", 'DateTime'>
    readonly deletedAt: FieldRef<"Plan", 'DateTime'>
    readonly durationType: FieldRef<"Plan", 'PlanDurationType'>
    readonly outlineType: FieldRef<"Plan", 'PlanOutlineType'>
    readonly timesPerWeek: FieldRef<"Plan", 'Int'>
    readonly coachSuggestedTimesPerWeek: FieldRef<"Plan", 'Int'>
    readonly notes: FieldRef<"Plan", 'String'>
    readonly coachNotes: FieldRef<"Plan", 'String'>
    readonly suggestedByCoachAt: FieldRef<"Plan", 'DateTime'>
    readonly sortOrder: FieldRef<"Plan", 'Int'>
    readonly currentWeekState: FieldRef<"Plan", 'PlanState'>
    readonly currentWeekStateCalculatedAt: FieldRef<"Plan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Plan findUnique
   */
  export type PlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findUniqueOrThrow
   */
  export type PlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan findFirst
   */
  export type PlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findFirstOrThrow
   */
  export type PlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan findMany
   */
  export type PlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plans to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * Plan create
   */
  export type PlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to create a Plan.
     */
    data: XOR<PlanCreateInput, PlanUncheckedCreateInput>
  }

  /**
   * Plan createMany
   */
  export type PlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Plan createManyAndReturn
   */
  export type PlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * The data used to create many Plans.
     */
    data: PlanCreateManyInput | PlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Plan update
   */
  export type PlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to update a Plan.
     */
    data: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
    /**
     * Choose, which Plan to update.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan updateMany
   */
  export type PlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to update.
     */
    limit?: number
  }

  /**
   * Plan updateManyAndReturn
   */
  export type PlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Plan upsert
   */
  export type PlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The filter to search for the Plan to update in case it exists.
     */
    where: PlanWhereUniqueInput
    /**
     * In case the Plan found by the `where` argument doesn't exist, create a new Plan with this data.
     */
    create: XOR<PlanCreateInput, PlanUncheckedCreateInput>
    /**
     * In case the Plan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
  }

  /**
   * Plan delete
   */
  export type PlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter which Plan to delete.
     */
    where: PlanWhereUniqueInput
  }

  /**
   * Plan deleteMany
   */
  export type PlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plans to delete
     */
    where?: PlanWhereInput
    /**
     * Limit how many Plans to delete.
     */
    limit?: number
  }

  /**
   * Plan.planGroup
   */
  export type Plan$planGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    where?: PlanGroupWhereInput
  }

  /**
   * Plan.sessions
   */
  export type Plan$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    where?: PlanSessionWhereInput
    orderBy?: PlanSessionOrderByWithRelationInput | PlanSessionOrderByWithRelationInput[]
    cursor?: PlanSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanSessionScalarFieldEnum | PlanSessionScalarFieldEnum[]
  }

  /**
   * Plan.activities
   */
  export type Plan$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Activity
     */
    omit?: ActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * Plan.invitations
   */
  export type Plan$invitationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    where?: PlanInvitationWhereInput
    orderBy?: PlanInvitationOrderByWithRelationInput | PlanInvitationOrderByWithRelationInput[]
    cursor?: PlanInvitationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanInvitationScalarFieldEnum | PlanInvitationScalarFieldEnum[]
  }

  /**
   * Plan.milestones
   */
  export type Plan$milestonesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    where?: PlanMilestoneWhereInput
    orderBy?: PlanMilestoneOrderByWithRelationInput | PlanMilestoneOrderByWithRelationInput[]
    cursor?: PlanMilestoneWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanMilestoneScalarFieldEnum | PlanMilestoneScalarFieldEnum[]
  }

  /**
   * Plan without action
   */
  export type PlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
  }


  /**
   * Model PlanSession
   */

  export type AggregatePlanSession = {
    _count: PlanSessionCountAggregateOutputType | null
    _avg: PlanSessionAvgAggregateOutputType | null
    _sum: PlanSessionSumAggregateOutputType | null
    _min: PlanSessionMinAggregateOutputType | null
    _max: PlanSessionMaxAggregateOutputType | null
  }

  export type PlanSessionAvgAggregateOutputType = {
    quantity: number | null
  }

  export type PlanSessionSumAggregateOutputType = {
    quantity: number | null
  }

  export type PlanSessionMinAggregateOutputType = {
    id: string | null
    planId: string | null
    isCoachSuggested: boolean | null
    activityId: string | null
    date: Date | null
    descriptiveGuide: string | null
    quantity: number | null
    createdAt: Date | null
  }

  export type PlanSessionMaxAggregateOutputType = {
    id: string | null
    planId: string | null
    isCoachSuggested: boolean | null
    activityId: string | null
    date: Date | null
    descriptiveGuide: string | null
    quantity: number | null
    createdAt: Date | null
  }

  export type PlanSessionCountAggregateOutputType = {
    id: number
    planId: number
    isCoachSuggested: number
    activityId: number
    date: number
    descriptiveGuide: number
    quantity: number
    createdAt: number
    _all: number
  }


  export type PlanSessionAvgAggregateInputType = {
    quantity?: true
  }

  export type PlanSessionSumAggregateInputType = {
    quantity?: true
  }

  export type PlanSessionMinAggregateInputType = {
    id?: true
    planId?: true
    isCoachSuggested?: true
    activityId?: true
    date?: true
    descriptiveGuide?: true
    quantity?: true
    createdAt?: true
  }

  export type PlanSessionMaxAggregateInputType = {
    id?: true
    planId?: true
    isCoachSuggested?: true
    activityId?: true
    date?: true
    descriptiveGuide?: true
    quantity?: true
    createdAt?: true
  }

  export type PlanSessionCountAggregateInputType = {
    id?: true
    planId?: true
    isCoachSuggested?: true
    activityId?: true
    date?: true
    descriptiveGuide?: true
    quantity?: true
    createdAt?: true
    _all?: true
  }

  export type PlanSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanSession to aggregate.
     */
    where?: PlanSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanSessions to fetch.
     */
    orderBy?: PlanSessionOrderByWithRelationInput | PlanSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlanSessions
    **/
    _count?: true | PlanSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanSessionMaxAggregateInputType
  }

  export type GetPlanSessionAggregateType<T extends PlanSessionAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanSession[P]>
      : GetScalarType<T[P], AggregatePlanSession[P]>
  }




  export type PlanSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanSessionWhereInput
    orderBy?: PlanSessionOrderByWithAggregationInput | PlanSessionOrderByWithAggregationInput[]
    by: PlanSessionScalarFieldEnum[] | PlanSessionScalarFieldEnum
    having?: PlanSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanSessionCountAggregateInputType | true
    _avg?: PlanSessionAvgAggregateInputType
    _sum?: PlanSessionSumAggregateInputType
    _min?: PlanSessionMinAggregateInputType
    _max?: PlanSessionMaxAggregateInputType
  }

  export type PlanSessionGroupByOutputType = {
    id: string
    planId: string
    isCoachSuggested: boolean
    activityId: string
    date: Date
    descriptiveGuide: string
    quantity: number
    createdAt: Date
    _count: PlanSessionCountAggregateOutputType | null
    _avg: PlanSessionAvgAggregateOutputType | null
    _sum: PlanSessionSumAggregateOutputType | null
    _min: PlanSessionMinAggregateOutputType | null
    _max: PlanSessionMaxAggregateOutputType | null
  }

  type GetPlanSessionGroupByPayload<T extends PlanSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanSessionGroupByOutputType[P]>
            : GetScalarType<T[P], PlanSessionGroupByOutputType[P]>
        }
      >
    >


  export type PlanSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    isCoachSuggested?: boolean
    activityId?: boolean
    date?: boolean
    descriptiveGuide?: boolean
    quantity?: boolean
    createdAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planSession"]>

  export type PlanSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    isCoachSuggested?: boolean
    activityId?: boolean
    date?: boolean
    descriptiveGuide?: boolean
    quantity?: boolean
    createdAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planSession"]>

  export type PlanSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    isCoachSuggested?: boolean
    activityId?: boolean
    date?: boolean
    descriptiveGuide?: boolean
    quantity?: boolean
    createdAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planSession"]>

  export type PlanSessionSelectScalar = {
    id?: boolean
    planId?: boolean
    isCoachSuggested?: boolean
    activityId?: boolean
    date?: boolean
    descriptiveGuide?: boolean
    quantity?: boolean
    createdAt?: boolean
  }

  export type PlanSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "planId" | "isCoachSuggested" | "activityId" | "date" | "descriptiveGuide" | "quantity" | "createdAt", ExtArgs["result"]["planSession"]>
  export type PlanSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }
  export type PlanSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }
  export type PlanSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }

  export type $PlanSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlanSession"
    objects: {
      plan: Prisma.$PlanPayload<ExtArgs>
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      planId: string
      isCoachSuggested: boolean
      activityId: string
      date: Date
      descriptiveGuide: string
      quantity: number
      createdAt: Date
    }, ExtArgs["result"]["planSession"]>
    composites: {}
  }

  type PlanSessionGetPayload<S extends boolean | null | undefined | PlanSessionDefaultArgs> = $Result.GetResult<Prisma.$PlanSessionPayload, S>

  type PlanSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlanSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlanSessionCountAggregateInputType | true
    }

  export interface PlanSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlanSession'], meta: { name: 'PlanSession' } }
    /**
     * Find zero or one PlanSession that matches the filter.
     * @param {PlanSessionFindUniqueArgs} args - Arguments to find a PlanSession
     * @example
     * // Get one PlanSession
     * const planSession = await prisma.planSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanSessionFindUniqueArgs>(args: SelectSubset<T, PlanSessionFindUniqueArgs<ExtArgs>>): Prisma__PlanSessionClient<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlanSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlanSessionFindUniqueOrThrowArgs} args - Arguments to find a PlanSession
     * @example
     * // Get one PlanSession
     * const planSession = await prisma.planSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanSessionClient<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanSessionFindFirstArgs} args - Arguments to find a PlanSession
     * @example
     * // Get one PlanSession
     * const planSession = await prisma.planSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanSessionFindFirstArgs>(args?: SelectSubset<T, PlanSessionFindFirstArgs<ExtArgs>>): Prisma__PlanSessionClient<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanSessionFindFirstOrThrowArgs} args - Arguments to find a PlanSession
     * @example
     * // Get one PlanSession
     * const planSession = await prisma.planSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanSessionClient<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlanSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlanSessions
     * const planSessions = await prisma.planSession.findMany()
     * 
     * // Get first 10 PlanSessions
     * const planSessions = await prisma.planSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planSessionWithIdOnly = await prisma.planSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanSessionFindManyArgs>(args?: SelectSubset<T, PlanSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlanSession.
     * @param {PlanSessionCreateArgs} args - Arguments to create a PlanSession.
     * @example
     * // Create one PlanSession
     * const PlanSession = await prisma.planSession.create({
     *   data: {
     *     // ... data to create a PlanSession
     *   }
     * })
     * 
     */
    create<T extends PlanSessionCreateArgs>(args: SelectSubset<T, PlanSessionCreateArgs<ExtArgs>>): Prisma__PlanSessionClient<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlanSessions.
     * @param {PlanSessionCreateManyArgs} args - Arguments to create many PlanSessions.
     * @example
     * // Create many PlanSessions
     * const planSession = await prisma.planSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanSessionCreateManyArgs>(args?: SelectSubset<T, PlanSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlanSessions and returns the data saved in the database.
     * @param {PlanSessionCreateManyAndReturnArgs} args - Arguments to create many PlanSessions.
     * @example
     * // Create many PlanSessions
     * const planSession = await prisma.planSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlanSessions and only return the `id`
     * const planSessionWithIdOnly = await prisma.planSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlanSession.
     * @param {PlanSessionDeleteArgs} args - Arguments to delete one PlanSession.
     * @example
     * // Delete one PlanSession
     * const PlanSession = await prisma.planSession.delete({
     *   where: {
     *     // ... filter to delete one PlanSession
     *   }
     * })
     * 
     */
    delete<T extends PlanSessionDeleteArgs>(args: SelectSubset<T, PlanSessionDeleteArgs<ExtArgs>>): Prisma__PlanSessionClient<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlanSession.
     * @param {PlanSessionUpdateArgs} args - Arguments to update one PlanSession.
     * @example
     * // Update one PlanSession
     * const planSession = await prisma.planSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanSessionUpdateArgs>(args: SelectSubset<T, PlanSessionUpdateArgs<ExtArgs>>): Prisma__PlanSessionClient<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlanSessions.
     * @param {PlanSessionDeleteManyArgs} args - Arguments to filter PlanSessions to delete.
     * @example
     * // Delete a few PlanSessions
     * const { count } = await prisma.planSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanSessionDeleteManyArgs>(args?: SelectSubset<T, PlanSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlanSessions
     * const planSession = await prisma.planSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanSessionUpdateManyArgs>(args: SelectSubset<T, PlanSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanSessions and returns the data updated in the database.
     * @param {PlanSessionUpdateManyAndReturnArgs} args - Arguments to update many PlanSessions.
     * @example
     * // Update many PlanSessions
     * const planSession = await prisma.planSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlanSessions and only return the `id`
     * const planSessionWithIdOnly = await prisma.planSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlanSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, PlanSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlanSession.
     * @param {PlanSessionUpsertArgs} args - Arguments to update or create a PlanSession.
     * @example
     * // Update or create a PlanSession
     * const planSession = await prisma.planSession.upsert({
     *   create: {
     *     // ... data to create a PlanSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlanSession we want to update
     *   }
     * })
     */
    upsert<T extends PlanSessionUpsertArgs>(args: SelectSubset<T, PlanSessionUpsertArgs<ExtArgs>>): Prisma__PlanSessionClient<$Result.GetResult<Prisma.$PlanSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlanSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanSessionCountArgs} args - Arguments to filter PlanSessions to count.
     * @example
     * // Count the number of PlanSessions
     * const count = await prisma.planSession.count({
     *   where: {
     *     // ... the filter for the PlanSessions we want to count
     *   }
     * })
    **/
    count<T extends PlanSessionCountArgs>(
      args?: Subset<T, PlanSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlanSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanSessionAggregateArgs>(args: Subset<T, PlanSessionAggregateArgs>): Prisma.PrismaPromise<GetPlanSessionAggregateType<T>>

    /**
     * Group by PlanSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanSessionGroupByArgs['orderBy'] }
        : { orderBy?: PlanSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlanSession model
   */
  readonly fields: PlanSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlanSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlanSession model
   */
  interface PlanSessionFieldRefs {
    readonly id: FieldRef<"PlanSession", 'String'>
    readonly planId: FieldRef<"PlanSession", 'String'>
    readonly isCoachSuggested: FieldRef<"PlanSession", 'Boolean'>
    readonly activityId: FieldRef<"PlanSession", 'String'>
    readonly date: FieldRef<"PlanSession", 'DateTime'>
    readonly descriptiveGuide: FieldRef<"PlanSession", 'String'>
    readonly quantity: FieldRef<"PlanSession", 'Int'>
    readonly createdAt: FieldRef<"PlanSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlanSession findUnique
   */
  export type PlanSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * Filter, which PlanSession to fetch.
     */
    where: PlanSessionWhereUniqueInput
  }

  /**
   * PlanSession findUniqueOrThrow
   */
  export type PlanSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * Filter, which PlanSession to fetch.
     */
    where: PlanSessionWhereUniqueInput
  }

  /**
   * PlanSession findFirst
   */
  export type PlanSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * Filter, which PlanSession to fetch.
     */
    where?: PlanSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanSessions to fetch.
     */
    orderBy?: PlanSessionOrderByWithRelationInput | PlanSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanSessions.
     */
    cursor?: PlanSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanSessions.
     */
    distinct?: PlanSessionScalarFieldEnum | PlanSessionScalarFieldEnum[]
  }

  /**
   * PlanSession findFirstOrThrow
   */
  export type PlanSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * Filter, which PlanSession to fetch.
     */
    where?: PlanSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanSessions to fetch.
     */
    orderBy?: PlanSessionOrderByWithRelationInput | PlanSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanSessions.
     */
    cursor?: PlanSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanSessions.
     */
    distinct?: PlanSessionScalarFieldEnum | PlanSessionScalarFieldEnum[]
  }

  /**
   * PlanSession findMany
   */
  export type PlanSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * Filter, which PlanSessions to fetch.
     */
    where?: PlanSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanSessions to fetch.
     */
    orderBy?: PlanSessionOrderByWithRelationInput | PlanSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlanSessions.
     */
    cursor?: PlanSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanSessions.
     */
    skip?: number
    distinct?: PlanSessionScalarFieldEnum | PlanSessionScalarFieldEnum[]
  }

  /**
   * PlanSession create
   */
  export type PlanSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a PlanSession.
     */
    data: XOR<PlanSessionCreateInput, PlanSessionUncheckedCreateInput>
  }

  /**
   * PlanSession createMany
   */
  export type PlanSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlanSessions.
     */
    data: PlanSessionCreateManyInput | PlanSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlanSession createManyAndReturn
   */
  export type PlanSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * The data used to create many PlanSessions.
     */
    data: PlanSessionCreateManyInput | PlanSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanSession update
   */
  export type PlanSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a PlanSession.
     */
    data: XOR<PlanSessionUpdateInput, PlanSessionUncheckedUpdateInput>
    /**
     * Choose, which PlanSession to update.
     */
    where: PlanSessionWhereUniqueInput
  }

  /**
   * PlanSession updateMany
   */
  export type PlanSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlanSessions.
     */
    data: XOR<PlanSessionUpdateManyMutationInput, PlanSessionUncheckedUpdateManyInput>
    /**
     * Filter which PlanSessions to update
     */
    where?: PlanSessionWhereInput
    /**
     * Limit how many PlanSessions to update.
     */
    limit?: number
  }

  /**
   * PlanSession updateManyAndReturn
   */
  export type PlanSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * The data used to update PlanSessions.
     */
    data: XOR<PlanSessionUpdateManyMutationInput, PlanSessionUncheckedUpdateManyInput>
    /**
     * Filter which PlanSessions to update
     */
    where?: PlanSessionWhereInput
    /**
     * Limit how many PlanSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanSession upsert
   */
  export type PlanSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the PlanSession to update in case it exists.
     */
    where: PlanSessionWhereUniqueInput
    /**
     * In case the PlanSession found by the `where` argument doesn't exist, create a new PlanSession with this data.
     */
    create: XOR<PlanSessionCreateInput, PlanSessionUncheckedCreateInput>
    /**
     * In case the PlanSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanSessionUpdateInput, PlanSessionUncheckedUpdateInput>
  }

  /**
   * PlanSession delete
   */
  export type PlanSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
    /**
     * Filter which PlanSession to delete.
     */
    where: PlanSessionWhereUniqueInput
  }

  /**
   * PlanSession deleteMany
   */
  export type PlanSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanSessions to delete
     */
    where?: PlanSessionWhereInput
    /**
     * Limit how many PlanSessions to delete.
     */
    limit?: number
  }

  /**
   * PlanSession without action
   */
  export type PlanSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanSession
     */
    select?: PlanSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanSession
     */
    omit?: PlanSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanSessionInclude<ExtArgs> | null
  }


  /**
   * Model PlanMilestone
   */

  export type AggregatePlanMilestone = {
    _count: PlanMilestoneCountAggregateOutputType | null
    _avg: PlanMilestoneAvgAggregateOutputType | null
    _sum: PlanMilestoneSumAggregateOutputType | null
    _min: PlanMilestoneMinAggregateOutputType | null
    _max: PlanMilestoneMaxAggregateOutputType | null
  }

  export type PlanMilestoneAvgAggregateOutputType = {
    progress: number | null
  }

  export type PlanMilestoneSumAggregateOutputType = {
    progress: number | null
  }

  export type PlanMilestoneMinAggregateOutputType = {
    id: string | null
    planId: string | null
    date: Date | null
    description: string | null
    progress: number | null
    createdAt: Date | null
  }

  export type PlanMilestoneMaxAggregateOutputType = {
    id: string | null
    planId: string | null
    date: Date | null
    description: string | null
    progress: number | null
    createdAt: Date | null
  }

  export type PlanMilestoneCountAggregateOutputType = {
    id: number
    planId: number
    date: number
    description: number
    progress: number
    criteria: number
    createdAt: number
    _all: number
  }


  export type PlanMilestoneAvgAggregateInputType = {
    progress?: true
  }

  export type PlanMilestoneSumAggregateInputType = {
    progress?: true
  }

  export type PlanMilestoneMinAggregateInputType = {
    id?: true
    planId?: true
    date?: true
    description?: true
    progress?: true
    createdAt?: true
  }

  export type PlanMilestoneMaxAggregateInputType = {
    id?: true
    planId?: true
    date?: true
    description?: true
    progress?: true
    createdAt?: true
  }

  export type PlanMilestoneCountAggregateInputType = {
    id?: true
    planId?: true
    date?: true
    description?: true
    progress?: true
    criteria?: true
    createdAt?: true
    _all?: true
  }

  export type PlanMilestoneAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanMilestone to aggregate.
     */
    where?: PlanMilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanMilestones to fetch.
     */
    orderBy?: PlanMilestoneOrderByWithRelationInput | PlanMilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanMilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanMilestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanMilestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlanMilestones
    **/
    _count?: true | PlanMilestoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanMilestoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanMilestoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMilestoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMilestoneMaxAggregateInputType
  }

  export type GetPlanMilestoneAggregateType<T extends PlanMilestoneAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanMilestone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanMilestone[P]>
      : GetScalarType<T[P], AggregatePlanMilestone[P]>
  }




  export type PlanMilestoneGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanMilestoneWhereInput
    orderBy?: PlanMilestoneOrderByWithAggregationInput | PlanMilestoneOrderByWithAggregationInput[]
    by: PlanMilestoneScalarFieldEnum[] | PlanMilestoneScalarFieldEnum
    having?: PlanMilestoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanMilestoneCountAggregateInputType | true
    _avg?: PlanMilestoneAvgAggregateInputType
    _sum?: PlanMilestoneSumAggregateInputType
    _min?: PlanMilestoneMinAggregateInputType
    _max?: PlanMilestoneMaxAggregateInputType
  }

  export type PlanMilestoneGroupByOutputType = {
    id: string
    planId: string
    date: Date
    description: string
    progress: number | null
    criteria: JsonValue | null
    createdAt: Date
    _count: PlanMilestoneCountAggregateOutputType | null
    _avg: PlanMilestoneAvgAggregateOutputType | null
    _sum: PlanMilestoneSumAggregateOutputType | null
    _min: PlanMilestoneMinAggregateOutputType | null
    _max: PlanMilestoneMaxAggregateOutputType | null
  }

  type GetPlanMilestoneGroupByPayload<T extends PlanMilestoneGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanMilestoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanMilestoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanMilestoneGroupByOutputType[P]>
            : GetScalarType<T[P], PlanMilestoneGroupByOutputType[P]>
        }
      >
    >


  export type PlanMilestoneSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    date?: boolean
    description?: boolean
    progress?: boolean
    criteria?: boolean
    createdAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planMilestone"]>

  export type PlanMilestoneSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    date?: boolean
    description?: boolean
    progress?: boolean
    criteria?: boolean
    createdAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planMilestone"]>

  export type PlanMilestoneSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    date?: boolean
    description?: boolean
    progress?: boolean
    criteria?: boolean
    createdAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planMilestone"]>

  export type PlanMilestoneSelectScalar = {
    id?: boolean
    planId?: boolean
    date?: boolean
    description?: boolean
    progress?: boolean
    criteria?: boolean
    createdAt?: boolean
  }

  export type PlanMilestoneOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "planId" | "date" | "description" | "progress" | "criteria" | "createdAt", ExtArgs["result"]["planMilestone"]>
  export type PlanMilestoneInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }
  export type PlanMilestoneIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }
  export type PlanMilestoneIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }

  export type $PlanMilestonePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlanMilestone"
    objects: {
      plan: Prisma.$PlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      planId: string
      date: Date
      description: string
      progress: number | null
      criteria: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["planMilestone"]>
    composites: {}
  }

  type PlanMilestoneGetPayload<S extends boolean | null | undefined | PlanMilestoneDefaultArgs> = $Result.GetResult<Prisma.$PlanMilestonePayload, S>

  type PlanMilestoneCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlanMilestoneFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlanMilestoneCountAggregateInputType | true
    }

  export interface PlanMilestoneDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlanMilestone'], meta: { name: 'PlanMilestone' } }
    /**
     * Find zero or one PlanMilestone that matches the filter.
     * @param {PlanMilestoneFindUniqueArgs} args - Arguments to find a PlanMilestone
     * @example
     * // Get one PlanMilestone
     * const planMilestone = await prisma.planMilestone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanMilestoneFindUniqueArgs>(args: SelectSubset<T, PlanMilestoneFindUniqueArgs<ExtArgs>>): Prisma__PlanMilestoneClient<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlanMilestone that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlanMilestoneFindUniqueOrThrowArgs} args - Arguments to find a PlanMilestone
     * @example
     * // Get one PlanMilestone
     * const planMilestone = await prisma.planMilestone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanMilestoneFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanMilestoneFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanMilestoneClient<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanMilestone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMilestoneFindFirstArgs} args - Arguments to find a PlanMilestone
     * @example
     * // Get one PlanMilestone
     * const planMilestone = await prisma.planMilestone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanMilestoneFindFirstArgs>(args?: SelectSubset<T, PlanMilestoneFindFirstArgs<ExtArgs>>): Prisma__PlanMilestoneClient<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanMilestone that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMilestoneFindFirstOrThrowArgs} args - Arguments to find a PlanMilestone
     * @example
     * // Get one PlanMilestone
     * const planMilestone = await prisma.planMilestone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanMilestoneFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanMilestoneFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanMilestoneClient<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlanMilestones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMilestoneFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlanMilestones
     * const planMilestones = await prisma.planMilestone.findMany()
     * 
     * // Get first 10 PlanMilestones
     * const planMilestones = await prisma.planMilestone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planMilestoneWithIdOnly = await prisma.planMilestone.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanMilestoneFindManyArgs>(args?: SelectSubset<T, PlanMilestoneFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlanMilestone.
     * @param {PlanMilestoneCreateArgs} args - Arguments to create a PlanMilestone.
     * @example
     * // Create one PlanMilestone
     * const PlanMilestone = await prisma.planMilestone.create({
     *   data: {
     *     // ... data to create a PlanMilestone
     *   }
     * })
     * 
     */
    create<T extends PlanMilestoneCreateArgs>(args: SelectSubset<T, PlanMilestoneCreateArgs<ExtArgs>>): Prisma__PlanMilestoneClient<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlanMilestones.
     * @param {PlanMilestoneCreateManyArgs} args - Arguments to create many PlanMilestones.
     * @example
     * // Create many PlanMilestones
     * const planMilestone = await prisma.planMilestone.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanMilestoneCreateManyArgs>(args?: SelectSubset<T, PlanMilestoneCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlanMilestones and returns the data saved in the database.
     * @param {PlanMilestoneCreateManyAndReturnArgs} args - Arguments to create many PlanMilestones.
     * @example
     * // Create many PlanMilestones
     * const planMilestone = await prisma.planMilestone.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlanMilestones and only return the `id`
     * const planMilestoneWithIdOnly = await prisma.planMilestone.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanMilestoneCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanMilestoneCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlanMilestone.
     * @param {PlanMilestoneDeleteArgs} args - Arguments to delete one PlanMilestone.
     * @example
     * // Delete one PlanMilestone
     * const PlanMilestone = await prisma.planMilestone.delete({
     *   where: {
     *     // ... filter to delete one PlanMilestone
     *   }
     * })
     * 
     */
    delete<T extends PlanMilestoneDeleteArgs>(args: SelectSubset<T, PlanMilestoneDeleteArgs<ExtArgs>>): Prisma__PlanMilestoneClient<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlanMilestone.
     * @param {PlanMilestoneUpdateArgs} args - Arguments to update one PlanMilestone.
     * @example
     * // Update one PlanMilestone
     * const planMilestone = await prisma.planMilestone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanMilestoneUpdateArgs>(args: SelectSubset<T, PlanMilestoneUpdateArgs<ExtArgs>>): Prisma__PlanMilestoneClient<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlanMilestones.
     * @param {PlanMilestoneDeleteManyArgs} args - Arguments to filter PlanMilestones to delete.
     * @example
     * // Delete a few PlanMilestones
     * const { count } = await prisma.planMilestone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanMilestoneDeleteManyArgs>(args?: SelectSubset<T, PlanMilestoneDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanMilestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMilestoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlanMilestones
     * const planMilestone = await prisma.planMilestone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanMilestoneUpdateManyArgs>(args: SelectSubset<T, PlanMilestoneUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanMilestones and returns the data updated in the database.
     * @param {PlanMilestoneUpdateManyAndReturnArgs} args - Arguments to update many PlanMilestones.
     * @example
     * // Update many PlanMilestones
     * const planMilestone = await prisma.planMilestone.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlanMilestones and only return the `id`
     * const planMilestoneWithIdOnly = await prisma.planMilestone.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlanMilestoneUpdateManyAndReturnArgs>(args: SelectSubset<T, PlanMilestoneUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlanMilestone.
     * @param {PlanMilestoneUpsertArgs} args - Arguments to update or create a PlanMilestone.
     * @example
     * // Update or create a PlanMilestone
     * const planMilestone = await prisma.planMilestone.upsert({
     *   create: {
     *     // ... data to create a PlanMilestone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlanMilestone we want to update
     *   }
     * })
     */
    upsert<T extends PlanMilestoneUpsertArgs>(args: SelectSubset<T, PlanMilestoneUpsertArgs<ExtArgs>>): Prisma__PlanMilestoneClient<$Result.GetResult<Prisma.$PlanMilestonePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlanMilestones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMilestoneCountArgs} args - Arguments to filter PlanMilestones to count.
     * @example
     * // Count the number of PlanMilestones
     * const count = await prisma.planMilestone.count({
     *   where: {
     *     // ... the filter for the PlanMilestones we want to count
     *   }
     * })
    **/
    count<T extends PlanMilestoneCountArgs>(
      args?: Subset<T, PlanMilestoneCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanMilestoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlanMilestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMilestoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanMilestoneAggregateArgs>(args: Subset<T, PlanMilestoneAggregateArgs>): Prisma.PrismaPromise<GetPlanMilestoneAggregateType<T>>

    /**
     * Group by PlanMilestone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanMilestoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanMilestoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanMilestoneGroupByArgs['orderBy'] }
        : { orderBy?: PlanMilestoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanMilestoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanMilestoneGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlanMilestone model
   */
  readonly fields: PlanMilestoneFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlanMilestone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanMilestoneClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlanMilestone model
   */
  interface PlanMilestoneFieldRefs {
    readonly id: FieldRef<"PlanMilestone", 'String'>
    readonly planId: FieldRef<"PlanMilestone", 'String'>
    readonly date: FieldRef<"PlanMilestone", 'DateTime'>
    readonly description: FieldRef<"PlanMilestone", 'String'>
    readonly progress: FieldRef<"PlanMilestone", 'Int'>
    readonly criteria: FieldRef<"PlanMilestone", 'Json'>
    readonly createdAt: FieldRef<"PlanMilestone", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlanMilestone findUnique
   */
  export type PlanMilestoneFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * Filter, which PlanMilestone to fetch.
     */
    where: PlanMilestoneWhereUniqueInput
  }

  /**
   * PlanMilestone findUniqueOrThrow
   */
  export type PlanMilestoneFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * Filter, which PlanMilestone to fetch.
     */
    where: PlanMilestoneWhereUniqueInput
  }

  /**
   * PlanMilestone findFirst
   */
  export type PlanMilestoneFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * Filter, which PlanMilestone to fetch.
     */
    where?: PlanMilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanMilestones to fetch.
     */
    orderBy?: PlanMilestoneOrderByWithRelationInput | PlanMilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanMilestones.
     */
    cursor?: PlanMilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanMilestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanMilestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanMilestones.
     */
    distinct?: PlanMilestoneScalarFieldEnum | PlanMilestoneScalarFieldEnum[]
  }

  /**
   * PlanMilestone findFirstOrThrow
   */
  export type PlanMilestoneFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * Filter, which PlanMilestone to fetch.
     */
    where?: PlanMilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanMilestones to fetch.
     */
    orderBy?: PlanMilestoneOrderByWithRelationInput | PlanMilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanMilestones.
     */
    cursor?: PlanMilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanMilestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanMilestones.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanMilestones.
     */
    distinct?: PlanMilestoneScalarFieldEnum | PlanMilestoneScalarFieldEnum[]
  }

  /**
   * PlanMilestone findMany
   */
  export type PlanMilestoneFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * Filter, which PlanMilestones to fetch.
     */
    where?: PlanMilestoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanMilestones to fetch.
     */
    orderBy?: PlanMilestoneOrderByWithRelationInput | PlanMilestoneOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlanMilestones.
     */
    cursor?: PlanMilestoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanMilestones from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanMilestones.
     */
    skip?: number
    distinct?: PlanMilestoneScalarFieldEnum | PlanMilestoneScalarFieldEnum[]
  }

  /**
   * PlanMilestone create
   */
  export type PlanMilestoneCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * The data needed to create a PlanMilestone.
     */
    data: XOR<PlanMilestoneCreateInput, PlanMilestoneUncheckedCreateInput>
  }

  /**
   * PlanMilestone createMany
   */
  export type PlanMilestoneCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlanMilestones.
     */
    data: PlanMilestoneCreateManyInput | PlanMilestoneCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlanMilestone createManyAndReturn
   */
  export type PlanMilestoneCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * The data used to create many PlanMilestones.
     */
    data: PlanMilestoneCreateManyInput | PlanMilestoneCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanMilestone update
   */
  export type PlanMilestoneUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * The data needed to update a PlanMilestone.
     */
    data: XOR<PlanMilestoneUpdateInput, PlanMilestoneUncheckedUpdateInput>
    /**
     * Choose, which PlanMilestone to update.
     */
    where: PlanMilestoneWhereUniqueInput
  }

  /**
   * PlanMilestone updateMany
   */
  export type PlanMilestoneUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlanMilestones.
     */
    data: XOR<PlanMilestoneUpdateManyMutationInput, PlanMilestoneUncheckedUpdateManyInput>
    /**
     * Filter which PlanMilestones to update
     */
    where?: PlanMilestoneWhereInput
    /**
     * Limit how many PlanMilestones to update.
     */
    limit?: number
  }

  /**
   * PlanMilestone updateManyAndReturn
   */
  export type PlanMilestoneUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * The data used to update PlanMilestones.
     */
    data: XOR<PlanMilestoneUpdateManyMutationInput, PlanMilestoneUncheckedUpdateManyInput>
    /**
     * Filter which PlanMilestones to update
     */
    where?: PlanMilestoneWhereInput
    /**
     * Limit how many PlanMilestones to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanMilestone upsert
   */
  export type PlanMilestoneUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * The filter to search for the PlanMilestone to update in case it exists.
     */
    where: PlanMilestoneWhereUniqueInput
    /**
     * In case the PlanMilestone found by the `where` argument doesn't exist, create a new PlanMilestone with this data.
     */
    create: XOR<PlanMilestoneCreateInput, PlanMilestoneUncheckedCreateInput>
    /**
     * In case the PlanMilestone was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanMilestoneUpdateInput, PlanMilestoneUncheckedUpdateInput>
  }

  /**
   * PlanMilestone delete
   */
  export type PlanMilestoneDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
    /**
     * Filter which PlanMilestone to delete.
     */
    where: PlanMilestoneWhereUniqueInput
  }

  /**
   * PlanMilestone deleteMany
   */
  export type PlanMilestoneDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanMilestones to delete
     */
    where?: PlanMilestoneWhereInput
    /**
     * Limit how many PlanMilestones to delete.
     */
    limit?: number
  }

  /**
   * PlanMilestone without action
   */
  export type PlanMilestoneDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanMilestone
     */
    select?: PlanMilestoneSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanMilestone
     */
    omit?: PlanMilestoneOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanMilestoneInclude<ExtArgs> | null
  }


  /**
   * Model PlanGroup
   */

  export type AggregatePlanGroup = {
    _count: PlanGroupCountAggregateOutputType | null
    _min: PlanGroupMinAggregateOutputType | null
    _max: PlanGroupMaxAggregateOutputType | null
  }

  export type PlanGroupMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
  }

  export type PlanGroupMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
  }

  export type PlanGroupCountAggregateOutputType = {
    id: number
    createdAt: number
    _all: number
  }


  export type PlanGroupMinAggregateInputType = {
    id?: true
    createdAt?: true
  }

  export type PlanGroupMaxAggregateInputType = {
    id?: true
    createdAt?: true
  }

  export type PlanGroupCountAggregateInputType = {
    id?: true
    createdAt?: true
    _all?: true
  }

  export type PlanGroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanGroup to aggregate.
     */
    where?: PlanGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanGroups to fetch.
     */
    orderBy?: PlanGroupOrderByWithRelationInput | PlanGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlanGroups
    **/
    _count?: true | PlanGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanGroupMaxAggregateInputType
  }

  export type GetPlanGroupAggregateType<T extends PlanGroupAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanGroup[P]>
      : GetScalarType<T[P], AggregatePlanGroup[P]>
  }




  export type PlanGroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanGroupWhereInput
    orderBy?: PlanGroupOrderByWithAggregationInput | PlanGroupOrderByWithAggregationInput[]
    by: PlanGroupScalarFieldEnum[] | PlanGroupScalarFieldEnum
    having?: PlanGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanGroupCountAggregateInputType | true
    _min?: PlanGroupMinAggregateInputType
    _max?: PlanGroupMaxAggregateInputType
  }

  export type PlanGroupGroupByOutputType = {
    id: string
    createdAt: Date
    _count: PlanGroupCountAggregateOutputType | null
    _min: PlanGroupMinAggregateOutputType | null
    _max: PlanGroupMaxAggregateOutputType | null
  }

  type GetPlanGroupGroupByPayload<T extends PlanGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanGroupGroupByOutputType[P]>
            : GetScalarType<T[P], PlanGroupGroupByOutputType[P]>
        }
      >
    >


  export type PlanGroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    members?: boolean | PlanGroup$membersArgs<ExtArgs>
    plans?: boolean | PlanGroup$plansArgs<ExtArgs>
    _count?: boolean | PlanGroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planGroup"]>

  export type PlanGroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["planGroup"]>

  export type PlanGroupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["planGroup"]>

  export type PlanGroupSelectScalar = {
    id?: boolean
    createdAt?: boolean
  }

  export type PlanGroupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt", ExtArgs["result"]["planGroup"]>
  export type PlanGroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | PlanGroup$membersArgs<ExtArgs>
    plans?: boolean | PlanGroup$plansArgs<ExtArgs>
    _count?: boolean | PlanGroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlanGroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PlanGroupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlanGroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlanGroup"
    objects: {
      members: Prisma.$UserPayload<ExtArgs>[]
      plans: Prisma.$PlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
    }, ExtArgs["result"]["planGroup"]>
    composites: {}
  }

  type PlanGroupGetPayload<S extends boolean | null | undefined | PlanGroupDefaultArgs> = $Result.GetResult<Prisma.$PlanGroupPayload, S>

  type PlanGroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlanGroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlanGroupCountAggregateInputType | true
    }

  export interface PlanGroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlanGroup'], meta: { name: 'PlanGroup' } }
    /**
     * Find zero or one PlanGroup that matches the filter.
     * @param {PlanGroupFindUniqueArgs} args - Arguments to find a PlanGroup
     * @example
     * // Get one PlanGroup
     * const planGroup = await prisma.planGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanGroupFindUniqueArgs>(args: SelectSubset<T, PlanGroupFindUniqueArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlanGroup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlanGroupFindUniqueOrThrowArgs} args - Arguments to find a PlanGroup
     * @example
     * // Get one PlanGroup
     * const planGroup = await prisma.planGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanGroupFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanGroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupFindFirstArgs} args - Arguments to find a PlanGroup
     * @example
     * // Get one PlanGroup
     * const planGroup = await prisma.planGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanGroupFindFirstArgs>(args?: SelectSubset<T, PlanGroupFindFirstArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanGroup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupFindFirstOrThrowArgs} args - Arguments to find a PlanGroup
     * @example
     * // Get one PlanGroup
     * const planGroup = await prisma.planGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanGroupFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanGroupFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlanGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlanGroups
     * const planGroups = await prisma.planGroup.findMany()
     * 
     * // Get first 10 PlanGroups
     * const planGroups = await prisma.planGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planGroupWithIdOnly = await prisma.planGroup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanGroupFindManyArgs>(args?: SelectSubset<T, PlanGroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlanGroup.
     * @param {PlanGroupCreateArgs} args - Arguments to create a PlanGroup.
     * @example
     * // Create one PlanGroup
     * const PlanGroup = await prisma.planGroup.create({
     *   data: {
     *     // ... data to create a PlanGroup
     *   }
     * })
     * 
     */
    create<T extends PlanGroupCreateArgs>(args: SelectSubset<T, PlanGroupCreateArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlanGroups.
     * @param {PlanGroupCreateManyArgs} args - Arguments to create many PlanGroups.
     * @example
     * // Create many PlanGroups
     * const planGroup = await prisma.planGroup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanGroupCreateManyArgs>(args?: SelectSubset<T, PlanGroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlanGroups and returns the data saved in the database.
     * @param {PlanGroupCreateManyAndReturnArgs} args - Arguments to create many PlanGroups.
     * @example
     * // Create many PlanGroups
     * const planGroup = await prisma.planGroup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlanGroups and only return the `id`
     * const planGroupWithIdOnly = await prisma.planGroup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanGroupCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanGroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlanGroup.
     * @param {PlanGroupDeleteArgs} args - Arguments to delete one PlanGroup.
     * @example
     * // Delete one PlanGroup
     * const PlanGroup = await prisma.planGroup.delete({
     *   where: {
     *     // ... filter to delete one PlanGroup
     *   }
     * })
     * 
     */
    delete<T extends PlanGroupDeleteArgs>(args: SelectSubset<T, PlanGroupDeleteArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlanGroup.
     * @param {PlanGroupUpdateArgs} args - Arguments to update one PlanGroup.
     * @example
     * // Update one PlanGroup
     * const planGroup = await prisma.planGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanGroupUpdateArgs>(args: SelectSubset<T, PlanGroupUpdateArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlanGroups.
     * @param {PlanGroupDeleteManyArgs} args - Arguments to filter PlanGroups to delete.
     * @example
     * // Delete a few PlanGroups
     * const { count } = await prisma.planGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanGroupDeleteManyArgs>(args?: SelectSubset<T, PlanGroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlanGroups
     * const planGroup = await prisma.planGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanGroupUpdateManyArgs>(args: SelectSubset<T, PlanGroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanGroups and returns the data updated in the database.
     * @param {PlanGroupUpdateManyAndReturnArgs} args - Arguments to update many PlanGroups.
     * @example
     * // Update many PlanGroups
     * const planGroup = await prisma.planGroup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlanGroups and only return the `id`
     * const planGroupWithIdOnly = await prisma.planGroup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlanGroupUpdateManyAndReturnArgs>(args: SelectSubset<T, PlanGroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlanGroup.
     * @param {PlanGroupUpsertArgs} args - Arguments to update or create a PlanGroup.
     * @example
     * // Update or create a PlanGroup
     * const planGroup = await prisma.planGroup.upsert({
     *   create: {
     *     // ... data to create a PlanGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlanGroup we want to update
     *   }
     * })
     */
    upsert<T extends PlanGroupUpsertArgs>(args: SelectSubset<T, PlanGroupUpsertArgs<ExtArgs>>): Prisma__PlanGroupClient<$Result.GetResult<Prisma.$PlanGroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlanGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupCountArgs} args - Arguments to filter PlanGroups to count.
     * @example
     * // Count the number of PlanGroups
     * const count = await prisma.planGroup.count({
     *   where: {
     *     // ... the filter for the PlanGroups we want to count
     *   }
     * })
    **/
    count<T extends PlanGroupCountArgs>(
      args?: Subset<T, PlanGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlanGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanGroupAggregateArgs>(args: Subset<T, PlanGroupAggregateArgs>): Prisma.PrismaPromise<GetPlanGroupAggregateType<T>>

    /**
     * Group by PlanGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanGroupGroupByArgs['orderBy'] }
        : { orderBy?: PlanGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlanGroup model
   */
  readonly fields: PlanGroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlanGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanGroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends PlanGroup$membersArgs<ExtArgs> = {}>(args?: Subset<T, PlanGroup$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    plans<T extends PlanGroup$plansArgs<ExtArgs> = {}>(args?: Subset<T, PlanGroup$plansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlanGroup model
   */
  interface PlanGroupFieldRefs {
    readonly id: FieldRef<"PlanGroup", 'String'>
    readonly createdAt: FieldRef<"PlanGroup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlanGroup findUnique
   */
  export type PlanGroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlanGroup to fetch.
     */
    where: PlanGroupWhereUniqueInput
  }

  /**
   * PlanGroup findUniqueOrThrow
   */
  export type PlanGroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlanGroup to fetch.
     */
    where: PlanGroupWhereUniqueInput
  }

  /**
   * PlanGroup findFirst
   */
  export type PlanGroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlanGroup to fetch.
     */
    where?: PlanGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanGroups to fetch.
     */
    orderBy?: PlanGroupOrderByWithRelationInput | PlanGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanGroups.
     */
    cursor?: PlanGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanGroups.
     */
    distinct?: PlanGroupScalarFieldEnum | PlanGroupScalarFieldEnum[]
  }

  /**
   * PlanGroup findFirstOrThrow
   */
  export type PlanGroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlanGroup to fetch.
     */
    where?: PlanGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanGroups to fetch.
     */
    orderBy?: PlanGroupOrderByWithRelationInput | PlanGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanGroups.
     */
    cursor?: PlanGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanGroups.
     */
    distinct?: PlanGroupScalarFieldEnum | PlanGroupScalarFieldEnum[]
  }

  /**
   * PlanGroup findMany
   */
  export type PlanGroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * Filter, which PlanGroups to fetch.
     */
    where?: PlanGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanGroups to fetch.
     */
    orderBy?: PlanGroupOrderByWithRelationInput | PlanGroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlanGroups.
     */
    cursor?: PlanGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanGroups.
     */
    skip?: number
    distinct?: PlanGroupScalarFieldEnum | PlanGroupScalarFieldEnum[]
  }

  /**
   * PlanGroup create
   */
  export type PlanGroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * The data needed to create a PlanGroup.
     */
    data?: XOR<PlanGroupCreateInput, PlanGroupUncheckedCreateInput>
  }

  /**
   * PlanGroup createMany
   */
  export type PlanGroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlanGroups.
     */
    data: PlanGroupCreateManyInput | PlanGroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlanGroup createManyAndReturn
   */
  export type PlanGroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * The data used to create many PlanGroups.
     */
    data: PlanGroupCreateManyInput | PlanGroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlanGroup update
   */
  export type PlanGroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * The data needed to update a PlanGroup.
     */
    data: XOR<PlanGroupUpdateInput, PlanGroupUncheckedUpdateInput>
    /**
     * Choose, which PlanGroup to update.
     */
    where: PlanGroupWhereUniqueInput
  }

  /**
   * PlanGroup updateMany
   */
  export type PlanGroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlanGroups.
     */
    data: XOR<PlanGroupUpdateManyMutationInput, PlanGroupUncheckedUpdateManyInput>
    /**
     * Filter which PlanGroups to update
     */
    where?: PlanGroupWhereInput
    /**
     * Limit how many PlanGroups to update.
     */
    limit?: number
  }

  /**
   * PlanGroup updateManyAndReturn
   */
  export type PlanGroupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * The data used to update PlanGroups.
     */
    data: XOR<PlanGroupUpdateManyMutationInput, PlanGroupUncheckedUpdateManyInput>
    /**
     * Filter which PlanGroups to update
     */
    where?: PlanGroupWhereInput
    /**
     * Limit how many PlanGroups to update.
     */
    limit?: number
  }

  /**
   * PlanGroup upsert
   */
  export type PlanGroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * The filter to search for the PlanGroup to update in case it exists.
     */
    where: PlanGroupWhereUniqueInput
    /**
     * In case the PlanGroup found by the `where` argument doesn't exist, create a new PlanGroup with this data.
     */
    create: XOR<PlanGroupCreateInput, PlanGroupUncheckedCreateInput>
    /**
     * In case the PlanGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanGroupUpdateInput, PlanGroupUncheckedUpdateInput>
  }

  /**
   * PlanGroup delete
   */
  export type PlanGroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
    /**
     * Filter which PlanGroup to delete.
     */
    where: PlanGroupWhereUniqueInput
  }

  /**
   * PlanGroup deleteMany
   */
  export type PlanGroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanGroups to delete
     */
    where?: PlanGroupWhereInput
    /**
     * Limit how many PlanGroups to delete.
     */
    limit?: number
  }

  /**
   * PlanGroup.members
   */
  export type PlanGroup$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * PlanGroup.plans
   */
  export type PlanGroup$plansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Plan
     */
    omit?: PlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInclude<ExtArgs> | null
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    cursor?: PlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }

  /**
   * PlanGroup without action
   */
  export type PlanGroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanGroup
     */
    select?: PlanGroupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanGroup
     */
    omit?: PlanGroupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanGroupInclude<ExtArgs> | null
  }


  /**
   * Model PlanInvitation
   */

  export type AggregatePlanInvitation = {
    _count: PlanInvitationCountAggregateOutputType | null
    _min: PlanInvitationMinAggregateOutputType | null
    _max: PlanInvitationMaxAggregateOutputType | null
  }

  export type PlanInvitationMinAggregateOutputType = {
    id: string | null
    planId: string | null
    senderId: string | null
    recipientId: string | null
    status: $Enums.InvitationStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanInvitationMaxAggregateOutputType = {
    id: string | null
    planId: string | null
    senderId: string | null
    recipientId: string | null
    status: $Enums.InvitationStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanInvitationCountAggregateOutputType = {
    id: number
    planId: number
    senderId: number
    recipientId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlanInvitationMinAggregateInputType = {
    id?: true
    planId?: true
    senderId?: true
    recipientId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanInvitationMaxAggregateInputType = {
    id?: true
    planId?: true
    senderId?: true
    recipientId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanInvitationCountAggregateInputType = {
    id?: true
    planId?: true
    senderId?: true
    recipientId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlanInvitationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanInvitation to aggregate.
     */
    where?: PlanInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanInvitations to fetch.
     */
    orderBy?: PlanInvitationOrderByWithRelationInput | PlanInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlanInvitations
    **/
    _count?: true | PlanInvitationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanInvitationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanInvitationMaxAggregateInputType
  }

  export type GetPlanInvitationAggregateType<T extends PlanInvitationAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanInvitation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanInvitation[P]>
      : GetScalarType<T[P], AggregatePlanInvitation[P]>
  }




  export type PlanInvitationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanInvitationWhereInput
    orderBy?: PlanInvitationOrderByWithAggregationInput | PlanInvitationOrderByWithAggregationInput[]
    by: PlanInvitationScalarFieldEnum[] | PlanInvitationScalarFieldEnum
    having?: PlanInvitationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanInvitationCountAggregateInputType | true
    _min?: PlanInvitationMinAggregateInputType
    _max?: PlanInvitationMaxAggregateInputType
  }

  export type PlanInvitationGroupByOutputType = {
    id: string
    planId: string
    senderId: string
    recipientId: string
    status: $Enums.InvitationStatus
    createdAt: Date
    updatedAt: Date | null
    _count: PlanInvitationCountAggregateOutputType | null
    _min: PlanInvitationMinAggregateOutputType | null
    _max: PlanInvitationMaxAggregateOutputType | null
  }

  type GetPlanInvitationGroupByPayload<T extends PlanInvitationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanInvitationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanInvitationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanInvitationGroupByOutputType[P]>
            : GetScalarType<T[P], PlanInvitationGroupByOutputType[P]>
        }
      >
    >


  export type PlanInvitationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    senderId?: boolean
    recipientId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planInvitation"]>

  export type PlanInvitationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    senderId?: boolean
    recipientId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planInvitation"]>

  export type PlanInvitationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    senderId?: boolean
    recipientId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planInvitation"]>

  export type PlanInvitationSelectScalar = {
    id?: boolean
    planId?: boolean
    senderId?: boolean
    recipientId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlanInvitationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "planId" | "senderId" | "recipientId" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["planInvitation"]>
  export type PlanInvitationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PlanInvitationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PlanInvitationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    sender?: boolean | UserDefaultArgs<ExtArgs>
    recipient?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PlanInvitationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlanInvitation"
    objects: {
      plan: Prisma.$PlanPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs>
      recipient: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      planId: string
      senderId: string
      recipientId: string
      status: $Enums.InvitationStatus
      createdAt: Date
      updatedAt: Date | null
    }, ExtArgs["result"]["planInvitation"]>
    composites: {}
  }

  type PlanInvitationGetPayload<S extends boolean | null | undefined | PlanInvitationDefaultArgs> = $Result.GetResult<Prisma.$PlanInvitationPayload, S>

  type PlanInvitationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlanInvitationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlanInvitationCountAggregateInputType | true
    }

  export interface PlanInvitationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlanInvitation'], meta: { name: 'PlanInvitation' } }
    /**
     * Find zero or one PlanInvitation that matches the filter.
     * @param {PlanInvitationFindUniqueArgs} args - Arguments to find a PlanInvitation
     * @example
     * // Get one PlanInvitation
     * const planInvitation = await prisma.planInvitation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlanInvitationFindUniqueArgs>(args: SelectSubset<T, PlanInvitationFindUniqueArgs<ExtArgs>>): Prisma__PlanInvitationClient<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PlanInvitation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlanInvitationFindUniqueOrThrowArgs} args - Arguments to find a PlanInvitation
     * @example
     * // Get one PlanInvitation
     * const planInvitation = await prisma.planInvitation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlanInvitationFindUniqueOrThrowArgs>(args: SelectSubset<T, PlanInvitationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlanInvitationClient<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanInvitation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanInvitationFindFirstArgs} args - Arguments to find a PlanInvitation
     * @example
     * // Get one PlanInvitation
     * const planInvitation = await prisma.planInvitation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlanInvitationFindFirstArgs>(args?: SelectSubset<T, PlanInvitationFindFirstArgs<ExtArgs>>): Prisma__PlanInvitationClient<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PlanInvitation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanInvitationFindFirstOrThrowArgs} args - Arguments to find a PlanInvitation
     * @example
     * // Get one PlanInvitation
     * const planInvitation = await prisma.planInvitation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlanInvitationFindFirstOrThrowArgs>(args?: SelectSubset<T, PlanInvitationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlanInvitationClient<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PlanInvitations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanInvitationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlanInvitations
     * const planInvitations = await prisma.planInvitation.findMany()
     * 
     * // Get first 10 PlanInvitations
     * const planInvitations = await prisma.planInvitation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planInvitationWithIdOnly = await prisma.planInvitation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlanInvitationFindManyArgs>(args?: SelectSubset<T, PlanInvitationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PlanInvitation.
     * @param {PlanInvitationCreateArgs} args - Arguments to create a PlanInvitation.
     * @example
     * // Create one PlanInvitation
     * const PlanInvitation = await prisma.planInvitation.create({
     *   data: {
     *     // ... data to create a PlanInvitation
     *   }
     * })
     * 
     */
    create<T extends PlanInvitationCreateArgs>(args: SelectSubset<T, PlanInvitationCreateArgs<ExtArgs>>): Prisma__PlanInvitationClient<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PlanInvitations.
     * @param {PlanInvitationCreateManyArgs} args - Arguments to create many PlanInvitations.
     * @example
     * // Create many PlanInvitations
     * const planInvitation = await prisma.planInvitation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlanInvitationCreateManyArgs>(args?: SelectSubset<T, PlanInvitationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlanInvitations and returns the data saved in the database.
     * @param {PlanInvitationCreateManyAndReturnArgs} args - Arguments to create many PlanInvitations.
     * @example
     * // Create many PlanInvitations
     * const planInvitation = await prisma.planInvitation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlanInvitations and only return the `id`
     * const planInvitationWithIdOnly = await prisma.planInvitation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlanInvitationCreateManyAndReturnArgs>(args?: SelectSubset<T, PlanInvitationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PlanInvitation.
     * @param {PlanInvitationDeleteArgs} args - Arguments to delete one PlanInvitation.
     * @example
     * // Delete one PlanInvitation
     * const PlanInvitation = await prisma.planInvitation.delete({
     *   where: {
     *     // ... filter to delete one PlanInvitation
     *   }
     * })
     * 
     */
    delete<T extends PlanInvitationDeleteArgs>(args: SelectSubset<T, PlanInvitationDeleteArgs<ExtArgs>>): Prisma__PlanInvitationClient<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PlanInvitation.
     * @param {PlanInvitationUpdateArgs} args - Arguments to update one PlanInvitation.
     * @example
     * // Update one PlanInvitation
     * const planInvitation = await prisma.planInvitation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlanInvitationUpdateArgs>(args: SelectSubset<T, PlanInvitationUpdateArgs<ExtArgs>>): Prisma__PlanInvitationClient<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PlanInvitations.
     * @param {PlanInvitationDeleteManyArgs} args - Arguments to filter PlanInvitations to delete.
     * @example
     * // Delete a few PlanInvitations
     * const { count } = await prisma.planInvitation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlanInvitationDeleteManyArgs>(args?: SelectSubset<T, PlanInvitationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanInvitationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlanInvitations
     * const planInvitation = await prisma.planInvitation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlanInvitationUpdateManyArgs>(args: SelectSubset<T, PlanInvitationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanInvitations and returns the data updated in the database.
     * @param {PlanInvitationUpdateManyAndReturnArgs} args - Arguments to update many PlanInvitations.
     * @example
     * // Update many PlanInvitations
     * const planInvitation = await prisma.planInvitation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PlanInvitations and only return the `id`
     * const planInvitationWithIdOnly = await prisma.planInvitation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlanInvitationUpdateManyAndReturnArgs>(args: SelectSubset<T, PlanInvitationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PlanInvitation.
     * @param {PlanInvitationUpsertArgs} args - Arguments to update or create a PlanInvitation.
     * @example
     * // Update or create a PlanInvitation
     * const planInvitation = await prisma.planInvitation.upsert({
     *   create: {
     *     // ... data to create a PlanInvitation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlanInvitation we want to update
     *   }
     * })
     */
    upsert<T extends PlanInvitationUpsertArgs>(args: SelectSubset<T, PlanInvitationUpsertArgs<ExtArgs>>): Prisma__PlanInvitationClient<$Result.GetResult<Prisma.$PlanInvitationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PlanInvitations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanInvitationCountArgs} args - Arguments to filter PlanInvitations to count.
     * @example
     * // Count the number of PlanInvitations
     * const count = await prisma.planInvitation.count({
     *   where: {
     *     // ... the filter for the PlanInvitations we want to count
     *   }
     * })
    **/
    count<T extends PlanInvitationCountArgs>(
      args?: Subset<T, PlanInvitationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanInvitationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlanInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanInvitationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanInvitationAggregateArgs>(args: Subset<T, PlanInvitationAggregateArgs>): Prisma.PrismaPromise<GetPlanInvitationAggregateType<T>>

    /**
     * Group by PlanInvitation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanInvitationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanInvitationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanInvitationGroupByArgs['orderBy'] }
        : { orderBy?: PlanInvitationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanInvitationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanInvitationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlanInvitation model
   */
  readonly fields: PlanInvitationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlanInvitation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanInvitationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    recipient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlanInvitation model
   */
  interface PlanInvitationFieldRefs {
    readonly id: FieldRef<"PlanInvitation", 'String'>
    readonly planId: FieldRef<"PlanInvitation", 'String'>
    readonly senderId: FieldRef<"PlanInvitation", 'String'>
    readonly recipientId: FieldRef<"PlanInvitation", 'String'>
    readonly status: FieldRef<"PlanInvitation", 'InvitationStatus'>
    readonly createdAt: FieldRef<"PlanInvitation", 'DateTime'>
    readonly updatedAt: FieldRef<"PlanInvitation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PlanInvitation findUnique
   */
  export type PlanInvitationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * Filter, which PlanInvitation to fetch.
     */
    where: PlanInvitationWhereUniqueInput
  }

  /**
   * PlanInvitation findUniqueOrThrow
   */
  export type PlanInvitationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * Filter, which PlanInvitation to fetch.
     */
    where: PlanInvitationWhereUniqueInput
  }

  /**
   * PlanInvitation findFirst
   */
  export type PlanInvitationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * Filter, which PlanInvitation to fetch.
     */
    where?: PlanInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanInvitations to fetch.
     */
    orderBy?: PlanInvitationOrderByWithRelationInput | PlanInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanInvitations.
     */
    cursor?: PlanInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanInvitations.
     */
    distinct?: PlanInvitationScalarFieldEnum | PlanInvitationScalarFieldEnum[]
  }

  /**
   * PlanInvitation findFirstOrThrow
   */
  export type PlanInvitationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * Filter, which PlanInvitation to fetch.
     */
    where?: PlanInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanInvitations to fetch.
     */
    orderBy?: PlanInvitationOrderByWithRelationInput | PlanInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanInvitations.
     */
    cursor?: PlanInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanInvitations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanInvitations.
     */
    distinct?: PlanInvitationScalarFieldEnum | PlanInvitationScalarFieldEnum[]
  }

  /**
   * PlanInvitation findMany
   */
  export type PlanInvitationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * Filter, which PlanInvitations to fetch.
     */
    where?: PlanInvitationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanInvitations to fetch.
     */
    orderBy?: PlanInvitationOrderByWithRelationInput | PlanInvitationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlanInvitations.
     */
    cursor?: PlanInvitationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanInvitations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanInvitations.
     */
    skip?: number
    distinct?: PlanInvitationScalarFieldEnum | PlanInvitationScalarFieldEnum[]
  }

  /**
   * PlanInvitation create
   */
  export type PlanInvitationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * The data needed to create a PlanInvitation.
     */
    data: XOR<PlanInvitationCreateInput, PlanInvitationUncheckedCreateInput>
  }

  /**
   * PlanInvitation createMany
   */
  export type PlanInvitationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlanInvitations.
     */
    data: PlanInvitationCreateManyInput | PlanInvitationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlanInvitation createManyAndReturn
   */
  export type PlanInvitationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * The data used to create many PlanInvitations.
     */
    data: PlanInvitationCreateManyInput | PlanInvitationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanInvitation update
   */
  export type PlanInvitationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * The data needed to update a PlanInvitation.
     */
    data: XOR<PlanInvitationUpdateInput, PlanInvitationUncheckedUpdateInput>
    /**
     * Choose, which PlanInvitation to update.
     */
    where: PlanInvitationWhereUniqueInput
  }

  /**
   * PlanInvitation updateMany
   */
  export type PlanInvitationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlanInvitations.
     */
    data: XOR<PlanInvitationUpdateManyMutationInput, PlanInvitationUncheckedUpdateManyInput>
    /**
     * Filter which PlanInvitations to update
     */
    where?: PlanInvitationWhereInput
    /**
     * Limit how many PlanInvitations to update.
     */
    limit?: number
  }

  /**
   * PlanInvitation updateManyAndReturn
   */
  export type PlanInvitationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * The data used to update PlanInvitations.
     */
    data: XOR<PlanInvitationUpdateManyMutationInput, PlanInvitationUncheckedUpdateManyInput>
    /**
     * Filter which PlanInvitations to update
     */
    where?: PlanInvitationWhereInput
    /**
     * Limit how many PlanInvitations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlanInvitation upsert
   */
  export type PlanInvitationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * The filter to search for the PlanInvitation to update in case it exists.
     */
    where: PlanInvitationWhereUniqueInput
    /**
     * In case the PlanInvitation found by the `where` argument doesn't exist, create a new PlanInvitation with this data.
     */
    create: XOR<PlanInvitationCreateInput, PlanInvitationUncheckedCreateInput>
    /**
     * In case the PlanInvitation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanInvitationUpdateInput, PlanInvitationUncheckedUpdateInput>
  }

  /**
   * PlanInvitation delete
   */
  export type PlanInvitationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
    /**
     * Filter which PlanInvitation to delete.
     */
    where: PlanInvitationWhereUniqueInput
  }

  /**
   * PlanInvitation deleteMany
   */
  export type PlanInvitationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanInvitations to delete
     */
    where?: PlanInvitationWhereInput
    /**
     * Limit how many PlanInvitations to delete.
     */
    limit?: number
  }

  /**
   * PlanInvitation without action
   */
  export type PlanInvitationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanInvitation
     */
    select?: PlanInvitationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PlanInvitation
     */
    omit?: PlanInvitationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlanInvitationInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.MessageRole | null
    content: string | null
    createdAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    role: $Enums.MessageRole | null
    content: string | null
    createdAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    userId: number
    role: number
    content: number
    createdAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    content?: true
    createdAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    content?: true
    createdAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    userId?: true
    role?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    userId: string
    role: $Enums.MessageRole
    content: string
    createdAt: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    emotions?: boolean | Message$emotionsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    role?: boolean
    content?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    userId?: boolean
    role?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "role" | "content" | "createdAt", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    emotions?: boolean | Message$emotionsArgs<ExtArgs>
    _count?: boolean | MessageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      emotions: Prisma.$MessageEmotionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      role: $Enums.MessageRole
      content: string
      createdAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    emotions<T extends Message$emotionsArgs<ExtArgs> = {}>(args?: Subset<T, Message$emotionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly userId: FieldRef<"Message", 'String'>
    readonly role: FieldRef<"Message", 'MessageRole'>
    readonly content: FieldRef<"Message", 'String'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message.emotions
   */
  export type Message$emotionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    where?: MessageEmotionWhereInput
    orderBy?: MessageEmotionOrderByWithRelationInput | MessageEmotionOrderByWithRelationInput[]
    cursor?: MessageEmotionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageEmotionScalarFieldEnum | MessageEmotionScalarFieldEnum[]
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model MessageEmotion
   */

  export type AggregateMessageEmotion = {
    _count: MessageEmotionCountAggregateOutputType | null
    _avg: MessageEmotionAvgAggregateOutputType | null
    _sum: MessageEmotionSumAggregateOutputType | null
    _min: MessageEmotionMinAggregateOutputType | null
    _max: MessageEmotionMaxAggregateOutputType | null
  }

  export type MessageEmotionAvgAggregateOutputType = {
    score: number | null
  }

  export type MessageEmotionSumAggregateOutputType = {
    score: number | null
  }

  export type MessageEmotionMinAggregateOutputType = {
    id: string | null
    messageId: string | null
    name: string | null
    score: number | null
    color: string | null
  }

  export type MessageEmotionMaxAggregateOutputType = {
    id: string | null
    messageId: string | null
    name: string | null
    score: number | null
    color: string | null
  }

  export type MessageEmotionCountAggregateOutputType = {
    id: number
    messageId: number
    name: number
    score: number
    color: number
    _all: number
  }


  export type MessageEmotionAvgAggregateInputType = {
    score?: true
  }

  export type MessageEmotionSumAggregateInputType = {
    score?: true
  }

  export type MessageEmotionMinAggregateInputType = {
    id?: true
    messageId?: true
    name?: true
    score?: true
    color?: true
  }

  export type MessageEmotionMaxAggregateInputType = {
    id?: true
    messageId?: true
    name?: true
    score?: true
    color?: true
  }

  export type MessageEmotionCountAggregateInputType = {
    id?: true
    messageId?: true
    name?: true
    score?: true
    color?: true
    _all?: true
  }

  export type MessageEmotionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageEmotion to aggregate.
     */
    where?: MessageEmotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageEmotions to fetch.
     */
    orderBy?: MessageEmotionOrderByWithRelationInput | MessageEmotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageEmotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageEmotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageEmotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessageEmotions
    **/
    _count?: true | MessageEmotionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageEmotionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageEmotionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageEmotionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageEmotionMaxAggregateInputType
  }

  export type GetMessageEmotionAggregateType<T extends MessageEmotionAggregateArgs> = {
        [P in keyof T & keyof AggregateMessageEmotion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessageEmotion[P]>
      : GetScalarType<T[P], AggregateMessageEmotion[P]>
  }




  export type MessageEmotionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageEmotionWhereInput
    orderBy?: MessageEmotionOrderByWithAggregationInput | MessageEmotionOrderByWithAggregationInput[]
    by: MessageEmotionScalarFieldEnum[] | MessageEmotionScalarFieldEnum
    having?: MessageEmotionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageEmotionCountAggregateInputType | true
    _avg?: MessageEmotionAvgAggregateInputType
    _sum?: MessageEmotionSumAggregateInputType
    _min?: MessageEmotionMinAggregateInputType
    _max?: MessageEmotionMaxAggregateInputType
  }

  export type MessageEmotionGroupByOutputType = {
    id: string
    messageId: string
    name: string
    score: number
    color: string
    _count: MessageEmotionCountAggregateOutputType | null
    _avg: MessageEmotionAvgAggregateOutputType | null
    _sum: MessageEmotionSumAggregateOutputType | null
    _min: MessageEmotionMinAggregateOutputType | null
    _max: MessageEmotionMaxAggregateOutputType | null
  }

  type GetMessageEmotionGroupByPayload<T extends MessageEmotionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageEmotionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageEmotionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageEmotionGroupByOutputType[P]>
            : GetScalarType<T[P], MessageEmotionGroupByOutputType[P]>
        }
      >
    >


  export type MessageEmotionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    name?: boolean
    score?: boolean
    color?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageEmotion"]>

  export type MessageEmotionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    name?: boolean
    score?: boolean
    color?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageEmotion"]>

  export type MessageEmotionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    messageId?: boolean
    name?: boolean
    score?: boolean
    color?: boolean
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["messageEmotion"]>

  export type MessageEmotionSelectScalar = {
    id?: boolean
    messageId?: boolean
    name?: boolean
    score?: boolean
    color?: boolean
  }

  export type MessageEmotionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "messageId" | "name" | "score" | "color", ExtArgs["result"]["messageEmotion"]>
  export type MessageEmotionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type MessageEmotionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }
  export type MessageEmotionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    message?: boolean | MessageDefaultArgs<ExtArgs>
  }

  export type $MessageEmotionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessageEmotion"
    objects: {
      message: Prisma.$MessagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      messageId: string
      name: string
      score: number
      color: string
    }, ExtArgs["result"]["messageEmotion"]>
    composites: {}
  }

  type MessageEmotionGetPayload<S extends boolean | null | undefined | MessageEmotionDefaultArgs> = $Result.GetResult<Prisma.$MessageEmotionPayload, S>

  type MessageEmotionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageEmotionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageEmotionCountAggregateInputType | true
    }

  export interface MessageEmotionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessageEmotion'], meta: { name: 'MessageEmotion' } }
    /**
     * Find zero or one MessageEmotion that matches the filter.
     * @param {MessageEmotionFindUniqueArgs} args - Arguments to find a MessageEmotion
     * @example
     * // Get one MessageEmotion
     * const messageEmotion = await prisma.messageEmotion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageEmotionFindUniqueArgs>(args: SelectSubset<T, MessageEmotionFindUniqueArgs<ExtArgs>>): Prisma__MessageEmotionClient<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessageEmotion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageEmotionFindUniqueOrThrowArgs} args - Arguments to find a MessageEmotion
     * @example
     * // Get one MessageEmotion
     * const messageEmotion = await prisma.messageEmotion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageEmotionFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageEmotionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageEmotionClient<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageEmotion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageEmotionFindFirstArgs} args - Arguments to find a MessageEmotion
     * @example
     * // Get one MessageEmotion
     * const messageEmotion = await prisma.messageEmotion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageEmotionFindFirstArgs>(args?: SelectSubset<T, MessageEmotionFindFirstArgs<ExtArgs>>): Prisma__MessageEmotionClient<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessageEmotion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageEmotionFindFirstOrThrowArgs} args - Arguments to find a MessageEmotion
     * @example
     * // Get one MessageEmotion
     * const messageEmotion = await prisma.messageEmotion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageEmotionFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageEmotionFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageEmotionClient<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessageEmotions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageEmotionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessageEmotions
     * const messageEmotions = await prisma.messageEmotion.findMany()
     * 
     * // Get first 10 MessageEmotions
     * const messageEmotions = await prisma.messageEmotion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageEmotionWithIdOnly = await prisma.messageEmotion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageEmotionFindManyArgs>(args?: SelectSubset<T, MessageEmotionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessageEmotion.
     * @param {MessageEmotionCreateArgs} args - Arguments to create a MessageEmotion.
     * @example
     * // Create one MessageEmotion
     * const MessageEmotion = await prisma.messageEmotion.create({
     *   data: {
     *     // ... data to create a MessageEmotion
     *   }
     * })
     * 
     */
    create<T extends MessageEmotionCreateArgs>(args: SelectSubset<T, MessageEmotionCreateArgs<ExtArgs>>): Prisma__MessageEmotionClient<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessageEmotions.
     * @param {MessageEmotionCreateManyArgs} args - Arguments to create many MessageEmotions.
     * @example
     * // Create many MessageEmotions
     * const messageEmotion = await prisma.messageEmotion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageEmotionCreateManyArgs>(args?: SelectSubset<T, MessageEmotionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessageEmotions and returns the data saved in the database.
     * @param {MessageEmotionCreateManyAndReturnArgs} args - Arguments to create many MessageEmotions.
     * @example
     * // Create many MessageEmotions
     * const messageEmotion = await prisma.messageEmotion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessageEmotions and only return the `id`
     * const messageEmotionWithIdOnly = await prisma.messageEmotion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageEmotionCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageEmotionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessageEmotion.
     * @param {MessageEmotionDeleteArgs} args - Arguments to delete one MessageEmotion.
     * @example
     * // Delete one MessageEmotion
     * const MessageEmotion = await prisma.messageEmotion.delete({
     *   where: {
     *     // ... filter to delete one MessageEmotion
     *   }
     * })
     * 
     */
    delete<T extends MessageEmotionDeleteArgs>(args: SelectSubset<T, MessageEmotionDeleteArgs<ExtArgs>>): Prisma__MessageEmotionClient<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessageEmotion.
     * @param {MessageEmotionUpdateArgs} args - Arguments to update one MessageEmotion.
     * @example
     * // Update one MessageEmotion
     * const messageEmotion = await prisma.messageEmotion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageEmotionUpdateArgs>(args: SelectSubset<T, MessageEmotionUpdateArgs<ExtArgs>>): Prisma__MessageEmotionClient<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessageEmotions.
     * @param {MessageEmotionDeleteManyArgs} args - Arguments to filter MessageEmotions to delete.
     * @example
     * // Delete a few MessageEmotions
     * const { count } = await prisma.messageEmotion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageEmotionDeleteManyArgs>(args?: SelectSubset<T, MessageEmotionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageEmotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageEmotionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessageEmotions
     * const messageEmotion = await prisma.messageEmotion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageEmotionUpdateManyArgs>(args: SelectSubset<T, MessageEmotionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessageEmotions and returns the data updated in the database.
     * @param {MessageEmotionUpdateManyAndReturnArgs} args - Arguments to update many MessageEmotions.
     * @example
     * // Update many MessageEmotions
     * const messageEmotion = await prisma.messageEmotion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessageEmotions and only return the `id`
     * const messageEmotionWithIdOnly = await prisma.messageEmotion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageEmotionUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageEmotionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessageEmotion.
     * @param {MessageEmotionUpsertArgs} args - Arguments to update or create a MessageEmotion.
     * @example
     * // Update or create a MessageEmotion
     * const messageEmotion = await prisma.messageEmotion.upsert({
     *   create: {
     *     // ... data to create a MessageEmotion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessageEmotion we want to update
     *   }
     * })
     */
    upsert<T extends MessageEmotionUpsertArgs>(args: SelectSubset<T, MessageEmotionUpsertArgs<ExtArgs>>): Prisma__MessageEmotionClient<$Result.GetResult<Prisma.$MessageEmotionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessageEmotions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageEmotionCountArgs} args - Arguments to filter MessageEmotions to count.
     * @example
     * // Count the number of MessageEmotions
     * const count = await prisma.messageEmotion.count({
     *   where: {
     *     // ... the filter for the MessageEmotions we want to count
     *   }
     * })
    **/
    count<T extends MessageEmotionCountArgs>(
      args?: Subset<T, MessageEmotionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageEmotionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessageEmotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageEmotionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageEmotionAggregateArgs>(args: Subset<T, MessageEmotionAggregateArgs>): Prisma.PrismaPromise<GetMessageEmotionAggregateType<T>>

    /**
     * Group by MessageEmotion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageEmotionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageEmotionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageEmotionGroupByArgs['orderBy'] }
        : { orderBy?: MessageEmotionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageEmotionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageEmotionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessageEmotion model
   */
  readonly fields: MessageEmotionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessageEmotion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageEmotionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    message<T extends MessageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MessageDefaultArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessageEmotion model
   */
  interface MessageEmotionFieldRefs {
    readonly id: FieldRef<"MessageEmotion", 'String'>
    readonly messageId: FieldRef<"MessageEmotion", 'String'>
    readonly name: FieldRef<"MessageEmotion", 'String'>
    readonly score: FieldRef<"MessageEmotion", 'Float'>
    readonly color: FieldRef<"MessageEmotion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MessageEmotion findUnique
   */
  export type MessageEmotionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * Filter, which MessageEmotion to fetch.
     */
    where: MessageEmotionWhereUniqueInput
  }

  /**
   * MessageEmotion findUniqueOrThrow
   */
  export type MessageEmotionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * Filter, which MessageEmotion to fetch.
     */
    where: MessageEmotionWhereUniqueInput
  }

  /**
   * MessageEmotion findFirst
   */
  export type MessageEmotionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * Filter, which MessageEmotion to fetch.
     */
    where?: MessageEmotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageEmotions to fetch.
     */
    orderBy?: MessageEmotionOrderByWithRelationInput | MessageEmotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageEmotions.
     */
    cursor?: MessageEmotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageEmotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageEmotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageEmotions.
     */
    distinct?: MessageEmotionScalarFieldEnum | MessageEmotionScalarFieldEnum[]
  }

  /**
   * MessageEmotion findFirstOrThrow
   */
  export type MessageEmotionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * Filter, which MessageEmotion to fetch.
     */
    where?: MessageEmotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageEmotions to fetch.
     */
    orderBy?: MessageEmotionOrderByWithRelationInput | MessageEmotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessageEmotions.
     */
    cursor?: MessageEmotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageEmotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageEmotions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessageEmotions.
     */
    distinct?: MessageEmotionScalarFieldEnum | MessageEmotionScalarFieldEnum[]
  }

  /**
   * MessageEmotion findMany
   */
  export type MessageEmotionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * Filter, which MessageEmotions to fetch.
     */
    where?: MessageEmotionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessageEmotions to fetch.
     */
    orderBy?: MessageEmotionOrderByWithRelationInput | MessageEmotionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessageEmotions.
     */
    cursor?: MessageEmotionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessageEmotions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessageEmotions.
     */
    skip?: number
    distinct?: MessageEmotionScalarFieldEnum | MessageEmotionScalarFieldEnum[]
  }

  /**
   * MessageEmotion create
   */
  export type MessageEmotionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * The data needed to create a MessageEmotion.
     */
    data: XOR<MessageEmotionCreateInput, MessageEmotionUncheckedCreateInput>
  }

  /**
   * MessageEmotion createMany
   */
  export type MessageEmotionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessageEmotions.
     */
    data: MessageEmotionCreateManyInput | MessageEmotionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessageEmotion createManyAndReturn
   */
  export type MessageEmotionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * The data used to create many MessageEmotions.
     */
    data: MessageEmotionCreateManyInput | MessageEmotionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageEmotion update
   */
  export type MessageEmotionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * The data needed to update a MessageEmotion.
     */
    data: XOR<MessageEmotionUpdateInput, MessageEmotionUncheckedUpdateInput>
    /**
     * Choose, which MessageEmotion to update.
     */
    where: MessageEmotionWhereUniqueInput
  }

  /**
   * MessageEmotion updateMany
   */
  export type MessageEmotionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessageEmotions.
     */
    data: XOR<MessageEmotionUpdateManyMutationInput, MessageEmotionUncheckedUpdateManyInput>
    /**
     * Filter which MessageEmotions to update
     */
    where?: MessageEmotionWhereInput
    /**
     * Limit how many MessageEmotions to update.
     */
    limit?: number
  }

  /**
   * MessageEmotion updateManyAndReturn
   */
  export type MessageEmotionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * The data used to update MessageEmotions.
     */
    data: XOR<MessageEmotionUpdateManyMutationInput, MessageEmotionUncheckedUpdateManyInput>
    /**
     * Filter which MessageEmotions to update
     */
    where?: MessageEmotionWhereInput
    /**
     * Limit how many MessageEmotions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MessageEmotion upsert
   */
  export type MessageEmotionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * The filter to search for the MessageEmotion to update in case it exists.
     */
    where: MessageEmotionWhereUniqueInput
    /**
     * In case the MessageEmotion found by the `where` argument doesn't exist, create a new MessageEmotion with this data.
     */
    create: XOR<MessageEmotionCreateInput, MessageEmotionUncheckedCreateInput>
    /**
     * In case the MessageEmotion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageEmotionUpdateInput, MessageEmotionUncheckedUpdateInput>
  }

  /**
   * MessageEmotion delete
   */
  export type MessageEmotionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
    /**
     * Filter which MessageEmotion to delete.
     */
    where: MessageEmotionWhereUniqueInput
  }

  /**
   * MessageEmotion deleteMany
   */
  export type MessageEmotionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessageEmotions to delete
     */
    where?: MessageEmotionWhereInput
    /**
     * Limit how many MessageEmotions to delete.
     */
    limit?: number
  }

  /**
   * MessageEmotion without action
   */
  export type MessageEmotionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessageEmotion
     */
    select?: MessageEmotionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessageEmotion
     */
    omit?: MessageEmotionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageEmotionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    message: string | null
    createdAt: Date | null
    sentAt: Date | null
    processedAt: Date | null
    openedAt: Date | null
    concludedAt: Date | null
    promptTag: string | null
    status: $Enums.NotificationStatus | null
    type: $Enums.NotificationType | null
    relatedId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    message: string | null
    createdAt: Date | null
    sentAt: Date | null
    processedAt: Date | null
    openedAt: Date | null
    concludedAt: Date | null
    promptTag: string | null
    status: $Enums.NotificationStatus | null
    type: $Enums.NotificationType | null
    relatedId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    message: number
    createdAt: number
    sentAt: number
    processedAt: number
    openedAt: number
    concludedAt: number
    promptTag: number
    status: number
    type: number
    relatedId: number
    relatedData: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
    sentAt?: true
    processedAt?: true
    openedAt?: true
    concludedAt?: true
    promptTag?: true
    status?: true
    type?: true
    relatedId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
    sentAt?: true
    processedAt?: true
    openedAt?: true
    concludedAt?: true
    promptTag?: true
    status?: true
    type?: true
    relatedId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    message?: true
    createdAt?: true
    sentAt?: true
    processedAt?: true
    openedAt?: true
    concludedAt?: true
    promptTag?: true
    status?: true
    type?: true
    relatedId?: true
    relatedData?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    message: string
    createdAt: Date
    sentAt: Date | null
    processedAt: Date | null
    openedAt: Date | null
    concludedAt: Date | null
    promptTag: string | null
    status: $Enums.NotificationStatus
    type: $Enums.NotificationType
    relatedId: string | null
    relatedData: JsonValue | null
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    message?: boolean
    createdAt?: boolean
    sentAt?: boolean
    processedAt?: boolean
    openedAt?: boolean
    concludedAt?: boolean
    promptTag?: boolean
    status?: boolean
    type?: boolean
    relatedId?: boolean
    relatedData?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    message?: boolean
    createdAt?: boolean
    sentAt?: boolean
    processedAt?: boolean
    openedAt?: boolean
    concludedAt?: boolean
    promptTag?: boolean
    status?: boolean
    type?: boolean
    relatedId?: boolean
    relatedData?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    message?: boolean
    createdAt?: boolean
    sentAt?: boolean
    processedAt?: boolean
    openedAt?: boolean
    concludedAt?: boolean
    promptTag?: boolean
    status?: boolean
    type?: boolean
    relatedId?: boolean
    relatedData?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    message?: boolean
    createdAt?: boolean
    sentAt?: boolean
    processedAt?: boolean
    openedAt?: boolean
    concludedAt?: boolean
    promptTag?: boolean
    status?: boolean
    type?: boolean
    relatedId?: boolean
    relatedData?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "message" | "createdAt" | "sentAt" | "processedAt" | "openedAt" | "concludedAt" | "promptTag" | "status" | "type" | "relatedId" | "relatedData", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      message: string
      createdAt: Date
      sentAt: Date | null
      processedAt: Date | null
      openedAt: Date | null
      concludedAt: Date | null
      promptTag: string | null
      status: $Enums.NotificationStatus
      type: $Enums.NotificationType
      relatedId: string | null
      relatedData: Prisma.JsonValue | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
    readonly processedAt: FieldRef<"Notification", 'DateTime'>
    readonly openedAt: FieldRef<"Notification", 'DateTime'>
    readonly concludedAt: FieldRef<"Notification", 'DateTime'>
    readonly promptTag: FieldRef<"Notification", 'String'>
    readonly status: FieldRef<"Notification", 'NotificationStatus'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly relatedId: FieldRef<"Notification", 'String'>
    readonly relatedData: FieldRef<"Notification", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Recommendation
   */

  export type AggregateRecommendation = {
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  export type RecommendationAvgAggregateOutputType = {
    score: number | null
  }

  export type RecommendationSumAggregateOutputType = {
    score: number | null
  }

  export type RecommendationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    recommendationObjectType: $Enums.RecommendationObjectType | null
    recommendationObjectId: string | null
    score: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecommendationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    recommendationObjectType: $Enums.RecommendationObjectType | null
    recommendationObjectId: string | null
    score: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RecommendationCountAggregateOutputType = {
    id: number
    userId: number
    recommendationObjectType: number
    recommendationObjectId: number
    score: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RecommendationAvgAggregateInputType = {
    score?: true
  }

  export type RecommendationSumAggregateInputType = {
    score?: true
  }

  export type RecommendationMinAggregateInputType = {
    id?: true
    userId?: true
    recommendationObjectType?: true
    recommendationObjectId?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecommendationMaxAggregateInputType = {
    id?: true
    userId?: true
    recommendationObjectType?: true
    recommendationObjectId?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RecommendationCountAggregateInputType = {
    id?: true
    userId?: true
    recommendationObjectType?: true
    recommendationObjectId?: true
    score?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RecommendationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendation to aggregate.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recommendations
    **/
    _count?: true | RecommendationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecommendationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecommendationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecommendationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecommendationMaxAggregateInputType
  }

  export type GetRecommendationAggregateType<T extends RecommendationAggregateArgs> = {
        [P in keyof T & keyof AggregateRecommendation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecommendation[P]>
      : GetScalarType<T[P], AggregateRecommendation[P]>
  }




  export type RecommendationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RecommendationWhereInput
    orderBy?: RecommendationOrderByWithAggregationInput | RecommendationOrderByWithAggregationInput[]
    by: RecommendationScalarFieldEnum[] | RecommendationScalarFieldEnum
    having?: RecommendationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecommendationCountAggregateInputType | true
    _avg?: RecommendationAvgAggregateInputType
    _sum?: RecommendationSumAggregateInputType
    _min?: RecommendationMinAggregateInputType
    _max?: RecommendationMaxAggregateInputType
  }

  export type RecommendationGroupByOutputType = {
    id: string
    userId: string
    recommendationObjectType: $Enums.RecommendationObjectType
    recommendationObjectId: string
    score: number
    metadata: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: RecommendationCountAggregateOutputType | null
    _avg: RecommendationAvgAggregateOutputType | null
    _sum: RecommendationSumAggregateOutputType | null
    _min: RecommendationMinAggregateOutputType | null
    _max: RecommendationMaxAggregateOutputType | null
  }

  type GetRecommendationGroupByPayload<T extends RecommendationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecommendationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecommendationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
            : GetScalarType<T[P], RecommendationGroupByOutputType[P]>
        }
      >
    >


  export type RecommendationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recommendationObjectType?: boolean
    recommendationObjectId?: boolean
    score?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>

  export type RecommendationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recommendationObjectType?: boolean
    recommendationObjectId?: boolean
    score?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>

  export type RecommendationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    recommendationObjectType?: boolean
    recommendationObjectId?: boolean
    score?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["recommendation"]>

  export type RecommendationSelectScalar = {
    id?: boolean
    userId?: boolean
    recommendationObjectType?: boolean
    recommendationObjectId?: boolean
    score?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RecommendationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "recommendationObjectType" | "recommendationObjectId" | "score" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["recommendation"]>
  export type RecommendationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecommendationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type RecommendationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $RecommendationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Recommendation"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      recommendationObjectType: $Enums.RecommendationObjectType
      recommendationObjectId: string
      score: number
      metadata: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["recommendation"]>
    composites: {}
  }

  type RecommendationGetPayload<S extends boolean | null | undefined | RecommendationDefaultArgs> = $Result.GetResult<Prisma.$RecommendationPayload, S>

  type RecommendationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RecommendationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RecommendationCountAggregateInputType | true
    }

  export interface RecommendationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recommendation'], meta: { name: 'Recommendation' } }
    /**
     * Find zero or one Recommendation that matches the filter.
     * @param {RecommendationFindUniqueArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RecommendationFindUniqueArgs>(args: SelectSubset<T, RecommendationFindUniqueArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Recommendation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RecommendationFindUniqueOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RecommendationFindUniqueOrThrowArgs>(args: SelectSubset<T, RecommendationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RecommendationFindFirstArgs>(args?: SelectSubset<T, RecommendationFindFirstArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Recommendation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindFirstOrThrowArgs} args - Arguments to find a Recommendation
     * @example
     * // Get one Recommendation
     * const recommendation = await prisma.recommendation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RecommendationFindFirstOrThrowArgs>(args?: SelectSubset<T, RecommendationFindFirstOrThrowArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Recommendations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recommendations
     * const recommendations = await prisma.recommendation.findMany()
     * 
     * // Get first 10 Recommendations
     * const recommendations = await prisma.recommendation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recommendationWithIdOnly = await prisma.recommendation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RecommendationFindManyArgs>(args?: SelectSubset<T, RecommendationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Recommendation.
     * @param {RecommendationCreateArgs} args - Arguments to create a Recommendation.
     * @example
     * // Create one Recommendation
     * const Recommendation = await prisma.recommendation.create({
     *   data: {
     *     // ... data to create a Recommendation
     *   }
     * })
     * 
     */
    create<T extends RecommendationCreateArgs>(args: SelectSubset<T, RecommendationCreateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Recommendations.
     * @param {RecommendationCreateManyArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendation = await prisma.recommendation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RecommendationCreateManyArgs>(args?: SelectSubset<T, RecommendationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Recommendations and returns the data saved in the database.
     * @param {RecommendationCreateManyAndReturnArgs} args - Arguments to create many Recommendations.
     * @example
     * // Create many Recommendations
     * const recommendation = await prisma.recommendation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Recommendations and only return the `id`
     * const recommendationWithIdOnly = await prisma.recommendation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RecommendationCreateManyAndReturnArgs>(args?: SelectSubset<T, RecommendationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Recommendation.
     * @param {RecommendationDeleteArgs} args - Arguments to delete one Recommendation.
     * @example
     * // Delete one Recommendation
     * const Recommendation = await prisma.recommendation.delete({
     *   where: {
     *     // ... filter to delete one Recommendation
     *   }
     * })
     * 
     */
    delete<T extends RecommendationDeleteArgs>(args: SelectSubset<T, RecommendationDeleteArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Recommendation.
     * @param {RecommendationUpdateArgs} args - Arguments to update one Recommendation.
     * @example
     * // Update one Recommendation
     * const recommendation = await prisma.recommendation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RecommendationUpdateArgs>(args: SelectSubset<T, RecommendationUpdateArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Recommendations.
     * @param {RecommendationDeleteManyArgs} args - Arguments to filter Recommendations to delete.
     * @example
     * // Delete a few Recommendations
     * const { count } = await prisma.recommendation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RecommendationDeleteManyArgs>(args?: SelectSubset<T, RecommendationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RecommendationUpdateManyArgs>(args: SelectSubset<T, RecommendationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recommendations and returns the data updated in the database.
     * @param {RecommendationUpdateManyAndReturnArgs} args - Arguments to update many Recommendations.
     * @example
     * // Update many Recommendations
     * const recommendation = await prisma.recommendation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Recommendations and only return the `id`
     * const recommendationWithIdOnly = await prisma.recommendation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RecommendationUpdateManyAndReturnArgs>(args: SelectSubset<T, RecommendationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Recommendation.
     * @param {RecommendationUpsertArgs} args - Arguments to update or create a Recommendation.
     * @example
     * // Update or create a Recommendation
     * const recommendation = await prisma.recommendation.upsert({
     *   create: {
     *     // ... data to create a Recommendation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recommendation we want to update
     *   }
     * })
     */
    upsert<T extends RecommendationUpsertArgs>(args: SelectSubset<T, RecommendationUpsertArgs<ExtArgs>>): Prisma__RecommendationClient<$Result.GetResult<Prisma.$RecommendationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Recommendations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationCountArgs} args - Arguments to filter Recommendations to count.
     * @example
     * // Count the number of Recommendations
     * const count = await prisma.recommendation.count({
     *   where: {
     *     // ... the filter for the Recommendations we want to count
     *   }
     * })
    **/
    count<T extends RecommendationCountArgs>(
      args?: Subset<T, RecommendationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecommendationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecommendationAggregateArgs>(args: Subset<T, RecommendationAggregateArgs>): Prisma.PrismaPromise<GetRecommendationAggregateType<T>>

    /**
     * Group by Recommendation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecommendationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecommendationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecommendationGroupByArgs['orderBy'] }
        : { orderBy?: RecommendationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecommendationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecommendationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recommendation model
   */
  readonly fields: RecommendationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recommendation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecommendationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Recommendation model
   */
  interface RecommendationFieldRefs {
    readonly id: FieldRef<"Recommendation", 'String'>
    readonly userId: FieldRef<"Recommendation", 'String'>
    readonly recommendationObjectType: FieldRef<"Recommendation", 'RecommendationObjectType'>
    readonly recommendationObjectId: FieldRef<"Recommendation", 'String'>
    readonly score: FieldRef<"Recommendation", 'Float'>
    readonly metadata: FieldRef<"Recommendation", 'Json'>
    readonly createdAt: FieldRef<"Recommendation", 'DateTime'>
    readonly updatedAt: FieldRef<"Recommendation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Recommendation findUnique
   */
  export type RecommendationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findUniqueOrThrow
   */
  export type RecommendationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation findFirst
   */
  export type RecommendationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findFirstOrThrow
   */
  export type RecommendationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendation to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recommendations.
     */
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation findMany
   */
  export type RecommendationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter, which Recommendations to fetch.
     */
    where?: RecommendationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recommendations to fetch.
     */
    orderBy?: RecommendationOrderByWithRelationInput | RecommendationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recommendations.
     */
    cursor?: RecommendationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recommendations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recommendations.
     */
    skip?: number
    distinct?: RecommendationScalarFieldEnum | RecommendationScalarFieldEnum[]
  }

  /**
   * Recommendation create
   */
  export type RecommendationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to create a Recommendation.
     */
    data: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
  }

  /**
   * Recommendation createMany
   */
  export type RecommendationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recommendations.
     */
    data: RecommendationCreateManyInput | RecommendationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Recommendation createManyAndReturn
   */
  export type RecommendationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * The data used to create many Recommendations.
     */
    data: RecommendationCreateManyInput | RecommendationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recommendation update
   */
  export type RecommendationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The data needed to update a Recommendation.
     */
    data: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
    /**
     * Choose, which Recommendation to update.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation updateMany
   */
  export type RecommendationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recommendations.
     */
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyInput>
    /**
     * Filter which Recommendations to update
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to update.
     */
    limit?: number
  }

  /**
   * Recommendation updateManyAndReturn
   */
  export type RecommendationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * The data used to update Recommendations.
     */
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyInput>
    /**
     * Filter which Recommendations to update
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Recommendation upsert
   */
  export type RecommendationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * The filter to search for the Recommendation to update in case it exists.
     */
    where: RecommendationWhereUniqueInput
    /**
     * In case the Recommendation found by the `where` argument doesn't exist, create a new Recommendation with this data.
     */
    create: XOR<RecommendationCreateInput, RecommendationUncheckedCreateInput>
    /**
     * In case the Recommendation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecommendationUpdateInput, RecommendationUncheckedUpdateInput>
  }

  /**
   * Recommendation delete
   */
  export type RecommendationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
    /**
     * Filter which Recommendation to delete.
     */
    where: RecommendationWhereUniqueInput
  }

  /**
   * Recommendation deleteMany
   */
  export type RecommendationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recommendations to delete
     */
    where?: RecommendationWhereInput
    /**
     * Limit how many Recommendations to delete.
     */
    limit?: number
  }

  /**
   * Recommendation without action
   */
  export type RecommendationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recommendation
     */
    select?: RecommendationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Recommendation
     */
    omit?: RecommendationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RecommendationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    profile: 'profile',
    picture: 'picture',
    age: 'age',
    username: 'username',
    timezone: 'timezone',
    clerkId: 'clerkId',
    language: 'language',
    planType: 'planType',
    lastActiveAt: 'lastActiveAt',
    email: 'email',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    isPwaInstalled: 'isPwaInstalled',
    isPwaNotificationsEnabled: 'isPwaNotificationsEnabled',
    lookingForAp: 'lookingForAp',
    pwaSubscriptionEndpoint: 'pwaSubscriptionEndpoint',
    pwaSubscriptionKey: 'pwaSubscriptionKey',
    pwaSubscriptionAuthToken: 'pwaSubscriptionAuthToken',
    unactivatedEmailSentAt: 'unactivatedEmailSentAt',
    themeBaseColor: 'themeBaseColor',
    defaultActivityVisibility: 'defaultActivityVisibility',
    recommendationsOutdated: 'recommendationsOutdated',
    recommendationsLastCalculatedAt: 'recommendationsLastCalculatedAt',
    dailyCheckinDays: 'dailyCheckinDays',
    dailyCheckinTime: 'dailyCheckinTime',
    stripeCustomerId: 'stripeCustomerId',
    stripeSubscriptionId: 'stripeSubscriptionId',
    stripeSubscriptionStatus: 'stripeSubscriptionStatus',
    referredById: 'referredById'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ConnectionScalarFieldEnum: {
    id: 'id',
    fromId: 'fromId',
    toId: 'toId',
    status: 'status',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConnectionScalarFieldEnum = (typeof ConnectionScalarFieldEnum)[keyof typeof ConnectionScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    measure: 'measure',
    emoji: 'emoji',
    createdAt: 'createdAt',
    privacySettings: 'privacySettings',
    colorHex: 'colorHex',
    deletedAt: 'deletedAt'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const ActivityEntryScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    userId: 'userId',
    quantity: 'quantity',
    date: 'date',
    createdAt: 'createdAt',
    description: 'description',
    deletedAt: 'deletedAt',
    timezone: 'timezone',
    imageS3Path: 'imageS3Path',
    imageUrl: 'imageUrl',
    imageExpiresAt: 'imageExpiresAt',
    imageCreatedAt: 'imageCreatedAt',
    imageIsPublic: 'imageIsPublic'
  };

  export type ActivityEntryScalarFieldEnum = (typeof ActivityEntryScalarFieldEnum)[keyof typeof ActivityEntryScalarFieldEnum]


  export const ReactionScalarFieldEnum: {
    id: 'id',
    activityEntryId: 'activityEntryId',
    userId: 'userId',
    emoji: 'emoji',
    createdAt: 'createdAt'
  };

  export type ReactionScalarFieldEnum = (typeof ReactionScalarFieldEnum)[keyof typeof ReactionScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    activityEntryId: 'activityEntryId',
    userId: 'userId',
    username: 'username',
    text: 'text',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    picture: 'picture'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const MetricScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    emoji: 'emoji',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MetricScalarFieldEnum = (typeof MetricScalarFieldEnum)[keyof typeof MetricScalarFieldEnum]


  export const MetricEntryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    metricId: 'metricId',
    rating: 'rating',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    description: 'description',
    skipped: 'skipped',
    descriptionSkipped: 'descriptionSkipped'
  };

  export type MetricEntryScalarFieldEnum = (typeof MetricEntryScalarFieldEnum)[keyof typeof MetricEntryScalarFieldEnum]


  export const PlanScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    planGroupId: 'planGroupId',
    goal: 'goal',
    emoji: 'emoji',
    finishingDate: 'finishingDate',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    durationType: 'durationType',
    outlineType: 'outlineType',
    timesPerWeek: 'timesPerWeek',
    coachSuggestedTimesPerWeek: 'coachSuggestedTimesPerWeek',
    notes: 'notes',
    coachNotes: 'coachNotes',
    suggestedByCoachAt: 'suggestedByCoachAt',
    sortOrder: 'sortOrder',
    currentWeekState: 'currentWeekState',
    currentWeekStateCalculatedAt: 'currentWeekStateCalculatedAt'
  };

  export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


  export const PlanSessionScalarFieldEnum: {
    id: 'id',
    planId: 'planId',
    isCoachSuggested: 'isCoachSuggested',
    activityId: 'activityId',
    date: 'date',
    descriptiveGuide: 'descriptiveGuide',
    quantity: 'quantity',
    createdAt: 'createdAt'
  };

  export type PlanSessionScalarFieldEnum = (typeof PlanSessionScalarFieldEnum)[keyof typeof PlanSessionScalarFieldEnum]


  export const PlanMilestoneScalarFieldEnum: {
    id: 'id',
    planId: 'planId',
    date: 'date',
    description: 'description',
    progress: 'progress',
    criteria: 'criteria',
    createdAt: 'createdAt'
  };

  export type PlanMilestoneScalarFieldEnum = (typeof PlanMilestoneScalarFieldEnum)[keyof typeof PlanMilestoneScalarFieldEnum]


  export const PlanGroupScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt'
  };

  export type PlanGroupScalarFieldEnum = (typeof PlanGroupScalarFieldEnum)[keyof typeof PlanGroupScalarFieldEnum]


  export const PlanInvitationScalarFieldEnum: {
    id: 'id',
    planId: 'planId',
    senderId: 'senderId',
    recipientId: 'recipientId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlanInvitationScalarFieldEnum = (typeof PlanInvitationScalarFieldEnum)[keyof typeof PlanInvitationScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    role: 'role',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const MessageEmotionScalarFieldEnum: {
    id: 'id',
    messageId: 'messageId',
    name: 'name',
    score: 'score',
    color: 'color'
  };

  export type MessageEmotionScalarFieldEnum = (typeof MessageEmotionScalarFieldEnum)[keyof typeof MessageEmotionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    message: 'message',
    createdAt: 'createdAt',
    sentAt: 'sentAt',
    processedAt: 'processedAt',
    openedAt: 'openedAt',
    concludedAt: 'concludedAt',
    promptTag: 'promptTag',
    status: 'status',
    type: 'type',
    relatedId: 'relatedId',
    relatedData: 'relatedData'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const RecommendationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    recommendationObjectType: 'recommendationObjectType',
    recommendationObjectId: 'recommendationObjectId',
    score: 'score',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RecommendationScalarFieldEnum = (typeof RecommendationScalarFieldEnum)[keyof typeof RecommendationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'PlanType'
   */
  export type EnumPlanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanType'>
    


  /**
   * Reference to a field of type 'PlanType[]'
   */
  export type ListEnumPlanTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'ThemeColor'
   */
  export type EnumThemeColorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ThemeColor'>
    


  /**
   * Reference to a field of type 'ThemeColor[]'
   */
  export type ListEnumThemeColorFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ThemeColor[]'>
    


  /**
   * Reference to a field of type 'ActivityVisibility'
   */
  export type EnumActivityVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActivityVisibility'>
    


  /**
   * Reference to a field of type 'ActivityVisibility[]'
   */
  export type ListEnumActivityVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ActivityVisibility[]'>
    


  /**
   * Reference to a field of type 'DailyCheckinTime'
   */
  export type EnumDailyCheckinTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DailyCheckinTime'>
    


  /**
   * Reference to a field of type 'DailyCheckinTime[]'
   */
  export type ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DailyCheckinTime[]'>
    


  /**
   * Reference to a field of type 'ConnectionStatus'
   */
  export type EnumConnectionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConnectionStatus'>
    


  /**
   * Reference to a field of type 'ConnectionStatus[]'
   */
  export type ListEnumConnectionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConnectionStatus[]'>
    


  /**
   * Reference to a field of type 'PlanDurationType'
   */
  export type EnumPlanDurationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanDurationType'>
    


  /**
   * Reference to a field of type 'PlanDurationType[]'
   */
  export type ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanDurationType[]'>
    


  /**
   * Reference to a field of type 'PlanOutlineType'
   */
  export type EnumPlanOutlineTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanOutlineType'>
    


  /**
   * Reference to a field of type 'PlanOutlineType[]'
   */
  export type ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanOutlineType[]'>
    


  /**
   * Reference to a field of type 'PlanState'
   */
  export type EnumPlanStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanState'>
    


  /**
   * Reference to a field of type 'PlanState[]'
   */
  export type ListEnumPlanStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PlanState[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'InvitationStatus'
   */
  export type EnumInvitationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvitationStatus'>
    


  /**
   * Reference to a field of type 'InvitationStatus[]'
   */
  export type ListEnumInvitationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InvitationStatus[]'>
    


  /**
   * Reference to a field of type 'MessageRole'
   */
  export type EnumMessageRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageRole'>
    


  /**
   * Reference to a field of type 'MessageRole[]'
   */
  export type ListEnumMessageRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MessageRole[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'NotificationStatus'
   */
  export type EnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus'>
    


  /**
   * Reference to a field of type 'NotificationStatus[]'
   */
  export type ListEnumNotificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'RecommendationObjectType'
   */
  export type EnumRecommendationObjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RecommendationObjectType'>
    


  /**
   * Reference to a field of type 'RecommendationObjectType[]'
   */
  export type ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RecommendationObjectType[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    profile?: StringNullableFilter<"User"> | string | null
    picture?: StringNullableFilter<"User"> | string | null
    age?: IntNullableFilter<"User"> | number | null
    username?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    clerkId?: StringNullableFilter<"User"> | string | null
    language?: StringNullableFilter<"User"> | string | null
    planType?: EnumPlanTypeFilter<"User"> | $Enums.PlanType
    lastActiveAt?: DateTimeNullableFilter<"User"> | Date | string | null
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    isPwaInstalled?: BoolFilter<"User"> | boolean
    isPwaNotificationsEnabled?: BoolFilter<"User"> | boolean
    lookingForAp?: BoolNullableFilter<"User"> | boolean | null
    pwaSubscriptionEndpoint?: StringNullableFilter<"User"> | string | null
    pwaSubscriptionKey?: StringNullableFilter<"User"> | string | null
    pwaSubscriptionAuthToken?: StringNullableFilter<"User"> | string | null
    unactivatedEmailSentAt?: DateTimeNullableFilter<"User"> | Date | string | null
    themeBaseColor?: EnumThemeColorFilter<"User"> | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFilter<"User"> | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFilter<"User"> | boolean
    recommendationsLastCalculatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    dailyCheckinDays?: StringNullableListFilter<"User">
    dailyCheckinTime?: EnumDailyCheckinTimeNullableFilter<"User"> | $Enums.DailyCheckinTime | null
    stripeCustomerId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionStatus?: StringNullableFilter<"User"> | string | null
    referredById?: StringNullableFilter<"User"> | string | null
    activities?: ActivityListRelationFilter
    activityEntries?: ActivityEntryListRelationFilter
    metrics?: MetricListRelationFilter
    metricEntries?: MetricEntryListRelationFilter
    plans?: PlanListRelationFilter
    messages?: MessageListRelationFilter
    notifications?: NotificationListRelationFilter
    planInvitationsSent?: PlanInvitationListRelationFilter
    planInvitationsReceived?: PlanInvitationListRelationFilter
    planGroupMemberships?: PlanGroupListRelationFilter
    recommendations?: RecommendationListRelationFilter
    reactionsSent?: ReactionListRelationFilter
    connectionsFrom?: ConnectionListRelationFilter
    connectionsTo?: ConnectionListRelationFilter
    referredUsers?: UserListRelationFilter
    referredBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    profile?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    clerkId?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    planType?: SortOrder
    lastActiveAt?: SortOrderInput | SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    isPwaInstalled?: SortOrder
    isPwaNotificationsEnabled?: SortOrder
    lookingForAp?: SortOrderInput | SortOrder
    pwaSubscriptionEndpoint?: SortOrderInput | SortOrder
    pwaSubscriptionKey?: SortOrderInput | SortOrder
    pwaSubscriptionAuthToken?: SortOrderInput | SortOrder
    unactivatedEmailSentAt?: SortOrderInput | SortOrder
    themeBaseColor?: SortOrder
    defaultActivityVisibility?: SortOrder
    recommendationsOutdated?: SortOrder
    recommendationsLastCalculatedAt?: SortOrderInput | SortOrder
    dailyCheckinDays?: SortOrder
    dailyCheckinTime?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    stripeSubscriptionStatus?: SortOrderInput | SortOrder
    referredById?: SortOrderInput | SortOrder
    activities?: ActivityOrderByRelationAggregateInput
    activityEntries?: ActivityEntryOrderByRelationAggregateInput
    metrics?: MetricOrderByRelationAggregateInput
    metricEntries?: MetricEntryOrderByRelationAggregateInput
    plans?: PlanOrderByRelationAggregateInput
    messages?: MessageOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    planInvitationsSent?: PlanInvitationOrderByRelationAggregateInput
    planInvitationsReceived?: PlanInvitationOrderByRelationAggregateInput
    planGroupMemberships?: PlanGroupOrderByRelationAggregateInput
    recommendations?: RecommendationOrderByRelationAggregateInput
    reactionsSent?: ReactionOrderByRelationAggregateInput
    connectionsFrom?: ConnectionOrderByRelationAggregateInput
    connectionsTo?: ConnectionOrderByRelationAggregateInput
    referredUsers?: UserOrderByRelationAggregateInput
    referredBy?: UserOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    clerkId?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    profile?: StringNullableFilter<"User"> | string | null
    picture?: StringNullableFilter<"User"> | string | null
    age?: IntNullableFilter<"User"> | number | null
    timezone?: StringNullableFilter<"User"> | string | null
    language?: StringNullableFilter<"User"> | string | null
    planType?: EnumPlanTypeFilter<"User"> | $Enums.PlanType
    lastActiveAt?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    isPwaInstalled?: BoolFilter<"User"> | boolean
    isPwaNotificationsEnabled?: BoolFilter<"User"> | boolean
    lookingForAp?: BoolNullableFilter<"User"> | boolean | null
    pwaSubscriptionEndpoint?: StringNullableFilter<"User"> | string | null
    pwaSubscriptionKey?: StringNullableFilter<"User"> | string | null
    pwaSubscriptionAuthToken?: StringNullableFilter<"User"> | string | null
    unactivatedEmailSentAt?: DateTimeNullableFilter<"User"> | Date | string | null
    themeBaseColor?: EnumThemeColorFilter<"User"> | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFilter<"User"> | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFilter<"User"> | boolean
    recommendationsLastCalculatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    dailyCheckinDays?: StringNullableListFilter<"User">
    dailyCheckinTime?: EnumDailyCheckinTimeNullableFilter<"User"> | $Enums.DailyCheckinTime | null
    stripeCustomerId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionStatus?: StringNullableFilter<"User"> | string | null
    referredById?: StringNullableFilter<"User"> | string | null
    activities?: ActivityListRelationFilter
    activityEntries?: ActivityEntryListRelationFilter
    metrics?: MetricListRelationFilter
    metricEntries?: MetricEntryListRelationFilter
    plans?: PlanListRelationFilter
    messages?: MessageListRelationFilter
    notifications?: NotificationListRelationFilter
    planInvitationsSent?: PlanInvitationListRelationFilter
    planInvitationsReceived?: PlanInvitationListRelationFilter
    planGroupMemberships?: PlanGroupListRelationFilter
    recommendations?: RecommendationListRelationFilter
    reactionsSent?: ReactionListRelationFilter
    connectionsFrom?: ConnectionListRelationFilter
    connectionsTo?: ConnectionListRelationFilter
    referredUsers?: UserListRelationFilter
    referredBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id" | "username" | "clerkId" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    profile?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    age?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    clerkId?: SortOrderInput | SortOrder
    language?: SortOrderInput | SortOrder
    planType?: SortOrder
    lastActiveAt?: SortOrderInput | SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    isPwaInstalled?: SortOrder
    isPwaNotificationsEnabled?: SortOrder
    lookingForAp?: SortOrderInput | SortOrder
    pwaSubscriptionEndpoint?: SortOrderInput | SortOrder
    pwaSubscriptionKey?: SortOrderInput | SortOrder
    pwaSubscriptionAuthToken?: SortOrderInput | SortOrder
    unactivatedEmailSentAt?: SortOrderInput | SortOrder
    themeBaseColor?: SortOrder
    defaultActivityVisibility?: SortOrder
    recommendationsOutdated?: SortOrder
    recommendationsLastCalculatedAt?: SortOrderInput | SortOrder
    dailyCheckinDays?: SortOrder
    dailyCheckinTime?: SortOrderInput | SortOrder
    stripeCustomerId?: SortOrderInput | SortOrder
    stripeSubscriptionId?: SortOrderInput | SortOrder
    stripeSubscriptionStatus?: SortOrderInput | SortOrder
    referredById?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    profile?: StringNullableWithAggregatesFilter<"User"> | string | null
    picture?: StringNullableWithAggregatesFilter<"User"> | string | null
    age?: IntNullableWithAggregatesFilter<"User"> | number | null
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"User"> | string | null
    clerkId?: StringNullableWithAggregatesFilter<"User"> | string | null
    language?: StringNullableWithAggregatesFilter<"User"> | string | null
    planType?: EnumPlanTypeWithAggregatesFilter<"User"> | $Enums.PlanType
    lastActiveAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    isPwaInstalled?: BoolWithAggregatesFilter<"User"> | boolean
    isPwaNotificationsEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    lookingForAp?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    pwaSubscriptionEndpoint?: StringNullableWithAggregatesFilter<"User"> | string | null
    pwaSubscriptionKey?: StringNullableWithAggregatesFilter<"User"> | string | null
    pwaSubscriptionAuthToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    unactivatedEmailSentAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    themeBaseColor?: EnumThemeColorWithAggregatesFilter<"User"> | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityWithAggregatesFilter<"User"> | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolWithAggregatesFilter<"User"> | boolean
    recommendationsLastCalculatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    dailyCheckinDays?: StringNullableListFilter<"User">
    dailyCheckinTime?: EnumDailyCheckinTimeNullableWithAggregatesFilter<"User"> | $Enums.DailyCheckinTime | null
    stripeCustomerId?: StringNullableWithAggregatesFilter<"User"> | string | null
    stripeSubscriptionId?: StringNullableWithAggregatesFilter<"User"> | string | null
    stripeSubscriptionStatus?: StringNullableWithAggregatesFilter<"User"> | string | null
    referredById?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ConnectionWhereInput = {
    AND?: ConnectionWhereInput | ConnectionWhereInput[]
    OR?: ConnectionWhereInput[]
    NOT?: ConnectionWhereInput | ConnectionWhereInput[]
    id?: StringFilter<"Connection"> | string
    fromId?: StringFilter<"Connection"> | string
    toId?: StringFilter<"Connection"> | string
    status?: EnumConnectionStatusFilter<"Connection"> | $Enums.ConnectionStatus
    message?: StringNullableFilter<"Connection"> | string | null
    createdAt?: DateTimeFilter<"Connection"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Connection"> | Date | string | null
    from?: XOR<UserScalarRelationFilter, UserWhereInput>
    to?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ConnectionOrderByWithRelationInput = {
    id?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    from?: UserOrderByWithRelationInput
    to?: UserOrderByWithRelationInput
  }

  export type ConnectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    fromId_toId?: ConnectionFromIdToIdCompoundUniqueInput
    AND?: ConnectionWhereInput | ConnectionWhereInput[]
    OR?: ConnectionWhereInput[]
    NOT?: ConnectionWhereInput | ConnectionWhereInput[]
    fromId?: StringFilter<"Connection"> | string
    toId?: StringFilter<"Connection"> | string
    status?: EnumConnectionStatusFilter<"Connection"> | $Enums.ConnectionStatus
    message?: StringNullableFilter<"Connection"> | string | null
    createdAt?: DateTimeFilter<"Connection"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Connection"> | Date | string | null
    from?: XOR<UserScalarRelationFilter, UserWhereInput>
    to?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "fromId_toId">

  export type ConnectionOrderByWithAggregationInput = {
    id?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    status?: SortOrder
    message?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: ConnectionCountOrderByAggregateInput
    _max?: ConnectionMaxOrderByAggregateInput
    _min?: ConnectionMinOrderByAggregateInput
  }

  export type ConnectionScalarWhereWithAggregatesInput = {
    AND?: ConnectionScalarWhereWithAggregatesInput | ConnectionScalarWhereWithAggregatesInput[]
    OR?: ConnectionScalarWhereWithAggregatesInput[]
    NOT?: ConnectionScalarWhereWithAggregatesInput | ConnectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Connection"> | string
    fromId?: StringWithAggregatesFilter<"Connection"> | string
    toId?: StringWithAggregatesFilter<"Connection"> | string
    status?: EnumConnectionStatusWithAggregatesFilter<"Connection"> | $Enums.ConnectionStatus
    message?: StringNullableWithAggregatesFilter<"Connection"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Connection"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Connection"> | Date | string | null
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    id?: StringFilter<"Activity"> | string
    userId?: StringFilter<"Activity"> | string
    title?: StringFilter<"Activity"> | string
    measure?: StringFilter<"Activity"> | string
    emoji?: StringFilter<"Activity"> | string
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    privacySettings?: EnumActivityVisibilityNullableFilter<"Activity"> | $Enums.ActivityVisibility | null
    colorHex?: StringNullableFilter<"Activity"> | string | null
    deletedAt?: DateTimeNullableFilter<"Activity"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    entries?: ActivityEntryListRelationFilter
    planSessions?: PlanSessionListRelationFilter
    plans?: PlanListRelationFilter
  }

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    measure?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    privacySettings?: SortOrderInput | SortOrder
    colorHex?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    entries?: ActivityEntryOrderByRelationAggregateInput
    planSessions?: PlanSessionOrderByRelationAggregateInput
    plans?: PlanOrderByRelationAggregateInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    userId?: StringFilter<"Activity"> | string
    title?: StringFilter<"Activity"> | string
    measure?: StringFilter<"Activity"> | string
    emoji?: StringFilter<"Activity"> | string
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    privacySettings?: EnumActivityVisibilityNullableFilter<"Activity"> | $Enums.ActivityVisibility | null
    colorHex?: StringNullableFilter<"Activity"> | string | null
    deletedAt?: DateTimeNullableFilter<"Activity"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    entries?: ActivityEntryListRelationFilter
    planSessions?: PlanSessionListRelationFilter
    plans?: PlanListRelationFilter
  }, "id">

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    measure?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    privacySettings?: SortOrderInput | SortOrder
    colorHex?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Activity"> | string
    userId?: StringWithAggregatesFilter<"Activity"> | string
    title?: StringWithAggregatesFilter<"Activity"> | string
    measure?: StringWithAggregatesFilter<"Activity"> | string
    emoji?: StringWithAggregatesFilter<"Activity"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    privacySettings?: EnumActivityVisibilityNullableWithAggregatesFilter<"Activity"> | $Enums.ActivityVisibility | null
    colorHex?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Activity"> | Date | string | null
  }

  export type ActivityEntryWhereInput = {
    AND?: ActivityEntryWhereInput | ActivityEntryWhereInput[]
    OR?: ActivityEntryWhereInput[]
    NOT?: ActivityEntryWhereInput | ActivityEntryWhereInput[]
    id?: StringFilter<"ActivityEntry"> | string
    activityId?: StringFilter<"ActivityEntry"> | string
    userId?: StringFilter<"ActivityEntry"> | string
    quantity?: IntFilter<"ActivityEntry"> | number
    date?: DateTimeFilter<"ActivityEntry"> | Date | string
    createdAt?: DateTimeFilter<"ActivityEntry"> | Date | string
    description?: StringNullableFilter<"ActivityEntry"> | string | null
    deletedAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    timezone?: StringNullableFilter<"ActivityEntry"> | string | null
    imageS3Path?: StringNullableFilter<"ActivityEntry"> | string | null
    imageUrl?: StringNullableFilter<"ActivityEntry"> | string | null
    imageExpiresAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    imageCreatedAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    imageIsPublic?: BoolFilter<"ActivityEntry"> | boolean
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    reactions?: ReactionListRelationFilter
    comments?: CommentListRelationFilter
  }

  export type ActivityEntryOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    imageS3Path?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    imageExpiresAt?: SortOrderInput | SortOrder
    imageCreatedAt?: SortOrderInput | SortOrder
    imageIsPublic?: SortOrder
    activity?: ActivityOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    reactions?: ReactionOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
  }

  export type ActivityEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ActivityEntryWhereInput | ActivityEntryWhereInput[]
    OR?: ActivityEntryWhereInput[]
    NOT?: ActivityEntryWhereInput | ActivityEntryWhereInput[]
    activityId?: StringFilter<"ActivityEntry"> | string
    userId?: StringFilter<"ActivityEntry"> | string
    quantity?: IntFilter<"ActivityEntry"> | number
    date?: DateTimeFilter<"ActivityEntry"> | Date | string
    createdAt?: DateTimeFilter<"ActivityEntry"> | Date | string
    description?: StringNullableFilter<"ActivityEntry"> | string | null
    deletedAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    timezone?: StringNullableFilter<"ActivityEntry"> | string | null
    imageS3Path?: StringNullableFilter<"ActivityEntry"> | string | null
    imageUrl?: StringNullableFilter<"ActivityEntry"> | string | null
    imageExpiresAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    imageCreatedAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    imageIsPublic?: BoolFilter<"ActivityEntry"> | boolean
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    reactions?: ReactionListRelationFilter
    comments?: CommentListRelationFilter
  }, "id">

  export type ActivityEntryOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    description?: SortOrderInput | SortOrder
    deletedAt?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    imageS3Path?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    imageExpiresAt?: SortOrderInput | SortOrder
    imageCreatedAt?: SortOrderInput | SortOrder
    imageIsPublic?: SortOrder
    _count?: ActivityEntryCountOrderByAggregateInput
    _avg?: ActivityEntryAvgOrderByAggregateInput
    _max?: ActivityEntryMaxOrderByAggregateInput
    _min?: ActivityEntryMinOrderByAggregateInput
    _sum?: ActivityEntrySumOrderByAggregateInput
  }

  export type ActivityEntryScalarWhereWithAggregatesInput = {
    AND?: ActivityEntryScalarWhereWithAggregatesInput | ActivityEntryScalarWhereWithAggregatesInput[]
    OR?: ActivityEntryScalarWhereWithAggregatesInput[]
    NOT?: ActivityEntryScalarWhereWithAggregatesInput | ActivityEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ActivityEntry"> | string
    activityId?: StringWithAggregatesFilter<"ActivityEntry"> | string
    userId?: StringWithAggregatesFilter<"ActivityEntry"> | string
    quantity?: IntWithAggregatesFilter<"ActivityEntry"> | number
    date?: DateTimeWithAggregatesFilter<"ActivityEntry"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ActivityEntry"> | Date | string
    description?: StringNullableWithAggregatesFilter<"ActivityEntry"> | string | null
    deletedAt?: DateTimeNullableWithAggregatesFilter<"ActivityEntry"> | Date | string | null
    timezone?: StringNullableWithAggregatesFilter<"ActivityEntry"> | string | null
    imageS3Path?: StringNullableWithAggregatesFilter<"ActivityEntry"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"ActivityEntry"> | string | null
    imageExpiresAt?: DateTimeNullableWithAggregatesFilter<"ActivityEntry"> | Date | string | null
    imageCreatedAt?: DateTimeNullableWithAggregatesFilter<"ActivityEntry"> | Date | string | null
    imageIsPublic?: BoolWithAggregatesFilter<"ActivityEntry"> | boolean
  }

  export type ReactionWhereInput = {
    AND?: ReactionWhereInput | ReactionWhereInput[]
    OR?: ReactionWhereInput[]
    NOT?: ReactionWhereInput | ReactionWhereInput[]
    id?: StringFilter<"Reaction"> | string
    activityEntryId?: StringFilter<"Reaction"> | string
    userId?: StringFilter<"Reaction"> | string
    emoji?: StringFilter<"Reaction"> | string
    createdAt?: DateTimeFilter<"Reaction"> | Date | string
    activityEntry?: XOR<ActivityEntryScalarRelationFilter, ActivityEntryWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReactionOrderByWithRelationInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    activityEntry?: ActivityEntryOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ReactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    activityEntryId_userId_emoji?: ReactionActivityEntryIdUserIdEmojiCompoundUniqueInput
    AND?: ReactionWhereInput | ReactionWhereInput[]
    OR?: ReactionWhereInput[]
    NOT?: ReactionWhereInput | ReactionWhereInput[]
    activityEntryId?: StringFilter<"Reaction"> | string
    userId?: StringFilter<"Reaction"> | string
    emoji?: StringFilter<"Reaction"> | string
    createdAt?: DateTimeFilter<"Reaction"> | Date | string
    activityEntry?: XOR<ActivityEntryScalarRelationFilter, ActivityEntryWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "activityEntryId_userId_emoji">

  export type ReactionOrderByWithAggregationInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    _count?: ReactionCountOrderByAggregateInput
    _max?: ReactionMaxOrderByAggregateInput
    _min?: ReactionMinOrderByAggregateInput
  }

  export type ReactionScalarWhereWithAggregatesInput = {
    AND?: ReactionScalarWhereWithAggregatesInput | ReactionScalarWhereWithAggregatesInput[]
    OR?: ReactionScalarWhereWithAggregatesInput[]
    NOT?: ReactionScalarWhereWithAggregatesInput | ReactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reaction"> | string
    activityEntryId?: StringWithAggregatesFilter<"Reaction"> | string
    userId?: StringWithAggregatesFilter<"Reaction"> | string
    emoji?: StringWithAggregatesFilter<"Reaction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Reaction"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    activityEntryId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    username?: StringFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Comment"> | Date | string | null
    picture?: StringNullableFilter<"Comment"> | string | null
    activityEntry?: XOR<ActivityEntryScalarRelationFilter, ActivityEntryWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    activityEntry?: ActivityEntryOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    activityEntryId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    username?: StringFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Comment"> | Date | string | null
    picture?: StringNullableFilter<"Comment"> | string | null
    activityEntry?: XOR<ActivityEntryScalarRelationFilter, ActivityEntryWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    activityEntryId?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    username?: StringWithAggregatesFilter<"Comment"> | string
    text?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Comment"> | Date | string | null
    picture?: StringNullableWithAggregatesFilter<"Comment"> | string | null
  }

  export type MetricWhereInput = {
    AND?: MetricWhereInput | MetricWhereInput[]
    OR?: MetricWhereInput[]
    NOT?: MetricWhereInput | MetricWhereInput[]
    id?: StringFilter<"Metric"> | string
    userId?: StringFilter<"Metric"> | string
    title?: StringFilter<"Metric"> | string
    emoji?: StringFilter<"Metric"> | string
    createdAt?: DateTimeFilter<"Metric"> | Date | string
    updatedAt?: DateTimeFilter<"Metric"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    entries?: MetricEntryListRelationFilter
  }

  export type MetricOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    entries?: MetricEntryOrderByRelationAggregateInput
  }

  export type MetricWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MetricWhereInput | MetricWhereInput[]
    OR?: MetricWhereInput[]
    NOT?: MetricWhereInput | MetricWhereInput[]
    userId?: StringFilter<"Metric"> | string
    title?: StringFilter<"Metric"> | string
    emoji?: StringFilter<"Metric"> | string
    createdAt?: DateTimeFilter<"Metric"> | Date | string
    updatedAt?: DateTimeFilter<"Metric"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    entries?: MetricEntryListRelationFilter
  }, "id">

  export type MetricOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MetricCountOrderByAggregateInput
    _max?: MetricMaxOrderByAggregateInput
    _min?: MetricMinOrderByAggregateInput
  }

  export type MetricScalarWhereWithAggregatesInput = {
    AND?: MetricScalarWhereWithAggregatesInput | MetricScalarWhereWithAggregatesInput[]
    OR?: MetricScalarWhereWithAggregatesInput[]
    NOT?: MetricScalarWhereWithAggregatesInput | MetricScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Metric"> | string
    userId?: StringWithAggregatesFilter<"Metric"> | string
    title?: StringWithAggregatesFilter<"Metric"> | string
    emoji?: StringWithAggregatesFilter<"Metric"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Metric"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Metric"> | Date | string
  }

  export type MetricEntryWhereInput = {
    AND?: MetricEntryWhereInput | MetricEntryWhereInput[]
    OR?: MetricEntryWhereInput[]
    NOT?: MetricEntryWhereInput | MetricEntryWhereInput[]
    id?: StringFilter<"MetricEntry"> | string
    userId?: StringFilter<"MetricEntry"> | string
    metricId?: StringFilter<"MetricEntry"> | string
    rating?: IntFilter<"MetricEntry"> | number
    date?: DateTimeFilter<"MetricEntry"> | Date | string
    createdAt?: DateTimeFilter<"MetricEntry"> | Date | string
    updatedAt?: DateTimeFilter<"MetricEntry"> | Date | string
    description?: StringNullableFilter<"MetricEntry"> | string | null
    skipped?: BoolFilter<"MetricEntry"> | boolean
    descriptionSkipped?: BoolFilter<"MetricEntry"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    metric?: XOR<MetricScalarRelationFilter, MetricWhereInput>
  }

  export type MetricEntryOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    metricId?: SortOrder
    rating?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrderInput | SortOrder
    skipped?: SortOrder
    descriptionSkipped?: SortOrder
    user?: UserOrderByWithRelationInput
    metric?: MetricOrderByWithRelationInput
  }

  export type MetricEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MetricEntryWhereInput | MetricEntryWhereInput[]
    OR?: MetricEntryWhereInput[]
    NOT?: MetricEntryWhereInput | MetricEntryWhereInput[]
    userId?: StringFilter<"MetricEntry"> | string
    metricId?: StringFilter<"MetricEntry"> | string
    rating?: IntFilter<"MetricEntry"> | number
    date?: DateTimeFilter<"MetricEntry"> | Date | string
    createdAt?: DateTimeFilter<"MetricEntry"> | Date | string
    updatedAt?: DateTimeFilter<"MetricEntry"> | Date | string
    description?: StringNullableFilter<"MetricEntry"> | string | null
    skipped?: BoolFilter<"MetricEntry"> | boolean
    descriptionSkipped?: BoolFilter<"MetricEntry"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    metric?: XOR<MetricScalarRelationFilter, MetricWhereInput>
  }, "id">

  export type MetricEntryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    metricId?: SortOrder
    rating?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrderInput | SortOrder
    skipped?: SortOrder
    descriptionSkipped?: SortOrder
    _count?: MetricEntryCountOrderByAggregateInput
    _avg?: MetricEntryAvgOrderByAggregateInput
    _max?: MetricEntryMaxOrderByAggregateInput
    _min?: MetricEntryMinOrderByAggregateInput
    _sum?: MetricEntrySumOrderByAggregateInput
  }

  export type MetricEntryScalarWhereWithAggregatesInput = {
    AND?: MetricEntryScalarWhereWithAggregatesInput | MetricEntryScalarWhereWithAggregatesInput[]
    OR?: MetricEntryScalarWhereWithAggregatesInput[]
    NOT?: MetricEntryScalarWhereWithAggregatesInput | MetricEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MetricEntry"> | string
    userId?: StringWithAggregatesFilter<"MetricEntry"> | string
    metricId?: StringWithAggregatesFilter<"MetricEntry"> | string
    rating?: IntWithAggregatesFilter<"MetricEntry"> | number
    date?: DateTimeWithAggregatesFilter<"MetricEntry"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MetricEntry"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MetricEntry"> | Date | string
    description?: StringNullableWithAggregatesFilter<"MetricEntry"> | string | null
    skipped?: BoolWithAggregatesFilter<"MetricEntry"> | boolean
    descriptionSkipped?: BoolWithAggregatesFilter<"MetricEntry"> | boolean
  }

  export type PlanWhereInput = {
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    id?: StringFilter<"Plan"> | string
    userId?: StringFilter<"Plan"> | string
    planGroupId?: StringNullableFilter<"Plan"> | string | null
    goal?: StringFilter<"Plan"> | string
    emoji?: StringNullableFilter<"Plan"> | string | null
    finishingDate?: DateTimeNullableFilter<"Plan"> | Date | string | null
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
    durationType?: EnumPlanDurationTypeNullableFilter<"Plan"> | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFilter<"Plan"> | $Enums.PlanOutlineType
    timesPerWeek?: IntNullableFilter<"Plan"> | number | null
    coachSuggestedTimesPerWeek?: IntNullableFilter<"Plan"> | number | null
    notes?: StringNullableFilter<"Plan"> | string | null
    coachNotes?: StringNullableFilter<"Plan"> | string | null
    suggestedByCoachAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
    sortOrder?: IntNullableFilter<"Plan"> | number | null
    currentWeekState?: EnumPlanStateFilter<"Plan"> | $Enums.PlanState
    currentWeekStateCalculatedAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    planGroup?: XOR<PlanGroupNullableScalarRelationFilter, PlanGroupWhereInput> | null
    sessions?: PlanSessionListRelationFilter
    activities?: ActivityListRelationFilter
    invitations?: PlanInvitationListRelationFilter
    milestones?: PlanMilestoneListRelationFilter
  }

  export type PlanOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    planGroupId?: SortOrderInput | SortOrder
    goal?: SortOrder
    emoji?: SortOrderInput | SortOrder
    finishingDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    durationType?: SortOrderInput | SortOrder
    outlineType?: SortOrder
    timesPerWeek?: SortOrderInput | SortOrder
    coachSuggestedTimesPerWeek?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    coachNotes?: SortOrderInput | SortOrder
    suggestedByCoachAt?: SortOrderInput | SortOrder
    sortOrder?: SortOrderInput | SortOrder
    currentWeekState?: SortOrder
    currentWeekStateCalculatedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    planGroup?: PlanGroupOrderByWithRelationInput
    sessions?: PlanSessionOrderByRelationAggregateInput
    activities?: ActivityOrderByRelationAggregateInput
    invitations?: PlanInvitationOrderByRelationAggregateInput
    milestones?: PlanMilestoneOrderByRelationAggregateInput
  }

  export type PlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    userId?: StringFilter<"Plan"> | string
    planGroupId?: StringNullableFilter<"Plan"> | string | null
    goal?: StringFilter<"Plan"> | string
    emoji?: StringNullableFilter<"Plan"> | string | null
    finishingDate?: DateTimeNullableFilter<"Plan"> | Date | string | null
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
    durationType?: EnumPlanDurationTypeNullableFilter<"Plan"> | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFilter<"Plan"> | $Enums.PlanOutlineType
    timesPerWeek?: IntNullableFilter<"Plan"> | number | null
    coachSuggestedTimesPerWeek?: IntNullableFilter<"Plan"> | number | null
    notes?: StringNullableFilter<"Plan"> | string | null
    coachNotes?: StringNullableFilter<"Plan"> | string | null
    suggestedByCoachAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
    sortOrder?: IntNullableFilter<"Plan"> | number | null
    currentWeekState?: EnumPlanStateFilter<"Plan"> | $Enums.PlanState
    currentWeekStateCalculatedAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    planGroup?: XOR<PlanGroupNullableScalarRelationFilter, PlanGroupWhereInput> | null
    sessions?: PlanSessionListRelationFilter
    activities?: ActivityListRelationFilter
    invitations?: PlanInvitationListRelationFilter
    milestones?: PlanMilestoneListRelationFilter
  }, "id">

  export type PlanOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    planGroupId?: SortOrderInput | SortOrder
    goal?: SortOrder
    emoji?: SortOrderInput | SortOrder
    finishingDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    durationType?: SortOrderInput | SortOrder
    outlineType?: SortOrder
    timesPerWeek?: SortOrderInput | SortOrder
    coachSuggestedTimesPerWeek?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    coachNotes?: SortOrderInput | SortOrder
    suggestedByCoachAt?: SortOrderInput | SortOrder
    sortOrder?: SortOrderInput | SortOrder
    currentWeekState?: SortOrder
    currentWeekStateCalculatedAt?: SortOrderInput | SortOrder
    _count?: PlanCountOrderByAggregateInput
    _avg?: PlanAvgOrderByAggregateInput
    _max?: PlanMaxOrderByAggregateInput
    _min?: PlanMinOrderByAggregateInput
    _sum?: PlanSumOrderByAggregateInput
  }

  export type PlanScalarWhereWithAggregatesInput = {
    AND?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    OR?: PlanScalarWhereWithAggregatesInput[]
    NOT?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Plan"> | string
    userId?: StringWithAggregatesFilter<"Plan"> | string
    planGroupId?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    goal?: StringWithAggregatesFilter<"Plan"> | string
    emoji?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    finishingDate?: DateTimeNullableWithAggregatesFilter<"Plan"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Plan"> | Date | string | null
    durationType?: EnumPlanDurationTypeNullableWithAggregatesFilter<"Plan"> | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeWithAggregatesFilter<"Plan"> | $Enums.PlanOutlineType
    timesPerWeek?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    coachSuggestedTimesPerWeek?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    notes?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    coachNotes?: StringNullableWithAggregatesFilter<"Plan"> | string | null
    suggestedByCoachAt?: DateTimeNullableWithAggregatesFilter<"Plan"> | Date | string | null
    sortOrder?: IntNullableWithAggregatesFilter<"Plan"> | number | null
    currentWeekState?: EnumPlanStateWithAggregatesFilter<"Plan"> | $Enums.PlanState
    currentWeekStateCalculatedAt?: DateTimeNullableWithAggregatesFilter<"Plan"> | Date | string | null
  }

  export type PlanSessionWhereInput = {
    AND?: PlanSessionWhereInput | PlanSessionWhereInput[]
    OR?: PlanSessionWhereInput[]
    NOT?: PlanSessionWhereInput | PlanSessionWhereInput[]
    id?: StringFilter<"PlanSession"> | string
    planId?: StringFilter<"PlanSession"> | string
    isCoachSuggested?: BoolFilter<"PlanSession"> | boolean
    activityId?: StringFilter<"PlanSession"> | string
    date?: DateTimeFilter<"PlanSession"> | Date | string
    descriptiveGuide?: StringFilter<"PlanSession"> | string
    quantity?: IntFilter<"PlanSession"> | number
    createdAt?: DateTimeFilter<"PlanSession"> | Date | string
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }

  export type PlanSessionOrderByWithRelationInput = {
    id?: SortOrder
    planId?: SortOrder
    isCoachSuggested?: SortOrder
    activityId?: SortOrder
    date?: SortOrder
    descriptiveGuide?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    plan?: PlanOrderByWithRelationInput
    activity?: ActivityOrderByWithRelationInput
  }

  export type PlanSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanSessionWhereInput | PlanSessionWhereInput[]
    OR?: PlanSessionWhereInput[]
    NOT?: PlanSessionWhereInput | PlanSessionWhereInput[]
    planId?: StringFilter<"PlanSession"> | string
    isCoachSuggested?: BoolFilter<"PlanSession"> | boolean
    activityId?: StringFilter<"PlanSession"> | string
    date?: DateTimeFilter<"PlanSession"> | Date | string
    descriptiveGuide?: StringFilter<"PlanSession"> | string
    quantity?: IntFilter<"PlanSession"> | number
    createdAt?: DateTimeFilter<"PlanSession"> | Date | string
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
    activity?: XOR<ActivityScalarRelationFilter, ActivityWhereInput>
  }, "id">

  export type PlanSessionOrderByWithAggregationInput = {
    id?: SortOrder
    planId?: SortOrder
    isCoachSuggested?: SortOrder
    activityId?: SortOrder
    date?: SortOrder
    descriptiveGuide?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    _count?: PlanSessionCountOrderByAggregateInput
    _avg?: PlanSessionAvgOrderByAggregateInput
    _max?: PlanSessionMaxOrderByAggregateInput
    _min?: PlanSessionMinOrderByAggregateInput
    _sum?: PlanSessionSumOrderByAggregateInput
  }

  export type PlanSessionScalarWhereWithAggregatesInput = {
    AND?: PlanSessionScalarWhereWithAggregatesInput | PlanSessionScalarWhereWithAggregatesInput[]
    OR?: PlanSessionScalarWhereWithAggregatesInput[]
    NOT?: PlanSessionScalarWhereWithAggregatesInput | PlanSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlanSession"> | string
    planId?: StringWithAggregatesFilter<"PlanSession"> | string
    isCoachSuggested?: BoolWithAggregatesFilter<"PlanSession"> | boolean
    activityId?: StringWithAggregatesFilter<"PlanSession"> | string
    date?: DateTimeWithAggregatesFilter<"PlanSession"> | Date | string
    descriptiveGuide?: StringWithAggregatesFilter<"PlanSession"> | string
    quantity?: IntWithAggregatesFilter<"PlanSession"> | number
    createdAt?: DateTimeWithAggregatesFilter<"PlanSession"> | Date | string
  }

  export type PlanMilestoneWhereInput = {
    AND?: PlanMilestoneWhereInput | PlanMilestoneWhereInput[]
    OR?: PlanMilestoneWhereInput[]
    NOT?: PlanMilestoneWhereInput | PlanMilestoneWhereInput[]
    id?: StringFilter<"PlanMilestone"> | string
    planId?: StringFilter<"PlanMilestone"> | string
    date?: DateTimeFilter<"PlanMilestone"> | Date | string
    description?: StringFilter<"PlanMilestone"> | string
    progress?: IntNullableFilter<"PlanMilestone"> | number | null
    criteria?: JsonNullableFilter<"PlanMilestone">
    createdAt?: DateTimeFilter<"PlanMilestone"> | Date | string
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
  }

  export type PlanMilestoneOrderByWithRelationInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    description?: SortOrder
    progress?: SortOrderInput | SortOrder
    criteria?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    plan?: PlanOrderByWithRelationInput
  }

  export type PlanMilestoneWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanMilestoneWhereInput | PlanMilestoneWhereInput[]
    OR?: PlanMilestoneWhereInput[]
    NOT?: PlanMilestoneWhereInput | PlanMilestoneWhereInput[]
    planId?: StringFilter<"PlanMilestone"> | string
    date?: DateTimeFilter<"PlanMilestone"> | Date | string
    description?: StringFilter<"PlanMilestone"> | string
    progress?: IntNullableFilter<"PlanMilestone"> | number | null
    criteria?: JsonNullableFilter<"PlanMilestone">
    createdAt?: DateTimeFilter<"PlanMilestone"> | Date | string
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
  }, "id">

  export type PlanMilestoneOrderByWithAggregationInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    description?: SortOrder
    progress?: SortOrderInput | SortOrder
    criteria?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PlanMilestoneCountOrderByAggregateInput
    _avg?: PlanMilestoneAvgOrderByAggregateInput
    _max?: PlanMilestoneMaxOrderByAggregateInput
    _min?: PlanMilestoneMinOrderByAggregateInput
    _sum?: PlanMilestoneSumOrderByAggregateInput
  }

  export type PlanMilestoneScalarWhereWithAggregatesInput = {
    AND?: PlanMilestoneScalarWhereWithAggregatesInput | PlanMilestoneScalarWhereWithAggregatesInput[]
    OR?: PlanMilestoneScalarWhereWithAggregatesInput[]
    NOT?: PlanMilestoneScalarWhereWithAggregatesInput | PlanMilestoneScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlanMilestone"> | string
    planId?: StringWithAggregatesFilter<"PlanMilestone"> | string
    date?: DateTimeWithAggregatesFilter<"PlanMilestone"> | Date | string
    description?: StringWithAggregatesFilter<"PlanMilestone"> | string
    progress?: IntNullableWithAggregatesFilter<"PlanMilestone"> | number | null
    criteria?: JsonNullableWithAggregatesFilter<"PlanMilestone">
    createdAt?: DateTimeWithAggregatesFilter<"PlanMilestone"> | Date | string
  }

  export type PlanGroupWhereInput = {
    AND?: PlanGroupWhereInput | PlanGroupWhereInput[]
    OR?: PlanGroupWhereInput[]
    NOT?: PlanGroupWhereInput | PlanGroupWhereInput[]
    id?: StringFilter<"PlanGroup"> | string
    createdAt?: DateTimeFilter<"PlanGroup"> | Date | string
    members?: UserListRelationFilter
    plans?: PlanListRelationFilter
  }

  export type PlanGroupOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    members?: UserOrderByRelationAggregateInput
    plans?: PlanOrderByRelationAggregateInput
  }

  export type PlanGroupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanGroupWhereInput | PlanGroupWhereInput[]
    OR?: PlanGroupWhereInput[]
    NOT?: PlanGroupWhereInput | PlanGroupWhereInput[]
    createdAt?: DateTimeFilter<"PlanGroup"> | Date | string
    members?: UserListRelationFilter
    plans?: PlanListRelationFilter
  }, "id">

  export type PlanGroupOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    _count?: PlanGroupCountOrderByAggregateInput
    _max?: PlanGroupMaxOrderByAggregateInput
    _min?: PlanGroupMinOrderByAggregateInput
  }

  export type PlanGroupScalarWhereWithAggregatesInput = {
    AND?: PlanGroupScalarWhereWithAggregatesInput | PlanGroupScalarWhereWithAggregatesInput[]
    OR?: PlanGroupScalarWhereWithAggregatesInput[]
    NOT?: PlanGroupScalarWhereWithAggregatesInput | PlanGroupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlanGroup"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PlanGroup"> | Date | string
  }

  export type PlanInvitationWhereInput = {
    AND?: PlanInvitationWhereInput | PlanInvitationWhereInput[]
    OR?: PlanInvitationWhereInput[]
    NOT?: PlanInvitationWhereInput | PlanInvitationWhereInput[]
    id?: StringFilter<"PlanInvitation"> | string
    planId?: StringFilter<"PlanInvitation"> | string
    senderId?: StringFilter<"PlanInvitation"> | string
    recipientId?: StringFilter<"PlanInvitation"> | string
    status?: EnumInvitationStatusFilter<"PlanInvitation"> | $Enums.InvitationStatus
    createdAt?: DateTimeFilter<"PlanInvitation"> | Date | string
    updatedAt?: DateTimeNullableFilter<"PlanInvitation"> | Date | string | null
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    recipient?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PlanInvitationOrderByWithRelationInput = {
    id?: SortOrder
    planId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    plan?: PlanOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    recipient?: UserOrderByWithRelationInput
  }

  export type PlanInvitationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlanInvitationWhereInput | PlanInvitationWhereInput[]
    OR?: PlanInvitationWhereInput[]
    NOT?: PlanInvitationWhereInput | PlanInvitationWhereInput[]
    planId?: StringFilter<"PlanInvitation"> | string
    senderId?: StringFilter<"PlanInvitation"> | string
    recipientId?: StringFilter<"PlanInvitation"> | string
    status?: EnumInvitationStatusFilter<"PlanInvitation"> | $Enums.InvitationStatus
    createdAt?: DateTimeFilter<"PlanInvitation"> | Date | string
    updatedAt?: DateTimeNullableFilter<"PlanInvitation"> | Date | string | null
    plan?: XOR<PlanScalarRelationFilter, PlanWhereInput>
    sender?: XOR<UserScalarRelationFilter, UserWhereInput>
    recipient?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PlanInvitationOrderByWithAggregationInput = {
    id?: SortOrder
    planId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: PlanInvitationCountOrderByAggregateInput
    _max?: PlanInvitationMaxOrderByAggregateInput
    _min?: PlanInvitationMinOrderByAggregateInput
  }

  export type PlanInvitationScalarWhereWithAggregatesInput = {
    AND?: PlanInvitationScalarWhereWithAggregatesInput | PlanInvitationScalarWhereWithAggregatesInput[]
    OR?: PlanInvitationScalarWhereWithAggregatesInput[]
    NOT?: PlanInvitationScalarWhereWithAggregatesInput | PlanInvitationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlanInvitation"> | string
    planId?: StringWithAggregatesFilter<"PlanInvitation"> | string
    senderId?: StringWithAggregatesFilter<"PlanInvitation"> | string
    recipientId?: StringWithAggregatesFilter<"PlanInvitation"> | string
    status?: EnumInvitationStatusWithAggregatesFilter<"PlanInvitation"> | $Enums.InvitationStatus
    createdAt?: DateTimeWithAggregatesFilter<"PlanInvitation"> | Date | string
    updatedAt?: DateTimeNullableWithAggregatesFilter<"PlanInvitation"> | Date | string | null
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    userId?: StringFilter<"Message"> | string
    role?: EnumMessageRoleFilter<"Message"> | $Enums.MessageRole
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    emotions?: MessageEmotionListRelationFilter
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
    emotions?: MessageEmotionOrderByRelationAggregateInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    userId?: StringFilter<"Message"> | string
    role?: EnumMessageRoleFilter<"Message"> | $Enums.MessageRole
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    emotions?: MessageEmotionListRelationFilter
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    userId?: StringWithAggregatesFilter<"Message"> | string
    role?: EnumMessageRoleWithAggregatesFilter<"Message"> | $Enums.MessageRole
    content?: StringWithAggregatesFilter<"Message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type MessageEmotionWhereInput = {
    AND?: MessageEmotionWhereInput | MessageEmotionWhereInput[]
    OR?: MessageEmotionWhereInput[]
    NOT?: MessageEmotionWhereInput | MessageEmotionWhereInput[]
    id?: StringFilter<"MessageEmotion"> | string
    messageId?: StringFilter<"MessageEmotion"> | string
    name?: StringFilter<"MessageEmotion"> | string
    score?: FloatFilter<"MessageEmotion"> | number
    color?: StringFilter<"MessageEmotion"> | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
  }

  export type MessageEmotionOrderByWithRelationInput = {
    id?: SortOrder
    messageId?: SortOrder
    name?: SortOrder
    score?: SortOrder
    color?: SortOrder
    message?: MessageOrderByWithRelationInput
  }

  export type MessageEmotionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageEmotionWhereInput | MessageEmotionWhereInput[]
    OR?: MessageEmotionWhereInput[]
    NOT?: MessageEmotionWhereInput | MessageEmotionWhereInput[]
    messageId?: StringFilter<"MessageEmotion"> | string
    name?: StringFilter<"MessageEmotion"> | string
    score?: FloatFilter<"MessageEmotion"> | number
    color?: StringFilter<"MessageEmotion"> | string
    message?: XOR<MessageScalarRelationFilter, MessageWhereInput>
  }, "id">

  export type MessageEmotionOrderByWithAggregationInput = {
    id?: SortOrder
    messageId?: SortOrder
    name?: SortOrder
    score?: SortOrder
    color?: SortOrder
    _count?: MessageEmotionCountOrderByAggregateInput
    _avg?: MessageEmotionAvgOrderByAggregateInput
    _max?: MessageEmotionMaxOrderByAggregateInput
    _min?: MessageEmotionMinOrderByAggregateInput
    _sum?: MessageEmotionSumOrderByAggregateInput
  }

  export type MessageEmotionScalarWhereWithAggregatesInput = {
    AND?: MessageEmotionScalarWhereWithAggregatesInput | MessageEmotionScalarWhereWithAggregatesInput[]
    OR?: MessageEmotionScalarWhereWithAggregatesInput[]
    NOT?: MessageEmotionScalarWhereWithAggregatesInput | MessageEmotionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessageEmotion"> | string
    messageId?: StringWithAggregatesFilter<"MessageEmotion"> | string
    name?: StringWithAggregatesFilter<"MessageEmotion"> | string
    score?: FloatWithAggregatesFilter<"MessageEmotion"> | number
    color?: StringWithAggregatesFilter<"MessageEmotion"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    processedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    concludedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    promptTag?: StringNullableFilter<"Notification"> | string | null
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    relatedId?: StringNullableFilter<"Notification"> | string | null
    relatedData?: JsonNullableFilter<"Notification">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    processedAt?: SortOrderInput | SortOrder
    openedAt?: SortOrderInput | SortOrder
    concludedAt?: SortOrderInput | SortOrder
    promptTag?: SortOrderInput | SortOrder
    status?: SortOrder
    type?: SortOrder
    relatedId?: SortOrderInput | SortOrder
    relatedData?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    processedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    concludedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    promptTag?: StringNullableFilter<"Notification"> | string | null
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    relatedId?: StringNullableFilter<"Notification"> | string | null
    relatedData?: JsonNullableFilter<"Notification">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    processedAt?: SortOrderInput | SortOrder
    openedAt?: SortOrderInput | SortOrder
    concludedAt?: SortOrderInput | SortOrder
    promptTag?: SortOrderInput | SortOrder
    status?: SortOrder
    type?: SortOrder
    relatedId?: SortOrderInput | SortOrder
    relatedData?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    processedAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    openedAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    concludedAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    promptTag?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    status?: EnumNotificationStatusWithAggregatesFilter<"Notification"> | $Enums.NotificationStatus
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    relatedId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    relatedData?: JsonNullableWithAggregatesFilter<"Notification">
  }

  export type RecommendationWhereInput = {
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    id?: StringFilter<"Recommendation"> | string
    userId?: StringFilter<"Recommendation"> | string
    recommendationObjectType?: EnumRecommendationObjectTypeFilter<"Recommendation"> | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFilter<"Recommendation"> | string
    score?: FloatFilter<"Recommendation"> | number
    metadata?: JsonFilter<"Recommendation">
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
    updatedAt?: DateTimeFilter<"Recommendation"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type RecommendationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationObjectType?: SortOrder
    recommendationObjectId?: SortOrder
    score?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type RecommendationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecommendationWhereInput | RecommendationWhereInput[]
    OR?: RecommendationWhereInput[]
    NOT?: RecommendationWhereInput | RecommendationWhereInput[]
    userId?: StringFilter<"Recommendation"> | string
    recommendationObjectType?: EnumRecommendationObjectTypeFilter<"Recommendation"> | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFilter<"Recommendation"> | string
    score?: FloatFilter<"Recommendation"> | number
    metadata?: JsonFilter<"Recommendation">
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
    updatedAt?: DateTimeFilter<"Recommendation"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type RecommendationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationObjectType?: SortOrder
    recommendationObjectId?: SortOrder
    score?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RecommendationCountOrderByAggregateInput
    _avg?: RecommendationAvgOrderByAggregateInput
    _max?: RecommendationMaxOrderByAggregateInput
    _min?: RecommendationMinOrderByAggregateInput
    _sum?: RecommendationSumOrderByAggregateInput
  }

  export type RecommendationScalarWhereWithAggregatesInput = {
    AND?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    OR?: RecommendationScalarWhereWithAggregatesInput[]
    NOT?: RecommendationScalarWhereWithAggregatesInput | RecommendationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recommendation"> | string
    userId?: StringWithAggregatesFilter<"Recommendation"> | string
    recommendationObjectType?: EnumRecommendationObjectTypeWithAggregatesFilter<"Recommendation"> | $Enums.RecommendationObjectType
    recommendationObjectId?: StringWithAggregatesFilter<"Recommendation"> | string
    score?: FloatWithAggregatesFilter<"Recommendation"> | number
    metadata?: JsonWithAggregatesFilter<"Recommendation">
    createdAt?: DateTimeWithAggregatesFilter<"Recommendation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Recommendation"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ConnectionCreateInput = {
    id?: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    from: UserCreateNestedOneWithoutConnectionsFromInput
    to: UserCreateNestedOneWithoutConnectionsToInput
  }

  export type ConnectionUncheckedCreateInput = {
    id?: string
    fromId: string
    toId: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ConnectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    from?: UserUpdateOneRequiredWithoutConnectionsFromNestedInput
    to?: UserUpdateOneRequiredWithoutConnectionsToNestedInput
  }

  export type ConnectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromId?: StringFieldUpdateOperationsInput | string
    toId?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConnectionCreateManyInput = {
    id?: string
    fromId: string
    toId: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ConnectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConnectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromId?: StringFieldUpdateOperationsInput | string
    toId?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityCreateInput = {
    id?: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutActivitiesInput
    entries?: ActivityEntryCreateNestedManyWithoutActivityInput
    planSessions?: PlanSessionCreateNestedManyWithoutActivityInput
    plans?: PlanCreateNestedManyWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    entries?: ActivityEntryUncheckedCreateNestedManyWithoutActivityInput
    planSessions?: PlanSessionUncheckedCreateNestedManyWithoutActivityInput
    plans?: PlanUncheckedCreateNestedManyWithoutActivitiesInput
  }

  export type ActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    entries?: ActivityEntryUpdateManyWithoutActivityNestedInput
    planSessions?: PlanSessionUpdateManyWithoutActivityNestedInput
    plans?: PlanUpdateManyWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entries?: ActivityEntryUncheckedUpdateManyWithoutActivityNestedInput
    planSessions?: PlanSessionUncheckedUpdateManyWithoutActivityNestedInput
    plans?: PlanUncheckedUpdateManyWithoutActivitiesNestedInput
  }

  export type ActivityCreateManyInput = {
    id?: string
    userId: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
  }

  export type ActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityEntryCreateInput = {
    id?: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    activity: ActivityCreateNestedOneWithoutEntriesInput
    user: UserCreateNestedOneWithoutActivityEntriesInput
    reactions?: ReactionCreateNestedManyWithoutActivityEntryInput
    comments?: CommentCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryUncheckedCreateInput = {
    id?: string
    activityId: string
    userId: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    reactions?: ReactionUncheckedCreateNestedManyWithoutActivityEntryInput
    comments?: CommentUncheckedCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    activity?: ActivityUpdateOneRequiredWithoutEntriesNestedInput
    user?: UserUpdateOneRequiredWithoutActivityEntriesNestedInput
    reactions?: ReactionUpdateManyWithoutActivityEntryNestedInput
    comments?: CommentUpdateManyWithoutActivityEntryNestedInput
  }

  export type ActivityEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    reactions?: ReactionUncheckedUpdateManyWithoutActivityEntryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutActivityEntryNestedInput
  }

  export type ActivityEntryCreateManyInput = {
    id?: string
    activityId: string
    userId: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
  }

  export type ActivityEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReactionCreateInput = {
    id?: string
    emoji: string
    createdAt?: Date | string
    activityEntry: ActivityEntryCreateNestedOneWithoutReactionsInput
    user: UserCreateNestedOneWithoutReactionsSentInput
  }

  export type ReactionUncheckedCreateInput = {
    id?: string
    activityEntryId: string
    userId: string
    emoji: string
    createdAt?: Date | string
  }

  export type ReactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityEntry?: ActivityEntryUpdateOneRequiredWithoutReactionsNestedInput
    user?: UserUpdateOneRequiredWithoutReactionsSentNestedInput
  }

  export type ReactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityEntryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReactionCreateManyInput = {
    id?: string
    activityEntryId: string
    userId: string
    emoji: string
    createdAt?: Date | string
  }

  export type ReactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityEntryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    userId: string
    username: string
    text: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    picture?: string | null
    activityEntry: ActivityEntryCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    activityEntryId: string
    userId: string
    username: string
    text: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    picture?: string | null
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    activityEntry?: ActivityEntryUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityEntryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyInput = {
    id?: string
    activityEntryId: string
    userId: string
    username: string
    text: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    picture?: string | null
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityEntryId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricCreateInput = {
    id?: string
    title: string
    emoji: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMetricsInput
    entries?: MetricEntryCreateNestedManyWithoutMetricInput
  }

  export type MetricUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    emoji: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: MetricEntryUncheckedCreateNestedManyWithoutMetricInput
  }

  export type MetricUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMetricsNestedInput
    entries?: MetricEntryUpdateManyWithoutMetricNestedInput
  }

  export type MetricUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: MetricEntryUncheckedUpdateManyWithoutMetricNestedInput
  }

  export type MetricCreateManyInput = {
    id?: string
    userId: string
    title: string
    emoji: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricEntryCreateInput = {
    id?: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
    user: UserCreateNestedOneWithoutMetricEntriesInput
    metric: MetricCreateNestedOneWithoutEntriesInput
  }

  export type MetricEntryUncheckedCreateInput = {
    id?: string
    userId: string
    metricId: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
  }

  export type MetricEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMetricEntriesNestedInput
    metric?: MetricUpdateOneRequiredWithoutEntriesNestedInput
  }

  export type MetricEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    metricId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MetricEntryCreateManyInput = {
    id?: string
    userId: string
    metricId: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
  }

  export type MetricEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MetricEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    metricId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlanCreateInput = {
    id?: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPlansInput
    planGroup?: PlanGroupCreateNestedOneWithoutPlansInput
    sessions?: PlanSessionCreateNestedManyWithoutPlanInput
    activities?: ActivityCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateInput = {
    id?: string
    userId: string
    planGroupId?: string | null
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    sessions?: PlanSessionUncheckedCreateNestedManyWithoutPlanInput
    activities?: ActivityUncheckedCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationUncheckedCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPlansNestedInput
    planGroup?: PlanGroupUpdateOneWithoutPlansNestedInput
    sessions?: PlanSessionUpdateManyWithoutPlanNestedInput
    activities?: ActivityUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: PlanSessionUncheckedUpdateManyWithoutPlanNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUncheckedUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanCreateManyInput = {
    id?: string
    userId: string
    planGroupId?: string | null
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
  }

  export type PlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanSessionCreateInput = {
    id?: string
    isCoachSuggested?: boolean
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
    plan: PlanCreateNestedOneWithoutSessionsInput
    activity: ActivityCreateNestedOneWithoutPlanSessionsInput
  }

  export type PlanSessionUncheckedCreateInput = {
    id?: string
    planId: string
    isCoachSuggested?: boolean
    activityId: string
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
  }

  export type PlanSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutSessionsNestedInput
    activity?: ActivityUpdateOneRequiredWithoutPlanSessionsNestedInput
  }

  export type PlanSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    activityId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanSessionCreateManyInput = {
    id?: string
    planId: string
    isCoachSuggested?: boolean
    activityId: string
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
  }

  export type PlanSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    activityId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMilestoneCreateInput = {
    id?: string
    date: Date | string
    description: string
    progress?: number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    plan: PlanCreateNestedOneWithoutMilestonesInput
  }

  export type PlanMilestoneUncheckedCreateInput = {
    id?: string
    planId: string
    date: Date | string
    description: string
    progress?: number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PlanMilestoneUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutMilestonesNestedInput
  }

  export type PlanMilestoneUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMilestoneCreateManyInput = {
    id?: string
    planId: string
    date: Date | string
    description: string
    progress?: number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PlanMilestoneUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMilestoneUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanGroupCreateInput = {
    id?: string
    createdAt?: Date | string
    members?: UserCreateNestedManyWithoutPlanGroupMembershipsInput
    plans?: PlanCreateNestedManyWithoutPlanGroupInput
  }

  export type PlanGroupUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutPlanGroupMembershipsInput
    plans?: PlanUncheckedCreateNestedManyWithoutPlanGroupInput
  }

  export type PlanGroupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutPlanGroupMembershipsNestedInput
    plans?: PlanUpdateManyWithoutPlanGroupNestedInput
  }

  export type PlanGroupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutPlanGroupMembershipsNestedInput
    plans?: PlanUncheckedUpdateManyWithoutPlanGroupNestedInput
  }

  export type PlanGroupCreateManyInput = {
    id?: string
    createdAt?: Date | string
  }

  export type PlanGroupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanGroupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanInvitationCreateInput = {
    id?: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    plan: PlanCreateNestedOneWithoutInvitationsInput
    sender: UserCreateNestedOneWithoutPlanInvitationsSentInput
    recipient: UserCreateNestedOneWithoutPlanInvitationsReceivedInput
  }

  export type PlanInvitationUncheckedCreateInput = {
    id?: string
    planId: string
    senderId: string
    recipientId: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PlanInvitationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: PlanUpdateOneRequiredWithoutInvitationsNestedInput
    sender?: UserUpdateOneRequiredWithoutPlanInvitationsSentNestedInput
    recipient?: UserUpdateOneRequiredWithoutPlanInvitationsReceivedNestedInput
  }

  export type PlanInvitationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanInvitationCreateManyInput = {
    id?: string
    planId: string
    senderId: string
    recipientId: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PlanInvitationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanInvitationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageCreateInput = {
    id?: string
    role: $Enums.MessageRole
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
    emotions?: MessageEmotionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    userId: string
    role: $Enums.MessageRole
    content: string
    createdAt?: Date | string
    emotions?: MessageEmotionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
    emotions?: MessageEmotionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emotions?: MessageEmotionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageCreateManyInput = {
    id?: string
    userId: string
    role: $Enums.MessageRole
    content: string
    createdAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageEmotionCreateInput = {
    id?: string
    name: string
    score: number
    color: string
    message: MessageCreateNestedOneWithoutEmotionsInput
  }

  export type MessageEmotionUncheckedCreateInput = {
    id?: string
    messageId: string
    name: string
    score: number
    color: string
  }

  export type MessageEmotionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
    message?: MessageUpdateOneRequiredWithoutEmotionsNestedInput
  }

  export type MessageEmotionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type MessageEmotionCreateManyInput = {
    id?: string
    messageId: string
    name: string
    score: number
    color: string
  }

  export type MessageEmotionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type MessageEmotionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    messageId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    message: string
    createdAt?: Date | string
    sentAt?: Date | string | null
    processedAt?: Date | string | null
    openedAt?: Date | string | null
    concludedAt?: Date | string | null
    promptTag?: string | null
    status?: $Enums.NotificationStatus
    type?: $Enums.NotificationType
    relatedId?: string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    message: string
    createdAt?: Date | string
    sentAt?: Date | string | null
    processedAt?: Date | string | null
    openedAt?: Date | string | null
    concludedAt?: Date | string | null
    promptTag?: string | null
    status?: $Enums.NotificationStatus
    type?: $Enums.NotificationType
    relatedId?: string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concludedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promptTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concludedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promptTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    message: string
    createdAt?: Date | string
    sentAt?: Date | string | null
    processedAt?: Date | string | null
    openedAt?: Date | string | null
    concludedAt?: Date | string | null
    promptTag?: string | null
    status?: $Enums.NotificationStatus
    type?: $Enums.NotificationType
    relatedId?: string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concludedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promptTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concludedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promptTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type RecommendationCreateInput = {
    id?: string
    recommendationObjectType?: $Enums.RecommendationObjectType
    recommendationObjectId: string
    score: number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutRecommendationsInput
  }

  export type RecommendationUncheckedCreateInput = {
    id?: string
    userId: string
    recommendationObjectType?: $Enums.RecommendationObjectType
    recommendationObjectId: string
    score: number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationObjectType?: EnumRecommendationObjectTypeFieldUpdateOperationsInput | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutRecommendationsNestedInput
  }

  export type RecommendationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recommendationObjectType?: EnumRecommendationObjectTypeFieldUpdateOperationsInput | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationCreateManyInput = {
    id?: string
    userId: string
    recommendationObjectType?: $Enums.RecommendationObjectType
    recommendationObjectId: string
    score: number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationObjectType?: EnumRecommendationObjectTypeFieldUpdateOperationsInput | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    recommendationObjectType?: EnumRecommendationObjectTypeFieldUpdateOperationsInput | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumPlanTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeFilter<$PrismaModel> | $Enums.PlanType
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type EnumThemeColorFilter<$PrismaModel = never> = {
    equals?: $Enums.ThemeColor | EnumThemeColorFieldRefInput<$PrismaModel>
    in?: $Enums.ThemeColor[] | ListEnumThemeColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.ThemeColor[] | ListEnumThemeColorFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeColorFilter<$PrismaModel> | $Enums.ThemeColor
  }

  export type EnumActivityVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityVisibility | EnumActivityVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityVisibilityFilter<$PrismaModel> | $Enums.ActivityVisibility
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumDailyCheckinTimeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DailyCheckinTime | EnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DailyCheckinTime[] | ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DailyCheckinTime[] | ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDailyCheckinTimeNullableFilter<$PrismaModel> | $Enums.DailyCheckinTime | null
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type ActivityEntryListRelationFilter = {
    every?: ActivityEntryWhereInput
    some?: ActivityEntryWhereInput
    none?: ActivityEntryWhereInput
  }

  export type MetricListRelationFilter = {
    every?: MetricWhereInput
    some?: MetricWhereInput
    none?: MetricWhereInput
  }

  export type MetricEntryListRelationFilter = {
    every?: MetricEntryWhereInput
    some?: MetricEntryWhereInput
    none?: MetricEntryWhereInput
  }

  export type PlanListRelationFilter = {
    every?: PlanWhereInput
    some?: PlanWhereInput
    none?: PlanWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type PlanInvitationListRelationFilter = {
    every?: PlanInvitationWhereInput
    some?: PlanInvitationWhereInput
    none?: PlanInvitationWhereInput
  }

  export type PlanGroupListRelationFilter = {
    every?: PlanGroupWhereInput
    some?: PlanGroupWhereInput
    none?: PlanGroupWhereInput
  }

  export type RecommendationListRelationFilter = {
    every?: RecommendationWhereInput
    some?: RecommendationWhereInput
    none?: RecommendationWhereInput
  }

  export type ReactionListRelationFilter = {
    every?: ReactionWhereInput
    some?: ReactionWhereInput
    none?: ReactionWhereInput
  }

  export type ConnectionListRelationFilter = {
    every?: ConnectionWhereInput
    some?: ConnectionWhereInput
    none?: ConnectionWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MetricOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MetricEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanInvitationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanGroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecommendationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConnectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profile?: SortOrder
    picture?: SortOrder
    age?: SortOrder
    username?: SortOrder
    timezone?: SortOrder
    clerkId?: SortOrder
    language?: SortOrder
    planType?: SortOrder
    lastActiveAt?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    isPwaInstalled?: SortOrder
    isPwaNotificationsEnabled?: SortOrder
    lookingForAp?: SortOrder
    pwaSubscriptionEndpoint?: SortOrder
    pwaSubscriptionKey?: SortOrder
    pwaSubscriptionAuthToken?: SortOrder
    unactivatedEmailSentAt?: SortOrder
    themeBaseColor?: SortOrder
    defaultActivityVisibility?: SortOrder
    recommendationsOutdated?: SortOrder
    recommendationsLastCalculatedAt?: SortOrder
    dailyCheckinDays?: SortOrder
    dailyCheckinTime?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSubscriptionStatus?: SortOrder
    referredById?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profile?: SortOrder
    picture?: SortOrder
    age?: SortOrder
    username?: SortOrder
    timezone?: SortOrder
    clerkId?: SortOrder
    language?: SortOrder
    planType?: SortOrder
    lastActiveAt?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    isPwaInstalled?: SortOrder
    isPwaNotificationsEnabled?: SortOrder
    lookingForAp?: SortOrder
    pwaSubscriptionEndpoint?: SortOrder
    pwaSubscriptionKey?: SortOrder
    pwaSubscriptionAuthToken?: SortOrder
    unactivatedEmailSentAt?: SortOrder
    themeBaseColor?: SortOrder
    defaultActivityVisibility?: SortOrder
    recommendationsOutdated?: SortOrder
    recommendationsLastCalculatedAt?: SortOrder
    dailyCheckinTime?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSubscriptionStatus?: SortOrder
    referredById?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profile?: SortOrder
    picture?: SortOrder
    age?: SortOrder
    username?: SortOrder
    timezone?: SortOrder
    clerkId?: SortOrder
    language?: SortOrder
    planType?: SortOrder
    lastActiveAt?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    isPwaInstalled?: SortOrder
    isPwaNotificationsEnabled?: SortOrder
    lookingForAp?: SortOrder
    pwaSubscriptionEndpoint?: SortOrder
    pwaSubscriptionKey?: SortOrder
    pwaSubscriptionAuthToken?: SortOrder
    unactivatedEmailSentAt?: SortOrder
    themeBaseColor?: SortOrder
    defaultActivityVisibility?: SortOrder
    recommendationsOutdated?: SortOrder
    recommendationsLastCalculatedAt?: SortOrder
    dailyCheckinTime?: SortOrder
    stripeCustomerId?: SortOrder
    stripeSubscriptionId?: SortOrder
    stripeSubscriptionStatus?: SortOrder
    referredById?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumPlanTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlanType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanTypeFilter<$PrismaModel>
    _max?: NestedEnumPlanTypeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type EnumThemeColorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ThemeColor | EnumThemeColorFieldRefInput<$PrismaModel>
    in?: $Enums.ThemeColor[] | ListEnumThemeColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.ThemeColor[] | ListEnumThemeColorFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeColorWithAggregatesFilter<$PrismaModel> | $Enums.ThemeColor
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeColorFilter<$PrismaModel>
    _max?: NestedEnumThemeColorFilter<$PrismaModel>
  }

  export type EnumActivityVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityVisibility | EnumActivityVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.ActivityVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActivityVisibilityFilter<$PrismaModel>
    _max?: NestedEnumActivityVisibilityFilter<$PrismaModel>
  }

  export type EnumDailyCheckinTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DailyCheckinTime | EnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DailyCheckinTime[] | ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DailyCheckinTime[] | ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDailyCheckinTimeNullableWithAggregatesFilter<$PrismaModel> | $Enums.DailyCheckinTime | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDailyCheckinTimeNullableFilter<$PrismaModel>
    _max?: NestedEnumDailyCheckinTimeNullableFilter<$PrismaModel>
  }

  export type EnumConnectionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ConnectionStatus | EnumConnectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConnectionStatus[] | ListEnumConnectionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConnectionStatus[] | ListEnumConnectionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConnectionStatusFilter<$PrismaModel> | $Enums.ConnectionStatus
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ConnectionFromIdToIdCompoundUniqueInput = {
    fromId: string
    toId: string
  }

  export type ConnectionCountOrderByAggregateInput = {
    id?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConnectionMaxOrderByAggregateInput = {
    id?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConnectionMinOrderByAggregateInput = {
    id?: SortOrder
    fromId?: SortOrder
    toId?: SortOrder
    status?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumConnectionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConnectionStatus | EnumConnectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConnectionStatus[] | ListEnumConnectionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConnectionStatus[] | ListEnumConnectionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConnectionStatusWithAggregatesFilter<$PrismaModel> | $Enums.ConnectionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConnectionStatusFilter<$PrismaModel>
    _max?: NestedEnumConnectionStatusFilter<$PrismaModel>
  }

  export type EnumActivityVisibilityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityVisibility | EnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumActivityVisibilityNullableFilter<$PrismaModel> | $Enums.ActivityVisibility | null
  }

  export type PlanSessionListRelationFilter = {
    every?: PlanSessionWhereInput
    some?: PlanSessionWhereInput
    none?: PlanSessionWhereInput
  }

  export type PlanSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    measure?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    privacySettings?: SortOrder
    colorHex?: SortOrder
    deletedAt?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    measure?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    privacySettings?: SortOrder
    colorHex?: SortOrder
    deletedAt?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    measure?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    privacySettings?: SortOrder
    colorHex?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumActivityVisibilityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityVisibility | EnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumActivityVisibilityNullableWithAggregatesFilter<$PrismaModel> | $Enums.ActivityVisibility | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumActivityVisibilityNullableFilter<$PrismaModel>
    _max?: NestedEnumActivityVisibilityNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ActivityScalarRelationFilter = {
    is?: ActivityWhereInput
    isNot?: ActivityWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityEntryCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
    timezone?: SortOrder
    imageS3Path?: SortOrder
    imageUrl?: SortOrder
    imageExpiresAt?: SortOrder
    imageCreatedAt?: SortOrder
    imageIsPublic?: SortOrder
  }

  export type ActivityEntryAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type ActivityEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
    timezone?: SortOrder
    imageS3Path?: SortOrder
    imageUrl?: SortOrder
    imageExpiresAt?: SortOrder
    imageCreatedAt?: SortOrder
    imageIsPublic?: SortOrder
  }

  export type ActivityEntryMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    quantity?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    description?: SortOrder
    deletedAt?: SortOrder
    timezone?: SortOrder
    imageS3Path?: SortOrder
    imageUrl?: SortOrder
    imageExpiresAt?: SortOrder
    imageCreatedAt?: SortOrder
    imageIsPublic?: SortOrder
  }

  export type ActivityEntrySumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ActivityEntryScalarRelationFilter = {
    is?: ActivityEntryWhereInput
    isNot?: ActivityEntryWhereInput
  }

  export type ReactionActivityEntryIdUserIdEmojiCompoundUniqueInput = {
    activityEntryId: string
    userId: string
    emoji: string
  }

  export type ReactionCountOrderByAggregateInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type ReactionMaxOrderByAggregateInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type ReactionMinOrderByAggregateInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    picture?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    picture?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    activityEntryId?: SortOrder
    userId?: SortOrder
    username?: SortOrder
    text?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    picture?: SortOrder
  }

  export type MetricCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    emoji?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MetricScalarRelationFilter = {
    is?: MetricWhereInput
    isNot?: MetricWhereInput
  }

  export type MetricEntryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    metricId?: SortOrder
    rating?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    skipped?: SortOrder
    descriptionSkipped?: SortOrder
  }

  export type MetricEntryAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type MetricEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    metricId?: SortOrder
    rating?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    skipped?: SortOrder
    descriptionSkipped?: SortOrder
  }

  export type MetricEntryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    metricId?: SortOrder
    rating?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    description?: SortOrder
    skipped?: SortOrder
    descriptionSkipped?: SortOrder
  }

  export type MetricEntrySumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type EnumPlanDurationTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanDurationType | EnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PlanDurationType[] | ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PlanDurationType[] | ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPlanDurationTypeNullableFilter<$PrismaModel> | $Enums.PlanDurationType | null
  }

  export type EnumPlanOutlineTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanOutlineType | EnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanOutlineType[] | ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanOutlineType[] | ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanOutlineTypeFilter<$PrismaModel> | $Enums.PlanOutlineType
  }

  export type EnumPlanStateFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanState | EnumPlanStateFieldRefInput<$PrismaModel>
    in?: $Enums.PlanState[] | ListEnumPlanStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanState[] | ListEnumPlanStateFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanStateFilter<$PrismaModel> | $Enums.PlanState
  }

  export type PlanGroupNullableScalarRelationFilter = {
    is?: PlanGroupWhereInput | null
    isNot?: PlanGroupWhereInput | null
  }

  export type PlanMilestoneListRelationFilter = {
    every?: PlanMilestoneWhereInput
    some?: PlanMilestoneWhereInput
    none?: PlanMilestoneWhereInput
  }

  export type PlanMilestoneOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planGroupId?: SortOrder
    goal?: SortOrder
    emoji?: SortOrder
    finishingDate?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    durationType?: SortOrder
    outlineType?: SortOrder
    timesPerWeek?: SortOrder
    coachSuggestedTimesPerWeek?: SortOrder
    notes?: SortOrder
    coachNotes?: SortOrder
    suggestedByCoachAt?: SortOrder
    sortOrder?: SortOrder
    currentWeekState?: SortOrder
    currentWeekStateCalculatedAt?: SortOrder
  }

  export type PlanAvgOrderByAggregateInput = {
    timesPerWeek?: SortOrder
    coachSuggestedTimesPerWeek?: SortOrder
    sortOrder?: SortOrder
  }

  export type PlanMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planGroupId?: SortOrder
    goal?: SortOrder
    emoji?: SortOrder
    finishingDate?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    durationType?: SortOrder
    outlineType?: SortOrder
    timesPerWeek?: SortOrder
    coachSuggestedTimesPerWeek?: SortOrder
    notes?: SortOrder
    coachNotes?: SortOrder
    suggestedByCoachAt?: SortOrder
    sortOrder?: SortOrder
    currentWeekState?: SortOrder
    currentWeekStateCalculatedAt?: SortOrder
  }

  export type PlanMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    planGroupId?: SortOrder
    goal?: SortOrder
    emoji?: SortOrder
    finishingDate?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    durationType?: SortOrder
    outlineType?: SortOrder
    timesPerWeek?: SortOrder
    coachSuggestedTimesPerWeek?: SortOrder
    notes?: SortOrder
    coachNotes?: SortOrder
    suggestedByCoachAt?: SortOrder
    sortOrder?: SortOrder
    currentWeekState?: SortOrder
    currentWeekStateCalculatedAt?: SortOrder
  }

  export type PlanSumOrderByAggregateInput = {
    timesPerWeek?: SortOrder
    coachSuggestedTimesPerWeek?: SortOrder
    sortOrder?: SortOrder
  }

  export type EnumPlanDurationTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanDurationType | EnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PlanDurationType[] | ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PlanDurationType[] | ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPlanDurationTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.PlanDurationType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPlanDurationTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumPlanDurationTypeNullableFilter<$PrismaModel>
  }

  export type EnumPlanOutlineTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanOutlineType | EnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanOutlineType[] | ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanOutlineType[] | ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanOutlineTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlanOutlineType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanOutlineTypeFilter<$PrismaModel>
    _max?: NestedEnumPlanOutlineTypeFilter<$PrismaModel>
  }

  export type EnumPlanStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanState | EnumPlanStateFieldRefInput<$PrismaModel>
    in?: $Enums.PlanState[] | ListEnumPlanStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanState[] | ListEnumPlanStateFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanStateWithAggregatesFilter<$PrismaModel> | $Enums.PlanState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanStateFilter<$PrismaModel>
    _max?: NestedEnumPlanStateFilter<$PrismaModel>
  }

  export type PlanScalarRelationFilter = {
    is?: PlanWhereInput
    isNot?: PlanWhereInput
  }

  export type PlanSessionCountOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    isCoachSuggested?: SortOrder
    activityId?: SortOrder
    date?: SortOrder
    descriptiveGuide?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanSessionAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type PlanSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    isCoachSuggested?: SortOrder
    activityId?: SortOrder
    date?: SortOrder
    descriptiveGuide?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanSessionMinOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    isCoachSuggested?: SortOrder
    activityId?: SortOrder
    date?: SortOrder
    descriptiveGuide?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanSessionSumOrderByAggregateInput = {
    quantity?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PlanMilestoneCountOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    description?: SortOrder
    progress?: SortOrder
    criteria?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanMilestoneAvgOrderByAggregateInput = {
    progress?: SortOrder
  }

  export type PlanMilestoneMaxOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    description?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanMilestoneMinOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    date?: SortOrder
    description?: SortOrder
    progress?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanMilestoneSumOrderByAggregateInput = {
    progress?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type PlanGroupCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type PlanGroupMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumInvitationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusFilter<$PrismaModel> | $Enums.InvitationStatus
  }

  export type PlanInvitationCountOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanInvitationMaxOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanInvitationMinOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    senderId?: SortOrder
    recipientId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInvitationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvitationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvitationStatusFilter<$PrismaModel>
    _max?: NestedEnumInvitationStatusFilter<$PrismaModel>
  }

  export type EnumMessageRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageRole | EnumMessageRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MessageRole[] | ListEnumMessageRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageRole[] | ListEnumMessageRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageRoleFilter<$PrismaModel> | $Enums.MessageRole
  }

  export type MessageEmotionListRelationFilter = {
    every?: MessageEmotionWhereInput
    some?: MessageEmotionWhereInput
    none?: MessageEmotionWhereInput
  }

  export type MessageEmotionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumMessageRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageRole | EnumMessageRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MessageRole[] | ListEnumMessageRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageRole[] | ListEnumMessageRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageRoleWithAggregatesFilter<$PrismaModel> | $Enums.MessageRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageRoleFilter<$PrismaModel>
    _max?: NestedEnumMessageRoleFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MessageScalarRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type MessageEmotionCountOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    name?: SortOrder
    score?: SortOrder
    color?: SortOrder
  }

  export type MessageEmotionAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type MessageEmotionMaxOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    name?: SortOrder
    score?: SortOrder
    color?: SortOrder
  }

  export type MessageEmotionMinOrderByAggregateInput = {
    id?: SortOrder
    messageId?: SortOrder
    name?: SortOrder
    score?: SortOrder
    color?: SortOrder
  }

  export type MessageEmotionSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumNotificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusFilter<$PrismaModel> | $Enums.NotificationStatus
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
    processedAt?: SortOrder
    openedAt?: SortOrder
    concludedAt?: SortOrder
    promptTag?: SortOrder
    status?: SortOrder
    type?: SortOrder
    relatedId?: SortOrder
    relatedData?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
    processedAt?: SortOrder
    openedAt?: SortOrder
    concludedAt?: SortOrder
    promptTag?: SortOrder
    status?: SortOrder
    type?: SortOrder
    relatedId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    sentAt?: SortOrder
    processedAt?: SortOrder
    openedAt?: SortOrder
    concludedAt?: SortOrder
    promptTag?: SortOrder
    status?: SortOrder
    type?: SortOrder
    relatedId?: SortOrder
  }

  export type EnumNotificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationStatusFilter<$PrismaModel>
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumRecommendationObjectTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationObjectType | EnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationObjectType[] | ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RecommendationObjectType[] | ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRecommendationObjectTypeFilter<$PrismaModel> | $Enums.RecommendationObjectType
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type RecommendationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationObjectType?: SortOrder
    recommendationObjectId?: SortOrder
    score?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecommendationAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type RecommendationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationObjectType?: SortOrder
    recommendationObjectId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecommendationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    recommendationObjectType?: SortOrder
    recommendationObjectId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RecommendationSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type EnumRecommendationObjectTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationObjectType | EnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationObjectType[] | ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RecommendationObjectType[] | ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRecommendationObjectTypeWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationObjectType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationObjectTypeFilter<$PrismaModel>
    _max?: NestedEnumRecommendationObjectTypeFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type UserCreatedailyCheckinDaysInput = {
    set: string[]
  }

  export type ActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityEntryCreateWithoutUserInput, ActivityEntryUncheckedCreateWithoutUserInput> | ActivityEntryCreateWithoutUserInput[] | ActivityEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutUserInput | ActivityEntryCreateOrConnectWithoutUserInput[]
    createMany?: ActivityEntryCreateManyUserInputEnvelope
    connect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
  }

  export type MetricCreateNestedManyWithoutUserInput = {
    create?: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput> | MetricCreateWithoutUserInput[] | MetricUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricCreateOrConnectWithoutUserInput | MetricCreateOrConnectWithoutUserInput[]
    createMany?: MetricCreateManyUserInputEnvelope
    connect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
  }

  export type MetricEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<MetricEntryCreateWithoutUserInput, MetricEntryUncheckedCreateWithoutUserInput> | MetricEntryCreateWithoutUserInput[] | MetricEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricEntryCreateOrConnectWithoutUserInput | MetricEntryCreateOrConnectWithoutUserInput[]
    createMany?: MetricEntryCreateManyUserInputEnvelope
    connect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
  }

  export type PlanCreateNestedManyWithoutUserInput = {
    create?: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput> | PlanCreateWithoutUserInput[] | PlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutUserInput | PlanCreateOrConnectWithoutUserInput[]
    createMany?: PlanCreateManyUserInputEnvelope
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PlanInvitationCreateNestedManyWithoutSenderInput = {
    create?: XOR<PlanInvitationCreateWithoutSenderInput, PlanInvitationUncheckedCreateWithoutSenderInput> | PlanInvitationCreateWithoutSenderInput[] | PlanInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutSenderInput | PlanInvitationCreateOrConnectWithoutSenderInput[]
    createMany?: PlanInvitationCreateManySenderInputEnvelope
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
  }

  export type PlanInvitationCreateNestedManyWithoutRecipientInput = {
    create?: XOR<PlanInvitationCreateWithoutRecipientInput, PlanInvitationUncheckedCreateWithoutRecipientInput> | PlanInvitationCreateWithoutRecipientInput[] | PlanInvitationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutRecipientInput | PlanInvitationCreateOrConnectWithoutRecipientInput[]
    createMany?: PlanInvitationCreateManyRecipientInputEnvelope
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
  }

  export type PlanGroupCreateNestedManyWithoutMembersInput = {
    create?: XOR<PlanGroupCreateWithoutMembersInput, PlanGroupUncheckedCreateWithoutMembersInput> | PlanGroupCreateWithoutMembersInput[] | PlanGroupUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: PlanGroupCreateOrConnectWithoutMembersInput | PlanGroupCreateOrConnectWithoutMembersInput[]
    connect?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
  }

  export type RecommendationCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type ReactionCreateNestedManyWithoutUserInput = {
    create?: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput> | ReactionCreateWithoutUserInput[] | ReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutUserInput | ReactionCreateOrConnectWithoutUserInput[]
    createMany?: ReactionCreateManyUserInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type ConnectionCreateNestedManyWithoutFromInput = {
    create?: XOR<ConnectionCreateWithoutFromInput, ConnectionUncheckedCreateWithoutFromInput> | ConnectionCreateWithoutFromInput[] | ConnectionUncheckedCreateWithoutFromInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutFromInput | ConnectionCreateOrConnectWithoutFromInput[]
    createMany?: ConnectionCreateManyFromInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type ConnectionCreateNestedManyWithoutToInput = {
    create?: XOR<ConnectionCreateWithoutToInput, ConnectionUncheckedCreateWithoutToInput> | ConnectionCreateWithoutToInput[] | ConnectionUncheckedCreateWithoutToInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutToInput | ConnectionCreateOrConnectWithoutToInput[]
    createMany?: ConnectionCreateManyToInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutReferredByInput = {
    create?: XOR<UserCreateWithoutReferredByInput, UserUncheckedCreateWithoutReferredByInput> | UserCreateWithoutReferredByInput[] | UserUncheckedCreateWithoutReferredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferredByInput | UserCreateOrConnectWithoutReferredByInput[]
    createMany?: UserCreateManyReferredByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutReferredUsersInput = {
    create?: XOR<UserCreateWithoutReferredUsersInput, UserUncheckedCreateWithoutReferredUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferredUsersInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ActivityEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ActivityEntryCreateWithoutUserInput, ActivityEntryUncheckedCreateWithoutUserInput> | ActivityEntryCreateWithoutUserInput[] | ActivityEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutUserInput | ActivityEntryCreateOrConnectWithoutUserInput[]
    createMany?: ActivityEntryCreateManyUserInputEnvelope
    connect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
  }

  export type MetricUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput> | MetricCreateWithoutUserInput[] | MetricUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricCreateOrConnectWithoutUserInput | MetricCreateOrConnectWithoutUserInput[]
    createMany?: MetricCreateManyUserInputEnvelope
    connect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
  }

  export type MetricEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MetricEntryCreateWithoutUserInput, MetricEntryUncheckedCreateWithoutUserInput> | MetricEntryCreateWithoutUserInput[] | MetricEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricEntryCreateOrConnectWithoutUserInput | MetricEntryCreateOrConnectWithoutUserInput[]
    createMany?: MetricEntryCreateManyUserInputEnvelope
    connect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
  }

  export type PlanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput> | PlanCreateWithoutUserInput[] | PlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutUserInput | PlanCreateOrConnectWithoutUserInput[]
    createMany?: PlanCreateManyUserInputEnvelope
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PlanInvitationUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<PlanInvitationCreateWithoutSenderInput, PlanInvitationUncheckedCreateWithoutSenderInput> | PlanInvitationCreateWithoutSenderInput[] | PlanInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutSenderInput | PlanInvitationCreateOrConnectWithoutSenderInput[]
    createMany?: PlanInvitationCreateManySenderInputEnvelope
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
  }

  export type PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput = {
    create?: XOR<PlanInvitationCreateWithoutRecipientInput, PlanInvitationUncheckedCreateWithoutRecipientInput> | PlanInvitationCreateWithoutRecipientInput[] | PlanInvitationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutRecipientInput | PlanInvitationCreateOrConnectWithoutRecipientInput[]
    createMany?: PlanInvitationCreateManyRecipientInputEnvelope
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
  }

  export type PlanGroupUncheckedCreateNestedManyWithoutMembersInput = {
    create?: XOR<PlanGroupCreateWithoutMembersInput, PlanGroupUncheckedCreateWithoutMembersInput> | PlanGroupCreateWithoutMembersInput[] | PlanGroupUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: PlanGroupCreateOrConnectWithoutMembersInput | PlanGroupCreateOrConnectWithoutMembersInput[]
    connect?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
  }

  export type RecommendationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
  }

  export type ReactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput> | ReactionCreateWithoutUserInput[] | ReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutUserInput | ReactionCreateOrConnectWithoutUserInput[]
    createMany?: ReactionCreateManyUserInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type ConnectionUncheckedCreateNestedManyWithoutFromInput = {
    create?: XOR<ConnectionCreateWithoutFromInput, ConnectionUncheckedCreateWithoutFromInput> | ConnectionCreateWithoutFromInput[] | ConnectionUncheckedCreateWithoutFromInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutFromInput | ConnectionCreateOrConnectWithoutFromInput[]
    createMany?: ConnectionCreateManyFromInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type ConnectionUncheckedCreateNestedManyWithoutToInput = {
    create?: XOR<ConnectionCreateWithoutToInput, ConnectionUncheckedCreateWithoutToInput> | ConnectionCreateWithoutToInput[] | ConnectionUncheckedCreateWithoutToInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutToInput | ConnectionCreateOrConnectWithoutToInput[]
    createMany?: ConnectionCreateManyToInputEnvelope
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutReferredByInput = {
    create?: XOR<UserCreateWithoutReferredByInput, UserUncheckedCreateWithoutReferredByInput> | UserCreateWithoutReferredByInput[] | UserUncheckedCreateWithoutReferredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferredByInput | UserCreateOrConnectWithoutReferredByInput[]
    createMany?: UserCreateManyReferredByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumPlanTypeFieldUpdateOperationsInput = {
    set?: $Enums.PlanType
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type EnumThemeColorFieldUpdateOperationsInput = {
    set?: $Enums.ThemeColor
  }

  export type EnumActivityVisibilityFieldUpdateOperationsInput = {
    set?: $Enums.ActivityVisibility
  }

  export type UserUpdatedailyCheckinDaysInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableEnumDailyCheckinTimeFieldUpdateOperationsInput = {
    set?: $Enums.DailyCheckinTime | null
  }

  export type ActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityEntryCreateWithoutUserInput, ActivityEntryUncheckedCreateWithoutUserInput> | ActivityEntryCreateWithoutUserInput[] | ActivityEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutUserInput | ActivityEntryCreateOrConnectWithoutUserInput[]
    upsert?: ActivityEntryUpsertWithWhereUniqueWithoutUserInput | ActivityEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityEntryCreateManyUserInputEnvelope
    set?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    disconnect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    delete?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    connect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    update?: ActivityEntryUpdateWithWhereUniqueWithoutUserInput | ActivityEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityEntryUpdateManyWithWhereWithoutUserInput | ActivityEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityEntryScalarWhereInput | ActivityEntryScalarWhereInput[]
  }

  export type MetricUpdateManyWithoutUserNestedInput = {
    create?: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput> | MetricCreateWithoutUserInput[] | MetricUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricCreateOrConnectWithoutUserInput | MetricCreateOrConnectWithoutUserInput[]
    upsert?: MetricUpsertWithWhereUniqueWithoutUserInput | MetricUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MetricCreateManyUserInputEnvelope
    set?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    disconnect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    delete?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    connect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    update?: MetricUpdateWithWhereUniqueWithoutUserInput | MetricUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MetricUpdateManyWithWhereWithoutUserInput | MetricUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MetricScalarWhereInput | MetricScalarWhereInput[]
  }

  export type MetricEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<MetricEntryCreateWithoutUserInput, MetricEntryUncheckedCreateWithoutUserInput> | MetricEntryCreateWithoutUserInput[] | MetricEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricEntryCreateOrConnectWithoutUserInput | MetricEntryCreateOrConnectWithoutUserInput[]
    upsert?: MetricEntryUpsertWithWhereUniqueWithoutUserInput | MetricEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MetricEntryCreateManyUserInputEnvelope
    set?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    disconnect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    delete?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    connect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    update?: MetricEntryUpdateWithWhereUniqueWithoutUserInput | MetricEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MetricEntryUpdateManyWithWhereWithoutUserInput | MetricEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MetricEntryScalarWhereInput | MetricEntryScalarWhereInput[]
  }

  export type PlanUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput> | PlanCreateWithoutUserInput[] | PlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutUserInput | PlanCreateOrConnectWithoutUserInput[]
    upsert?: PlanUpsertWithWhereUniqueWithoutUserInput | PlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlanCreateManyUserInputEnvelope
    set?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    disconnect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    delete?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    update?: PlanUpdateWithWhereUniqueWithoutUserInput | PlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlanUpdateManyWithWhereWithoutUserInput | PlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlanScalarWhereInput | PlanScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PlanInvitationUpdateManyWithoutSenderNestedInput = {
    create?: XOR<PlanInvitationCreateWithoutSenderInput, PlanInvitationUncheckedCreateWithoutSenderInput> | PlanInvitationCreateWithoutSenderInput[] | PlanInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutSenderInput | PlanInvitationCreateOrConnectWithoutSenderInput[]
    upsert?: PlanInvitationUpsertWithWhereUniqueWithoutSenderInput | PlanInvitationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: PlanInvitationCreateManySenderInputEnvelope
    set?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    disconnect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    delete?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    update?: PlanInvitationUpdateWithWhereUniqueWithoutSenderInput | PlanInvitationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: PlanInvitationUpdateManyWithWhereWithoutSenderInput | PlanInvitationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: PlanInvitationScalarWhereInput | PlanInvitationScalarWhereInput[]
  }

  export type PlanInvitationUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<PlanInvitationCreateWithoutRecipientInput, PlanInvitationUncheckedCreateWithoutRecipientInput> | PlanInvitationCreateWithoutRecipientInput[] | PlanInvitationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutRecipientInput | PlanInvitationCreateOrConnectWithoutRecipientInput[]
    upsert?: PlanInvitationUpsertWithWhereUniqueWithoutRecipientInput | PlanInvitationUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: PlanInvitationCreateManyRecipientInputEnvelope
    set?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    disconnect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    delete?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    update?: PlanInvitationUpdateWithWhereUniqueWithoutRecipientInput | PlanInvitationUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: PlanInvitationUpdateManyWithWhereWithoutRecipientInput | PlanInvitationUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: PlanInvitationScalarWhereInput | PlanInvitationScalarWhereInput[]
  }

  export type PlanGroupUpdateManyWithoutMembersNestedInput = {
    create?: XOR<PlanGroupCreateWithoutMembersInput, PlanGroupUncheckedCreateWithoutMembersInput> | PlanGroupCreateWithoutMembersInput[] | PlanGroupUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: PlanGroupCreateOrConnectWithoutMembersInput | PlanGroupCreateOrConnectWithoutMembersInput[]
    upsert?: PlanGroupUpsertWithWhereUniqueWithoutMembersInput | PlanGroupUpsertWithWhereUniqueWithoutMembersInput[]
    set?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
    disconnect?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
    delete?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
    connect?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
    update?: PlanGroupUpdateWithWhereUniqueWithoutMembersInput | PlanGroupUpdateWithWhereUniqueWithoutMembersInput[]
    updateMany?: PlanGroupUpdateManyWithWhereWithoutMembersInput | PlanGroupUpdateManyWithWhereWithoutMembersInput[]
    deleteMany?: PlanGroupScalarWhereInput | PlanGroupScalarWhereInput[]
  }

  export type RecommendationUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserInput | RecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserInput | RecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserInput | RecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type ReactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput> | ReactionCreateWithoutUserInput[] | ReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutUserInput | ReactionCreateOrConnectWithoutUserInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutUserInput | ReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReactionCreateManyUserInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutUserInput | ReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutUserInput | ReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type ConnectionUpdateManyWithoutFromNestedInput = {
    create?: XOR<ConnectionCreateWithoutFromInput, ConnectionUncheckedCreateWithoutFromInput> | ConnectionCreateWithoutFromInput[] | ConnectionUncheckedCreateWithoutFromInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutFromInput | ConnectionCreateOrConnectWithoutFromInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutFromInput | ConnectionUpsertWithWhereUniqueWithoutFromInput[]
    createMany?: ConnectionCreateManyFromInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutFromInput | ConnectionUpdateWithWhereUniqueWithoutFromInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutFromInput | ConnectionUpdateManyWithWhereWithoutFromInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type ConnectionUpdateManyWithoutToNestedInput = {
    create?: XOR<ConnectionCreateWithoutToInput, ConnectionUncheckedCreateWithoutToInput> | ConnectionCreateWithoutToInput[] | ConnectionUncheckedCreateWithoutToInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutToInput | ConnectionCreateOrConnectWithoutToInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutToInput | ConnectionUpsertWithWhereUniqueWithoutToInput[]
    createMany?: ConnectionCreateManyToInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutToInput | ConnectionUpdateWithWhereUniqueWithoutToInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutToInput | ConnectionUpdateManyWithWhereWithoutToInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type UserUpdateManyWithoutReferredByNestedInput = {
    create?: XOR<UserCreateWithoutReferredByInput, UserUncheckedCreateWithoutReferredByInput> | UserCreateWithoutReferredByInput[] | UserUncheckedCreateWithoutReferredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferredByInput | UserCreateOrConnectWithoutReferredByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferredByInput | UserUpsertWithWhereUniqueWithoutReferredByInput[]
    createMany?: UserCreateManyReferredByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferredByInput | UserUpdateWithWhereUniqueWithoutReferredByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferredByInput | UserUpdateManyWithWhereWithoutReferredByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateOneWithoutReferredUsersNestedInput = {
    create?: XOR<UserCreateWithoutReferredUsersInput, UserUncheckedCreateWithoutReferredUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutReferredUsersInput
    upsert?: UserUpsertWithoutReferredUsersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReferredUsersInput, UserUpdateWithoutReferredUsersInput>, UserUncheckedUpdateWithoutReferredUsersInput>
  }

  export type ActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput> | ActivityCreateWithoutUserInput[] | ActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutUserInput | ActivityCreateOrConnectWithoutUserInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutUserInput | ActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityCreateManyUserInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutUserInput | ActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutUserInput | ActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ActivityEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ActivityEntryCreateWithoutUserInput, ActivityEntryUncheckedCreateWithoutUserInput> | ActivityEntryCreateWithoutUserInput[] | ActivityEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutUserInput | ActivityEntryCreateOrConnectWithoutUserInput[]
    upsert?: ActivityEntryUpsertWithWhereUniqueWithoutUserInput | ActivityEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ActivityEntryCreateManyUserInputEnvelope
    set?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    disconnect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    delete?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    connect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    update?: ActivityEntryUpdateWithWhereUniqueWithoutUserInput | ActivityEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ActivityEntryUpdateManyWithWhereWithoutUserInput | ActivityEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ActivityEntryScalarWhereInput | ActivityEntryScalarWhereInput[]
  }

  export type MetricUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput> | MetricCreateWithoutUserInput[] | MetricUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricCreateOrConnectWithoutUserInput | MetricCreateOrConnectWithoutUserInput[]
    upsert?: MetricUpsertWithWhereUniqueWithoutUserInput | MetricUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MetricCreateManyUserInputEnvelope
    set?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    disconnect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    delete?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    connect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    update?: MetricUpdateWithWhereUniqueWithoutUserInput | MetricUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MetricUpdateManyWithWhereWithoutUserInput | MetricUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MetricScalarWhereInput | MetricScalarWhereInput[]
  }

  export type MetricEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MetricEntryCreateWithoutUserInput, MetricEntryUncheckedCreateWithoutUserInput> | MetricEntryCreateWithoutUserInput[] | MetricEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricEntryCreateOrConnectWithoutUserInput | MetricEntryCreateOrConnectWithoutUserInput[]
    upsert?: MetricEntryUpsertWithWhereUniqueWithoutUserInput | MetricEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MetricEntryCreateManyUserInputEnvelope
    set?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    disconnect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    delete?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    connect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    update?: MetricEntryUpdateWithWhereUniqueWithoutUserInput | MetricEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MetricEntryUpdateManyWithWhereWithoutUserInput | MetricEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MetricEntryScalarWhereInput | MetricEntryScalarWhereInput[]
  }

  export type PlanUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput> | PlanCreateWithoutUserInput[] | PlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutUserInput | PlanCreateOrConnectWithoutUserInput[]
    upsert?: PlanUpsertWithWhereUniqueWithoutUserInput | PlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PlanCreateManyUserInputEnvelope
    set?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    disconnect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    delete?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    update?: PlanUpdateWithWhereUniqueWithoutUserInput | PlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PlanUpdateManyWithWhereWithoutUserInput | PlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PlanScalarWhereInput | PlanScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput> | MessageCreateWithoutUserInput[] | MessageUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutUserInput | MessageCreateOrConnectWithoutUserInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutUserInput | MessageUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MessageCreateManyUserInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutUserInput | MessageUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutUserInput | MessageUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<PlanInvitationCreateWithoutSenderInput, PlanInvitationUncheckedCreateWithoutSenderInput> | PlanInvitationCreateWithoutSenderInput[] | PlanInvitationUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutSenderInput | PlanInvitationCreateOrConnectWithoutSenderInput[]
    upsert?: PlanInvitationUpsertWithWhereUniqueWithoutSenderInput | PlanInvitationUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: PlanInvitationCreateManySenderInputEnvelope
    set?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    disconnect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    delete?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    update?: PlanInvitationUpdateWithWhereUniqueWithoutSenderInput | PlanInvitationUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: PlanInvitationUpdateManyWithWhereWithoutSenderInput | PlanInvitationUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: PlanInvitationScalarWhereInput | PlanInvitationScalarWhereInput[]
  }

  export type PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput = {
    create?: XOR<PlanInvitationCreateWithoutRecipientInput, PlanInvitationUncheckedCreateWithoutRecipientInput> | PlanInvitationCreateWithoutRecipientInput[] | PlanInvitationUncheckedCreateWithoutRecipientInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutRecipientInput | PlanInvitationCreateOrConnectWithoutRecipientInput[]
    upsert?: PlanInvitationUpsertWithWhereUniqueWithoutRecipientInput | PlanInvitationUpsertWithWhereUniqueWithoutRecipientInput[]
    createMany?: PlanInvitationCreateManyRecipientInputEnvelope
    set?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    disconnect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    delete?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    update?: PlanInvitationUpdateWithWhereUniqueWithoutRecipientInput | PlanInvitationUpdateWithWhereUniqueWithoutRecipientInput[]
    updateMany?: PlanInvitationUpdateManyWithWhereWithoutRecipientInput | PlanInvitationUpdateManyWithWhereWithoutRecipientInput[]
    deleteMany?: PlanInvitationScalarWhereInput | PlanInvitationScalarWhereInput[]
  }

  export type PlanGroupUncheckedUpdateManyWithoutMembersNestedInput = {
    create?: XOR<PlanGroupCreateWithoutMembersInput, PlanGroupUncheckedCreateWithoutMembersInput> | PlanGroupCreateWithoutMembersInput[] | PlanGroupUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: PlanGroupCreateOrConnectWithoutMembersInput | PlanGroupCreateOrConnectWithoutMembersInput[]
    upsert?: PlanGroupUpsertWithWhereUniqueWithoutMembersInput | PlanGroupUpsertWithWhereUniqueWithoutMembersInput[]
    set?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
    disconnect?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
    delete?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
    connect?: PlanGroupWhereUniqueInput | PlanGroupWhereUniqueInput[]
    update?: PlanGroupUpdateWithWhereUniqueWithoutMembersInput | PlanGroupUpdateWithWhereUniqueWithoutMembersInput[]
    updateMany?: PlanGroupUpdateManyWithWhereWithoutMembersInput | PlanGroupUpdateManyWithWhereWithoutMembersInput[]
    deleteMany?: PlanGroupScalarWhereInput | PlanGroupScalarWhereInput[]
  }

  export type RecommendationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput> | RecommendationCreateWithoutUserInput[] | RecommendationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RecommendationCreateOrConnectWithoutUserInput | RecommendationCreateOrConnectWithoutUserInput[]
    upsert?: RecommendationUpsertWithWhereUniqueWithoutUserInput | RecommendationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RecommendationCreateManyUserInputEnvelope
    set?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    disconnect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    delete?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    connect?: RecommendationWhereUniqueInput | RecommendationWhereUniqueInput[]
    update?: RecommendationUpdateWithWhereUniqueWithoutUserInput | RecommendationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RecommendationUpdateManyWithWhereWithoutUserInput | RecommendationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
  }

  export type ReactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput> | ReactionCreateWithoutUserInput[] | ReactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutUserInput | ReactionCreateOrConnectWithoutUserInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutUserInput | ReactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReactionCreateManyUserInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutUserInput | ReactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutUserInput | ReactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type ConnectionUncheckedUpdateManyWithoutFromNestedInput = {
    create?: XOR<ConnectionCreateWithoutFromInput, ConnectionUncheckedCreateWithoutFromInput> | ConnectionCreateWithoutFromInput[] | ConnectionUncheckedCreateWithoutFromInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutFromInput | ConnectionCreateOrConnectWithoutFromInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutFromInput | ConnectionUpsertWithWhereUniqueWithoutFromInput[]
    createMany?: ConnectionCreateManyFromInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutFromInput | ConnectionUpdateWithWhereUniqueWithoutFromInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutFromInput | ConnectionUpdateManyWithWhereWithoutFromInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type ConnectionUncheckedUpdateManyWithoutToNestedInput = {
    create?: XOR<ConnectionCreateWithoutToInput, ConnectionUncheckedCreateWithoutToInput> | ConnectionCreateWithoutToInput[] | ConnectionUncheckedCreateWithoutToInput[]
    connectOrCreate?: ConnectionCreateOrConnectWithoutToInput | ConnectionCreateOrConnectWithoutToInput[]
    upsert?: ConnectionUpsertWithWhereUniqueWithoutToInput | ConnectionUpsertWithWhereUniqueWithoutToInput[]
    createMany?: ConnectionCreateManyToInputEnvelope
    set?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    disconnect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    delete?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    connect?: ConnectionWhereUniqueInput | ConnectionWhereUniqueInput[]
    update?: ConnectionUpdateWithWhereUniqueWithoutToInput | ConnectionUpdateWithWhereUniqueWithoutToInput[]
    updateMany?: ConnectionUpdateManyWithWhereWithoutToInput | ConnectionUpdateManyWithWhereWithoutToInput[]
    deleteMany?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutReferredByNestedInput = {
    create?: XOR<UserCreateWithoutReferredByInput, UserUncheckedCreateWithoutReferredByInput> | UserCreateWithoutReferredByInput[] | UserUncheckedCreateWithoutReferredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutReferredByInput | UserCreateOrConnectWithoutReferredByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutReferredByInput | UserUpsertWithWhereUniqueWithoutReferredByInput[]
    createMany?: UserCreateManyReferredByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutReferredByInput | UserUpdateWithWhereUniqueWithoutReferredByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutReferredByInput | UserUpdateManyWithWhereWithoutReferredByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutConnectionsFromInput = {
    create?: XOR<UserCreateWithoutConnectionsFromInput, UserUncheckedCreateWithoutConnectionsFromInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectionsFromInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutConnectionsToInput = {
    create?: XOR<UserCreateWithoutConnectionsToInput, UserUncheckedCreateWithoutConnectionsToInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectionsToInput
    connect?: UserWhereUniqueInput
  }

  export type EnumConnectionStatusFieldUpdateOperationsInput = {
    set?: $Enums.ConnectionStatus
  }

  export type UserUpdateOneRequiredWithoutConnectionsFromNestedInput = {
    create?: XOR<UserCreateWithoutConnectionsFromInput, UserUncheckedCreateWithoutConnectionsFromInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectionsFromInput
    upsert?: UserUpsertWithoutConnectionsFromInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConnectionsFromInput, UserUpdateWithoutConnectionsFromInput>, UserUncheckedUpdateWithoutConnectionsFromInput>
  }

  export type UserUpdateOneRequiredWithoutConnectionsToNestedInput = {
    create?: XOR<UserCreateWithoutConnectionsToInput, UserUncheckedCreateWithoutConnectionsToInput>
    connectOrCreate?: UserCreateOrConnectWithoutConnectionsToInput
    upsert?: UserUpsertWithoutConnectionsToInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConnectionsToInput, UserUpdateWithoutConnectionsToInput>, UserUncheckedUpdateWithoutConnectionsToInput>
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityEntryCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityEntryCreateWithoutActivityInput, ActivityEntryUncheckedCreateWithoutActivityInput> | ActivityEntryCreateWithoutActivityInput[] | ActivityEntryUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutActivityInput | ActivityEntryCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityEntryCreateManyActivityInputEnvelope
    connect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
  }

  export type PlanSessionCreateNestedManyWithoutActivityInput = {
    create?: XOR<PlanSessionCreateWithoutActivityInput, PlanSessionUncheckedCreateWithoutActivityInput> | PlanSessionCreateWithoutActivityInput[] | PlanSessionUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: PlanSessionCreateOrConnectWithoutActivityInput | PlanSessionCreateOrConnectWithoutActivityInput[]
    createMany?: PlanSessionCreateManyActivityInputEnvelope
    connect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
  }

  export type PlanCreateNestedManyWithoutActivitiesInput = {
    create?: XOR<PlanCreateWithoutActivitiesInput, PlanUncheckedCreateWithoutActivitiesInput> | PlanCreateWithoutActivitiesInput[] | PlanUncheckedCreateWithoutActivitiesInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutActivitiesInput | PlanCreateOrConnectWithoutActivitiesInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
  }

  export type ActivityEntryUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityEntryCreateWithoutActivityInput, ActivityEntryUncheckedCreateWithoutActivityInput> | ActivityEntryCreateWithoutActivityInput[] | ActivityEntryUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutActivityInput | ActivityEntryCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityEntryCreateManyActivityInputEnvelope
    connect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
  }

  export type PlanSessionUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<PlanSessionCreateWithoutActivityInput, PlanSessionUncheckedCreateWithoutActivityInput> | PlanSessionCreateWithoutActivityInput[] | PlanSessionUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: PlanSessionCreateOrConnectWithoutActivityInput | PlanSessionCreateOrConnectWithoutActivityInput[]
    createMany?: PlanSessionCreateManyActivityInputEnvelope
    connect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
  }

  export type PlanUncheckedCreateNestedManyWithoutActivitiesInput = {
    create?: XOR<PlanCreateWithoutActivitiesInput, PlanUncheckedCreateWithoutActivitiesInput> | PlanCreateWithoutActivitiesInput[] | PlanUncheckedCreateWithoutActivitiesInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutActivitiesInput | PlanCreateOrConnectWithoutActivitiesInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
  }

  export type NullableEnumActivityVisibilityFieldUpdateOperationsInput = {
    set?: $Enums.ActivityVisibility | null
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type ActivityEntryUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityEntryCreateWithoutActivityInput, ActivityEntryUncheckedCreateWithoutActivityInput> | ActivityEntryCreateWithoutActivityInput[] | ActivityEntryUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutActivityInput | ActivityEntryCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityEntryUpsertWithWhereUniqueWithoutActivityInput | ActivityEntryUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityEntryCreateManyActivityInputEnvelope
    set?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    disconnect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    delete?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    connect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    update?: ActivityEntryUpdateWithWhereUniqueWithoutActivityInput | ActivityEntryUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityEntryUpdateManyWithWhereWithoutActivityInput | ActivityEntryUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityEntryScalarWhereInput | ActivityEntryScalarWhereInput[]
  }

  export type PlanSessionUpdateManyWithoutActivityNestedInput = {
    create?: XOR<PlanSessionCreateWithoutActivityInput, PlanSessionUncheckedCreateWithoutActivityInput> | PlanSessionCreateWithoutActivityInput[] | PlanSessionUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: PlanSessionCreateOrConnectWithoutActivityInput | PlanSessionCreateOrConnectWithoutActivityInput[]
    upsert?: PlanSessionUpsertWithWhereUniqueWithoutActivityInput | PlanSessionUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: PlanSessionCreateManyActivityInputEnvelope
    set?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    disconnect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    delete?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    connect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    update?: PlanSessionUpdateWithWhereUniqueWithoutActivityInput | PlanSessionUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: PlanSessionUpdateManyWithWhereWithoutActivityInput | PlanSessionUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: PlanSessionScalarWhereInput | PlanSessionScalarWhereInput[]
  }

  export type PlanUpdateManyWithoutActivitiesNestedInput = {
    create?: XOR<PlanCreateWithoutActivitiesInput, PlanUncheckedCreateWithoutActivitiesInput> | PlanCreateWithoutActivitiesInput[] | PlanUncheckedCreateWithoutActivitiesInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutActivitiesInput | PlanCreateOrConnectWithoutActivitiesInput[]
    upsert?: PlanUpsertWithWhereUniqueWithoutActivitiesInput | PlanUpsertWithWhereUniqueWithoutActivitiesInput[]
    set?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    disconnect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    delete?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    update?: PlanUpdateWithWhereUniqueWithoutActivitiesInput | PlanUpdateWithWhereUniqueWithoutActivitiesInput[]
    updateMany?: PlanUpdateManyWithWhereWithoutActivitiesInput | PlanUpdateManyWithWhereWithoutActivitiesInput[]
    deleteMany?: PlanScalarWhereInput | PlanScalarWhereInput[]
  }

  export type ActivityEntryUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityEntryCreateWithoutActivityInput, ActivityEntryUncheckedCreateWithoutActivityInput> | ActivityEntryCreateWithoutActivityInput[] | ActivityEntryUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutActivityInput | ActivityEntryCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityEntryUpsertWithWhereUniqueWithoutActivityInput | ActivityEntryUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityEntryCreateManyActivityInputEnvelope
    set?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    disconnect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    delete?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    connect?: ActivityEntryWhereUniqueInput | ActivityEntryWhereUniqueInput[]
    update?: ActivityEntryUpdateWithWhereUniqueWithoutActivityInput | ActivityEntryUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityEntryUpdateManyWithWhereWithoutActivityInput | ActivityEntryUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityEntryScalarWhereInput | ActivityEntryScalarWhereInput[]
  }

  export type PlanSessionUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<PlanSessionCreateWithoutActivityInput, PlanSessionUncheckedCreateWithoutActivityInput> | PlanSessionCreateWithoutActivityInput[] | PlanSessionUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: PlanSessionCreateOrConnectWithoutActivityInput | PlanSessionCreateOrConnectWithoutActivityInput[]
    upsert?: PlanSessionUpsertWithWhereUniqueWithoutActivityInput | PlanSessionUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: PlanSessionCreateManyActivityInputEnvelope
    set?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    disconnect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    delete?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    connect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    update?: PlanSessionUpdateWithWhereUniqueWithoutActivityInput | PlanSessionUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: PlanSessionUpdateManyWithWhereWithoutActivityInput | PlanSessionUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: PlanSessionScalarWhereInput | PlanSessionScalarWhereInput[]
  }

  export type PlanUncheckedUpdateManyWithoutActivitiesNestedInput = {
    create?: XOR<PlanCreateWithoutActivitiesInput, PlanUncheckedCreateWithoutActivitiesInput> | PlanCreateWithoutActivitiesInput[] | PlanUncheckedCreateWithoutActivitiesInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutActivitiesInput | PlanCreateOrConnectWithoutActivitiesInput[]
    upsert?: PlanUpsertWithWhereUniqueWithoutActivitiesInput | PlanUpsertWithWhereUniqueWithoutActivitiesInput[]
    set?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    disconnect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    delete?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    update?: PlanUpdateWithWhereUniqueWithoutActivitiesInput | PlanUpdateWithWhereUniqueWithoutActivitiesInput[]
    updateMany?: PlanUpdateManyWithWhereWithoutActivitiesInput | PlanUpdateManyWithWhereWithoutActivitiesInput[]
    deleteMany?: PlanScalarWhereInput | PlanScalarWhereInput[]
  }

  export type ActivityCreateNestedOneWithoutEntriesInput = {
    create?: XOR<ActivityCreateWithoutEntriesInput, ActivityUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutEntriesInput
    connect?: ActivityWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutActivityEntriesInput = {
    create?: XOR<UserCreateWithoutActivityEntriesInput, UserUncheckedCreateWithoutActivityEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type ReactionCreateNestedManyWithoutActivityEntryInput = {
    create?: XOR<ReactionCreateWithoutActivityEntryInput, ReactionUncheckedCreateWithoutActivityEntryInput> | ReactionCreateWithoutActivityEntryInput[] | ReactionUncheckedCreateWithoutActivityEntryInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutActivityEntryInput | ReactionCreateOrConnectWithoutActivityEntryInput[]
    createMany?: ReactionCreateManyActivityEntryInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutActivityEntryInput = {
    create?: XOR<CommentCreateWithoutActivityEntryInput, CommentUncheckedCreateWithoutActivityEntryInput> | CommentCreateWithoutActivityEntryInput[] | CommentUncheckedCreateWithoutActivityEntryInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActivityEntryInput | CommentCreateOrConnectWithoutActivityEntryInput[]
    createMany?: CommentCreateManyActivityEntryInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type ReactionUncheckedCreateNestedManyWithoutActivityEntryInput = {
    create?: XOR<ReactionCreateWithoutActivityEntryInput, ReactionUncheckedCreateWithoutActivityEntryInput> | ReactionCreateWithoutActivityEntryInput[] | ReactionUncheckedCreateWithoutActivityEntryInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutActivityEntryInput | ReactionCreateOrConnectWithoutActivityEntryInput[]
    createMany?: ReactionCreateManyActivityEntryInputEnvelope
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutActivityEntryInput = {
    create?: XOR<CommentCreateWithoutActivityEntryInput, CommentUncheckedCreateWithoutActivityEntryInput> | CommentCreateWithoutActivityEntryInput[] | CommentUncheckedCreateWithoutActivityEntryInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActivityEntryInput | CommentCreateOrConnectWithoutActivityEntryInput[]
    createMany?: CommentCreateManyActivityEntryInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ActivityUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<ActivityCreateWithoutEntriesInput, ActivityUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutEntriesInput
    upsert?: ActivityUpsertWithoutEntriesInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutEntriesInput, ActivityUpdateWithoutEntriesInput>, ActivityUncheckedUpdateWithoutEntriesInput>
  }

  export type UserUpdateOneRequiredWithoutActivityEntriesNestedInput = {
    create?: XOR<UserCreateWithoutActivityEntriesInput, UserUncheckedCreateWithoutActivityEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivityEntriesInput
    upsert?: UserUpsertWithoutActivityEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivityEntriesInput, UserUpdateWithoutActivityEntriesInput>, UserUncheckedUpdateWithoutActivityEntriesInput>
  }

  export type ReactionUpdateManyWithoutActivityEntryNestedInput = {
    create?: XOR<ReactionCreateWithoutActivityEntryInput, ReactionUncheckedCreateWithoutActivityEntryInput> | ReactionCreateWithoutActivityEntryInput[] | ReactionUncheckedCreateWithoutActivityEntryInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutActivityEntryInput | ReactionCreateOrConnectWithoutActivityEntryInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutActivityEntryInput | ReactionUpsertWithWhereUniqueWithoutActivityEntryInput[]
    createMany?: ReactionCreateManyActivityEntryInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutActivityEntryInput | ReactionUpdateWithWhereUniqueWithoutActivityEntryInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutActivityEntryInput | ReactionUpdateManyWithWhereWithoutActivityEntryInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutActivityEntryNestedInput = {
    create?: XOR<CommentCreateWithoutActivityEntryInput, CommentUncheckedCreateWithoutActivityEntryInput> | CommentCreateWithoutActivityEntryInput[] | CommentUncheckedCreateWithoutActivityEntryInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActivityEntryInput | CommentCreateOrConnectWithoutActivityEntryInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutActivityEntryInput | CommentUpsertWithWhereUniqueWithoutActivityEntryInput[]
    createMany?: CommentCreateManyActivityEntryInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutActivityEntryInput | CommentUpdateWithWhereUniqueWithoutActivityEntryInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutActivityEntryInput | CommentUpdateManyWithWhereWithoutActivityEntryInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ReactionUncheckedUpdateManyWithoutActivityEntryNestedInput = {
    create?: XOR<ReactionCreateWithoutActivityEntryInput, ReactionUncheckedCreateWithoutActivityEntryInput> | ReactionCreateWithoutActivityEntryInput[] | ReactionUncheckedCreateWithoutActivityEntryInput[]
    connectOrCreate?: ReactionCreateOrConnectWithoutActivityEntryInput | ReactionCreateOrConnectWithoutActivityEntryInput[]
    upsert?: ReactionUpsertWithWhereUniqueWithoutActivityEntryInput | ReactionUpsertWithWhereUniqueWithoutActivityEntryInput[]
    createMany?: ReactionCreateManyActivityEntryInputEnvelope
    set?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    disconnect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    delete?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    connect?: ReactionWhereUniqueInput | ReactionWhereUniqueInput[]
    update?: ReactionUpdateWithWhereUniqueWithoutActivityEntryInput | ReactionUpdateWithWhereUniqueWithoutActivityEntryInput[]
    updateMany?: ReactionUpdateManyWithWhereWithoutActivityEntryInput | ReactionUpdateManyWithWhereWithoutActivityEntryInput[]
    deleteMany?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutActivityEntryNestedInput = {
    create?: XOR<CommentCreateWithoutActivityEntryInput, CommentUncheckedCreateWithoutActivityEntryInput> | CommentCreateWithoutActivityEntryInput[] | CommentUncheckedCreateWithoutActivityEntryInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutActivityEntryInput | CommentCreateOrConnectWithoutActivityEntryInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutActivityEntryInput | CommentUpsertWithWhereUniqueWithoutActivityEntryInput[]
    createMany?: CommentCreateManyActivityEntryInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutActivityEntryInput | CommentUpdateWithWhereUniqueWithoutActivityEntryInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutActivityEntryInput | CommentUpdateManyWithWhereWithoutActivityEntryInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type ActivityEntryCreateNestedOneWithoutReactionsInput = {
    create?: XOR<ActivityEntryCreateWithoutReactionsInput, ActivityEntryUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutReactionsInput
    connect?: ActivityEntryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReactionsSentInput = {
    create?: XOR<UserCreateWithoutReactionsSentInput, UserUncheckedCreateWithoutReactionsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutReactionsSentInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityEntryUpdateOneRequiredWithoutReactionsNestedInput = {
    create?: XOR<ActivityEntryCreateWithoutReactionsInput, ActivityEntryUncheckedCreateWithoutReactionsInput>
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutReactionsInput
    upsert?: ActivityEntryUpsertWithoutReactionsInput
    connect?: ActivityEntryWhereUniqueInput
    update?: XOR<XOR<ActivityEntryUpdateToOneWithWhereWithoutReactionsInput, ActivityEntryUpdateWithoutReactionsInput>, ActivityEntryUncheckedUpdateWithoutReactionsInput>
  }

  export type UserUpdateOneRequiredWithoutReactionsSentNestedInput = {
    create?: XOR<UserCreateWithoutReactionsSentInput, UserUncheckedCreateWithoutReactionsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutReactionsSentInput
    upsert?: UserUpsertWithoutReactionsSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReactionsSentInput, UserUpdateWithoutReactionsSentInput>, UserUncheckedUpdateWithoutReactionsSentInput>
  }

  export type ActivityEntryCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ActivityEntryCreateWithoutCommentsInput, ActivityEntryUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutCommentsInput
    connect?: ActivityEntryWhereUniqueInput
  }

  export type ActivityEntryUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<ActivityEntryCreateWithoutCommentsInput, ActivityEntryUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ActivityEntryCreateOrConnectWithoutCommentsInput
    upsert?: ActivityEntryUpsertWithoutCommentsInput
    connect?: ActivityEntryWhereUniqueInput
    update?: XOR<XOR<ActivityEntryUpdateToOneWithWhereWithoutCommentsInput, ActivityEntryUpdateWithoutCommentsInput>, ActivityEntryUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutMetricsInput = {
    create?: XOR<UserCreateWithoutMetricsInput, UserUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMetricsInput
    connect?: UserWhereUniqueInput
  }

  export type MetricEntryCreateNestedManyWithoutMetricInput = {
    create?: XOR<MetricEntryCreateWithoutMetricInput, MetricEntryUncheckedCreateWithoutMetricInput> | MetricEntryCreateWithoutMetricInput[] | MetricEntryUncheckedCreateWithoutMetricInput[]
    connectOrCreate?: MetricEntryCreateOrConnectWithoutMetricInput | MetricEntryCreateOrConnectWithoutMetricInput[]
    createMany?: MetricEntryCreateManyMetricInputEnvelope
    connect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
  }

  export type MetricEntryUncheckedCreateNestedManyWithoutMetricInput = {
    create?: XOR<MetricEntryCreateWithoutMetricInput, MetricEntryUncheckedCreateWithoutMetricInput> | MetricEntryCreateWithoutMetricInput[] | MetricEntryUncheckedCreateWithoutMetricInput[]
    connectOrCreate?: MetricEntryCreateOrConnectWithoutMetricInput | MetricEntryCreateOrConnectWithoutMetricInput[]
    createMany?: MetricEntryCreateManyMetricInputEnvelope
    connect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutMetricsNestedInput = {
    create?: XOR<UserCreateWithoutMetricsInput, UserUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMetricsInput
    upsert?: UserUpsertWithoutMetricsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMetricsInput, UserUpdateWithoutMetricsInput>, UserUncheckedUpdateWithoutMetricsInput>
  }

  export type MetricEntryUpdateManyWithoutMetricNestedInput = {
    create?: XOR<MetricEntryCreateWithoutMetricInput, MetricEntryUncheckedCreateWithoutMetricInput> | MetricEntryCreateWithoutMetricInput[] | MetricEntryUncheckedCreateWithoutMetricInput[]
    connectOrCreate?: MetricEntryCreateOrConnectWithoutMetricInput | MetricEntryCreateOrConnectWithoutMetricInput[]
    upsert?: MetricEntryUpsertWithWhereUniqueWithoutMetricInput | MetricEntryUpsertWithWhereUniqueWithoutMetricInput[]
    createMany?: MetricEntryCreateManyMetricInputEnvelope
    set?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    disconnect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    delete?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    connect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    update?: MetricEntryUpdateWithWhereUniqueWithoutMetricInput | MetricEntryUpdateWithWhereUniqueWithoutMetricInput[]
    updateMany?: MetricEntryUpdateManyWithWhereWithoutMetricInput | MetricEntryUpdateManyWithWhereWithoutMetricInput[]
    deleteMany?: MetricEntryScalarWhereInput | MetricEntryScalarWhereInput[]
  }

  export type MetricEntryUncheckedUpdateManyWithoutMetricNestedInput = {
    create?: XOR<MetricEntryCreateWithoutMetricInput, MetricEntryUncheckedCreateWithoutMetricInput> | MetricEntryCreateWithoutMetricInput[] | MetricEntryUncheckedCreateWithoutMetricInput[]
    connectOrCreate?: MetricEntryCreateOrConnectWithoutMetricInput | MetricEntryCreateOrConnectWithoutMetricInput[]
    upsert?: MetricEntryUpsertWithWhereUniqueWithoutMetricInput | MetricEntryUpsertWithWhereUniqueWithoutMetricInput[]
    createMany?: MetricEntryCreateManyMetricInputEnvelope
    set?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    disconnect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    delete?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    connect?: MetricEntryWhereUniqueInput | MetricEntryWhereUniqueInput[]
    update?: MetricEntryUpdateWithWhereUniqueWithoutMetricInput | MetricEntryUpdateWithWhereUniqueWithoutMetricInput[]
    updateMany?: MetricEntryUpdateManyWithWhereWithoutMetricInput | MetricEntryUpdateManyWithWhereWithoutMetricInput[]
    deleteMany?: MetricEntryScalarWhereInput | MetricEntryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMetricEntriesInput = {
    create?: XOR<UserCreateWithoutMetricEntriesInput, UserUncheckedCreateWithoutMetricEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMetricEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type MetricCreateNestedOneWithoutEntriesInput = {
    create?: XOR<MetricCreateWithoutEntriesInput, MetricUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: MetricCreateOrConnectWithoutEntriesInput
    connect?: MetricWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMetricEntriesNestedInput = {
    create?: XOR<UserCreateWithoutMetricEntriesInput, UserUncheckedCreateWithoutMetricEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMetricEntriesInput
    upsert?: UserUpsertWithoutMetricEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMetricEntriesInput, UserUpdateWithoutMetricEntriesInput>, UserUncheckedUpdateWithoutMetricEntriesInput>
  }

  export type MetricUpdateOneRequiredWithoutEntriesNestedInput = {
    create?: XOR<MetricCreateWithoutEntriesInput, MetricUncheckedCreateWithoutEntriesInput>
    connectOrCreate?: MetricCreateOrConnectWithoutEntriesInput
    upsert?: MetricUpsertWithoutEntriesInput
    connect?: MetricWhereUniqueInput
    update?: XOR<XOR<MetricUpdateToOneWithWhereWithoutEntriesInput, MetricUpdateWithoutEntriesInput>, MetricUncheckedUpdateWithoutEntriesInput>
  }

  export type UserCreateNestedOneWithoutPlansInput = {
    create?: XOR<UserCreateWithoutPlansInput, UserUncheckedCreateWithoutPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlansInput
    connect?: UserWhereUniqueInput
  }

  export type PlanGroupCreateNestedOneWithoutPlansInput = {
    create?: XOR<PlanGroupCreateWithoutPlansInput, PlanGroupUncheckedCreateWithoutPlansInput>
    connectOrCreate?: PlanGroupCreateOrConnectWithoutPlansInput
    connect?: PlanGroupWhereUniqueInput
  }

  export type PlanSessionCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanSessionCreateWithoutPlanInput, PlanSessionUncheckedCreateWithoutPlanInput> | PlanSessionCreateWithoutPlanInput[] | PlanSessionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanSessionCreateOrConnectWithoutPlanInput | PlanSessionCreateOrConnectWithoutPlanInput[]
    createMany?: PlanSessionCreateManyPlanInputEnvelope
    connect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
  }

  export type ActivityCreateNestedManyWithoutPlansInput = {
    create?: XOR<ActivityCreateWithoutPlansInput, ActivityUncheckedCreateWithoutPlansInput> | ActivityCreateWithoutPlansInput[] | ActivityUncheckedCreateWithoutPlansInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutPlansInput | ActivityCreateOrConnectWithoutPlansInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type PlanInvitationCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanInvitationCreateWithoutPlanInput, PlanInvitationUncheckedCreateWithoutPlanInput> | PlanInvitationCreateWithoutPlanInput[] | PlanInvitationUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutPlanInput | PlanInvitationCreateOrConnectWithoutPlanInput[]
    createMany?: PlanInvitationCreateManyPlanInputEnvelope
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
  }

  export type PlanMilestoneCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanMilestoneCreateWithoutPlanInput, PlanMilestoneUncheckedCreateWithoutPlanInput> | PlanMilestoneCreateWithoutPlanInput[] | PlanMilestoneUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanMilestoneCreateOrConnectWithoutPlanInput | PlanMilestoneCreateOrConnectWithoutPlanInput[]
    createMany?: PlanMilestoneCreateManyPlanInputEnvelope
    connect?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
  }

  export type PlanSessionUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanSessionCreateWithoutPlanInput, PlanSessionUncheckedCreateWithoutPlanInput> | PlanSessionCreateWithoutPlanInput[] | PlanSessionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanSessionCreateOrConnectWithoutPlanInput | PlanSessionCreateOrConnectWithoutPlanInput[]
    createMany?: PlanSessionCreateManyPlanInputEnvelope
    connect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutPlansInput = {
    create?: XOR<ActivityCreateWithoutPlansInput, ActivityUncheckedCreateWithoutPlansInput> | ActivityCreateWithoutPlansInput[] | ActivityUncheckedCreateWithoutPlansInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutPlansInput | ActivityCreateOrConnectWithoutPlansInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type PlanInvitationUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanInvitationCreateWithoutPlanInput, PlanInvitationUncheckedCreateWithoutPlanInput> | PlanInvitationCreateWithoutPlanInput[] | PlanInvitationUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutPlanInput | PlanInvitationCreateOrConnectWithoutPlanInput[]
    createMany?: PlanInvitationCreateManyPlanInputEnvelope
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
  }

  export type PlanMilestoneUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanMilestoneCreateWithoutPlanInput, PlanMilestoneUncheckedCreateWithoutPlanInput> | PlanMilestoneCreateWithoutPlanInput[] | PlanMilestoneUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanMilestoneCreateOrConnectWithoutPlanInput | PlanMilestoneCreateOrConnectWithoutPlanInput[]
    createMany?: PlanMilestoneCreateManyPlanInputEnvelope
    connect?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
  }

  export type NullableEnumPlanDurationTypeFieldUpdateOperationsInput = {
    set?: $Enums.PlanDurationType | null
  }

  export type EnumPlanOutlineTypeFieldUpdateOperationsInput = {
    set?: $Enums.PlanOutlineType
  }

  export type EnumPlanStateFieldUpdateOperationsInput = {
    set?: $Enums.PlanState
  }

  export type UserUpdateOneRequiredWithoutPlansNestedInput = {
    create?: XOR<UserCreateWithoutPlansInput, UserUncheckedCreateWithoutPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlansInput
    upsert?: UserUpsertWithoutPlansInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlansInput, UserUpdateWithoutPlansInput>, UserUncheckedUpdateWithoutPlansInput>
  }

  export type PlanGroupUpdateOneWithoutPlansNestedInput = {
    create?: XOR<PlanGroupCreateWithoutPlansInput, PlanGroupUncheckedCreateWithoutPlansInput>
    connectOrCreate?: PlanGroupCreateOrConnectWithoutPlansInput
    upsert?: PlanGroupUpsertWithoutPlansInput
    disconnect?: PlanGroupWhereInput | boolean
    delete?: PlanGroupWhereInput | boolean
    connect?: PlanGroupWhereUniqueInput
    update?: XOR<XOR<PlanGroupUpdateToOneWithWhereWithoutPlansInput, PlanGroupUpdateWithoutPlansInput>, PlanGroupUncheckedUpdateWithoutPlansInput>
  }

  export type PlanSessionUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanSessionCreateWithoutPlanInput, PlanSessionUncheckedCreateWithoutPlanInput> | PlanSessionCreateWithoutPlanInput[] | PlanSessionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanSessionCreateOrConnectWithoutPlanInput | PlanSessionCreateOrConnectWithoutPlanInput[]
    upsert?: PlanSessionUpsertWithWhereUniqueWithoutPlanInput | PlanSessionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PlanSessionCreateManyPlanInputEnvelope
    set?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    disconnect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    delete?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    connect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    update?: PlanSessionUpdateWithWhereUniqueWithoutPlanInput | PlanSessionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanSessionUpdateManyWithWhereWithoutPlanInput | PlanSessionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanSessionScalarWhereInput | PlanSessionScalarWhereInput[]
  }

  export type ActivityUpdateManyWithoutPlansNestedInput = {
    create?: XOR<ActivityCreateWithoutPlansInput, ActivityUncheckedCreateWithoutPlansInput> | ActivityCreateWithoutPlansInput[] | ActivityUncheckedCreateWithoutPlansInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutPlansInput | ActivityCreateOrConnectWithoutPlansInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutPlansInput | ActivityUpsertWithWhereUniqueWithoutPlansInput[]
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutPlansInput | ActivityUpdateWithWhereUniqueWithoutPlansInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutPlansInput | ActivityUpdateManyWithWhereWithoutPlansInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type PlanInvitationUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanInvitationCreateWithoutPlanInput, PlanInvitationUncheckedCreateWithoutPlanInput> | PlanInvitationCreateWithoutPlanInput[] | PlanInvitationUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutPlanInput | PlanInvitationCreateOrConnectWithoutPlanInput[]
    upsert?: PlanInvitationUpsertWithWhereUniqueWithoutPlanInput | PlanInvitationUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PlanInvitationCreateManyPlanInputEnvelope
    set?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    disconnect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    delete?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    update?: PlanInvitationUpdateWithWhereUniqueWithoutPlanInput | PlanInvitationUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanInvitationUpdateManyWithWhereWithoutPlanInput | PlanInvitationUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanInvitationScalarWhereInput | PlanInvitationScalarWhereInput[]
  }

  export type PlanMilestoneUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanMilestoneCreateWithoutPlanInput, PlanMilestoneUncheckedCreateWithoutPlanInput> | PlanMilestoneCreateWithoutPlanInput[] | PlanMilestoneUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanMilestoneCreateOrConnectWithoutPlanInput | PlanMilestoneCreateOrConnectWithoutPlanInput[]
    upsert?: PlanMilestoneUpsertWithWhereUniqueWithoutPlanInput | PlanMilestoneUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PlanMilestoneCreateManyPlanInputEnvelope
    set?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
    disconnect?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
    delete?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
    connect?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
    update?: PlanMilestoneUpdateWithWhereUniqueWithoutPlanInput | PlanMilestoneUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanMilestoneUpdateManyWithWhereWithoutPlanInput | PlanMilestoneUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanMilestoneScalarWhereInput | PlanMilestoneScalarWhereInput[]
  }

  export type PlanSessionUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanSessionCreateWithoutPlanInput, PlanSessionUncheckedCreateWithoutPlanInput> | PlanSessionCreateWithoutPlanInput[] | PlanSessionUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanSessionCreateOrConnectWithoutPlanInput | PlanSessionCreateOrConnectWithoutPlanInput[]
    upsert?: PlanSessionUpsertWithWhereUniqueWithoutPlanInput | PlanSessionUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PlanSessionCreateManyPlanInputEnvelope
    set?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    disconnect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    delete?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    connect?: PlanSessionWhereUniqueInput | PlanSessionWhereUniqueInput[]
    update?: PlanSessionUpdateWithWhereUniqueWithoutPlanInput | PlanSessionUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanSessionUpdateManyWithWhereWithoutPlanInput | PlanSessionUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanSessionScalarWhereInput | PlanSessionScalarWhereInput[]
  }

  export type ActivityUncheckedUpdateManyWithoutPlansNestedInput = {
    create?: XOR<ActivityCreateWithoutPlansInput, ActivityUncheckedCreateWithoutPlansInput> | ActivityCreateWithoutPlansInput[] | ActivityUncheckedCreateWithoutPlansInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutPlansInput | ActivityCreateOrConnectWithoutPlansInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutPlansInput | ActivityUpsertWithWhereUniqueWithoutPlansInput[]
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutPlansInput | ActivityUpdateWithWhereUniqueWithoutPlansInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutPlansInput | ActivityUpdateManyWithWhereWithoutPlansInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type PlanInvitationUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanInvitationCreateWithoutPlanInput, PlanInvitationUncheckedCreateWithoutPlanInput> | PlanInvitationCreateWithoutPlanInput[] | PlanInvitationUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanInvitationCreateOrConnectWithoutPlanInput | PlanInvitationCreateOrConnectWithoutPlanInput[]
    upsert?: PlanInvitationUpsertWithWhereUniqueWithoutPlanInput | PlanInvitationUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PlanInvitationCreateManyPlanInputEnvelope
    set?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    disconnect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    delete?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    connect?: PlanInvitationWhereUniqueInput | PlanInvitationWhereUniqueInput[]
    update?: PlanInvitationUpdateWithWhereUniqueWithoutPlanInput | PlanInvitationUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanInvitationUpdateManyWithWhereWithoutPlanInput | PlanInvitationUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanInvitationScalarWhereInput | PlanInvitationScalarWhereInput[]
  }

  export type PlanMilestoneUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanMilestoneCreateWithoutPlanInput, PlanMilestoneUncheckedCreateWithoutPlanInput> | PlanMilestoneCreateWithoutPlanInput[] | PlanMilestoneUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanMilestoneCreateOrConnectWithoutPlanInput | PlanMilestoneCreateOrConnectWithoutPlanInput[]
    upsert?: PlanMilestoneUpsertWithWhereUniqueWithoutPlanInput | PlanMilestoneUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: PlanMilestoneCreateManyPlanInputEnvelope
    set?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
    disconnect?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
    delete?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
    connect?: PlanMilestoneWhereUniqueInput | PlanMilestoneWhereUniqueInput[]
    update?: PlanMilestoneUpdateWithWhereUniqueWithoutPlanInput | PlanMilestoneUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanMilestoneUpdateManyWithWhereWithoutPlanInput | PlanMilestoneUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanMilestoneScalarWhereInput | PlanMilestoneScalarWhereInput[]
  }

  export type PlanCreateNestedOneWithoutSessionsInput = {
    create?: XOR<PlanCreateWithoutSessionsInput, PlanUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutSessionsInput
    connect?: PlanWhereUniqueInput
  }

  export type ActivityCreateNestedOneWithoutPlanSessionsInput = {
    create?: XOR<ActivityCreateWithoutPlanSessionsInput, ActivityUncheckedCreateWithoutPlanSessionsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutPlanSessionsInput
    connect?: ActivityWhereUniqueInput
  }

  export type PlanUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<PlanCreateWithoutSessionsInput, PlanUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutSessionsInput
    upsert?: PlanUpsertWithoutSessionsInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutSessionsInput, PlanUpdateWithoutSessionsInput>, PlanUncheckedUpdateWithoutSessionsInput>
  }

  export type ActivityUpdateOneRequiredWithoutPlanSessionsNestedInput = {
    create?: XOR<ActivityCreateWithoutPlanSessionsInput, ActivityUncheckedCreateWithoutPlanSessionsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutPlanSessionsInput
    upsert?: ActivityUpsertWithoutPlanSessionsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutPlanSessionsInput, ActivityUpdateWithoutPlanSessionsInput>, ActivityUncheckedUpdateWithoutPlanSessionsInput>
  }

  export type PlanCreateNestedOneWithoutMilestonesInput = {
    create?: XOR<PlanCreateWithoutMilestonesInput, PlanUncheckedCreateWithoutMilestonesInput>
    connectOrCreate?: PlanCreateOrConnectWithoutMilestonesInput
    connect?: PlanWhereUniqueInput
  }

  export type PlanUpdateOneRequiredWithoutMilestonesNestedInput = {
    create?: XOR<PlanCreateWithoutMilestonesInput, PlanUncheckedCreateWithoutMilestonesInput>
    connectOrCreate?: PlanCreateOrConnectWithoutMilestonesInput
    upsert?: PlanUpsertWithoutMilestonesInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutMilestonesInput, PlanUpdateWithoutMilestonesInput>, PlanUncheckedUpdateWithoutMilestonesInput>
  }

  export type UserCreateNestedManyWithoutPlanGroupMembershipsInput = {
    create?: XOR<UserCreateWithoutPlanGroupMembershipsInput, UserUncheckedCreateWithoutPlanGroupMembershipsInput> | UserCreateWithoutPlanGroupMembershipsInput[] | UserUncheckedCreateWithoutPlanGroupMembershipsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPlanGroupMembershipsInput | UserCreateOrConnectWithoutPlanGroupMembershipsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PlanCreateNestedManyWithoutPlanGroupInput = {
    create?: XOR<PlanCreateWithoutPlanGroupInput, PlanUncheckedCreateWithoutPlanGroupInput> | PlanCreateWithoutPlanGroupInput[] | PlanUncheckedCreateWithoutPlanGroupInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutPlanGroupInput | PlanCreateOrConnectWithoutPlanGroupInput[]
    createMany?: PlanCreateManyPlanGroupInputEnvelope
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPlanGroupMembershipsInput = {
    create?: XOR<UserCreateWithoutPlanGroupMembershipsInput, UserUncheckedCreateWithoutPlanGroupMembershipsInput> | UserCreateWithoutPlanGroupMembershipsInput[] | UserUncheckedCreateWithoutPlanGroupMembershipsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPlanGroupMembershipsInput | UserCreateOrConnectWithoutPlanGroupMembershipsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PlanUncheckedCreateNestedManyWithoutPlanGroupInput = {
    create?: XOR<PlanCreateWithoutPlanGroupInput, PlanUncheckedCreateWithoutPlanGroupInput> | PlanCreateWithoutPlanGroupInput[] | PlanUncheckedCreateWithoutPlanGroupInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutPlanGroupInput | PlanCreateOrConnectWithoutPlanGroupInput[]
    createMany?: PlanCreateManyPlanGroupInputEnvelope
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutPlanGroupMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutPlanGroupMembershipsInput, UserUncheckedCreateWithoutPlanGroupMembershipsInput> | UserCreateWithoutPlanGroupMembershipsInput[] | UserUncheckedCreateWithoutPlanGroupMembershipsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPlanGroupMembershipsInput | UserCreateOrConnectWithoutPlanGroupMembershipsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPlanGroupMembershipsInput | UserUpsertWithWhereUniqueWithoutPlanGroupMembershipsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPlanGroupMembershipsInput | UserUpdateWithWhereUniqueWithoutPlanGroupMembershipsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPlanGroupMembershipsInput | UserUpdateManyWithWhereWithoutPlanGroupMembershipsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PlanUpdateManyWithoutPlanGroupNestedInput = {
    create?: XOR<PlanCreateWithoutPlanGroupInput, PlanUncheckedCreateWithoutPlanGroupInput> | PlanCreateWithoutPlanGroupInput[] | PlanUncheckedCreateWithoutPlanGroupInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutPlanGroupInput | PlanCreateOrConnectWithoutPlanGroupInput[]
    upsert?: PlanUpsertWithWhereUniqueWithoutPlanGroupInput | PlanUpsertWithWhereUniqueWithoutPlanGroupInput[]
    createMany?: PlanCreateManyPlanGroupInputEnvelope
    set?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    disconnect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    delete?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    update?: PlanUpdateWithWhereUniqueWithoutPlanGroupInput | PlanUpdateWithWhereUniqueWithoutPlanGroupInput[]
    updateMany?: PlanUpdateManyWithWhereWithoutPlanGroupInput | PlanUpdateManyWithWhereWithoutPlanGroupInput[]
    deleteMany?: PlanScalarWhereInput | PlanScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPlanGroupMembershipsNestedInput = {
    create?: XOR<UserCreateWithoutPlanGroupMembershipsInput, UserUncheckedCreateWithoutPlanGroupMembershipsInput> | UserCreateWithoutPlanGroupMembershipsInput[] | UserUncheckedCreateWithoutPlanGroupMembershipsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPlanGroupMembershipsInput | UserCreateOrConnectWithoutPlanGroupMembershipsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPlanGroupMembershipsInput | UserUpsertWithWhereUniqueWithoutPlanGroupMembershipsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPlanGroupMembershipsInput | UserUpdateWithWhereUniqueWithoutPlanGroupMembershipsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPlanGroupMembershipsInput | UserUpdateManyWithWhereWithoutPlanGroupMembershipsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PlanUncheckedUpdateManyWithoutPlanGroupNestedInput = {
    create?: XOR<PlanCreateWithoutPlanGroupInput, PlanUncheckedCreateWithoutPlanGroupInput> | PlanCreateWithoutPlanGroupInput[] | PlanUncheckedCreateWithoutPlanGroupInput[]
    connectOrCreate?: PlanCreateOrConnectWithoutPlanGroupInput | PlanCreateOrConnectWithoutPlanGroupInput[]
    upsert?: PlanUpsertWithWhereUniqueWithoutPlanGroupInput | PlanUpsertWithWhereUniqueWithoutPlanGroupInput[]
    createMany?: PlanCreateManyPlanGroupInputEnvelope
    set?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    disconnect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    delete?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    connect?: PlanWhereUniqueInput | PlanWhereUniqueInput[]
    update?: PlanUpdateWithWhereUniqueWithoutPlanGroupInput | PlanUpdateWithWhereUniqueWithoutPlanGroupInput[]
    updateMany?: PlanUpdateManyWithWhereWithoutPlanGroupInput | PlanUpdateManyWithWhereWithoutPlanGroupInput[]
    deleteMany?: PlanScalarWhereInput | PlanScalarWhereInput[]
  }

  export type PlanCreateNestedOneWithoutInvitationsInput = {
    create?: XOR<PlanCreateWithoutInvitationsInput, PlanUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutInvitationsInput
    connect?: PlanWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPlanInvitationsSentInput = {
    create?: XOR<UserCreateWithoutPlanInvitationsSentInput, UserUncheckedCreateWithoutPlanInvitationsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlanInvitationsSentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPlanInvitationsReceivedInput = {
    create?: XOR<UserCreateWithoutPlanInvitationsReceivedInput, UserUncheckedCreateWithoutPlanInvitationsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlanInvitationsReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type EnumInvitationStatusFieldUpdateOperationsInput = {
    set?: $Enums.InvitationStatus
  }

  export type PlanUpdateOneRequiredWithoutInvitationsNestedInput = {
    create?: XOR<PlanCreateWithoutInvitationsInput, PlanUncheckedCreateWithoutInvitationsInput>
    connectOrCreate?: PlanCreateOrConnectWithoutInvitationsInput
    upsert?: PlanUpsertWithoutInvitationsInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutInvitationsInput, PlanUpdateWithoutInvitationsInput>, PlanUncheckedUpdateWithoutInvitationsInput>
  }

  export type UserUpdateOneRequiredWithoutPlanInvitationsSentNestedInput = {
    create?: XOR<UserCreateWithoutPlanInvitationsSentInput, UserUncheckedCreateWithoutPlanInvitationsSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlanInvitationsSentInput
    upsert?: UserUpsertWithoutPlanInvitationsSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlanInvitationsSentInput, UserUpdateWithoutPlanInvitationsSentInput>, UserUncheckedUpdateWithoutPlanInvitationsSentInput>
  }

  export type UserUpdateOneRequiredWithoutPlanInvitationsReceivedNestedInput = {
    create?: XOR<UserCreateWithoutPlanInvitationsReceivedInput, UserUncheckedCreateWithoutPlanInvitationsReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPlanInvitationsReceivedInput
    upsert?: UserUpsertWithoutPlanInvitationsReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPlanInvitationsReceivedInput, UserUpdateWithoutPlanInvitationsReceivedInput>, UserUncheckedUpdateWithoutPlanInvitationsReceivedInput>
  }

  export type UserCreateNestedOneWithoutMessagesInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type MessageEmotionCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageEmotionCreateWithoutMessageInput, MessageEmotionUncheckedCreateWithoutMessageInput> | MessageEmotionCreateWithoutMessageInput[] | MessageEmotionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageEmotionCreateOrConnectWithoutMessageInput | MessageEmotionCreateOrConnectWithoutMessageInput[]
    createMany?: MessageEmotionCreateManyMessageInputEnvelope
    connect?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
  }

  export type MessageEmotionUncheckedCreateNestedManyWithoutMessageInput = {
    create?: XOR<MessageEmotionCreateWithoutMessageInput, MessageEmotionUncheckedCreateWithoutMessageInput> | MessageEmotionCreateWithoutMessageInput[] | MessageEmotionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageEmotionCreateOrConnectWithoutMessageInput | MessageEmotionCreateOrConnectWithoutMessageInput[]
    createMany?: MessageEmotionCreateManyMessageInputEnvelope
    connect?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
  }

  export type EnumMessageRoleFieldUpdateOperationsInput = {
    set?: $Enums.MessageRole
  }

  export type UserUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesInput
    upsert?: UserUpsertWithoutMessagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesInput, UserUpdateWithoutMessagesInput>, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type MessageEmotionUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageEmotionCreateWithoutMessageInput, MessageEmotionUncheckedCreateWithoutMessageInput> | MessageEmotionCreateWithoutMessageInput[] | MessageEmotionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageEmotionCreateOrConnectWithoutMessageInput | MessageEmotionCreateOrConnectWithoutMessageInput[]
    upsert?: MessageEmotionUpsertWithWhereUniqueWithoutMessageInput | MessageEmotionUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageEmotionCreateManyMessageInputEnvelope
    set?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
    disconnect?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
    delete?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
    connect?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
    update?: MessageEmotionUpdateWithWhereUniqueWithoutMessageInput | MessageEmotionUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageEmotionUpdateManyWithWhereWithoutMessageInput | MessageEmotionUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageEmotionScalarWhereInput | MessageEmotionScalarWhereInput[]
  }

  export type MessageEmotionUncheckedUpdateManyWithoutMessageNestedInput = {
    create?: XOR<MessageEmotionCreateWithoutMessageInput, MessageEmotionUncheckedCreateWithoutMessageInput> | MessageEmotionCreateWithoutMessageInput[] | MessageEmotionUncheckedCreateWithoutMessageInput[]
    connectOrCreate?: MessageEmotionCreateOrConnectWithoutMessageInput | MessageEmotionCreateOrConnectWithoutMessageInput[]
    upsert?: MessageEmotionUpsertWithWhereUniqueWithoutMessageInput | MessageEmotionUpsertWithWhereUniqueWithoutMessageInput[]
    createMany?: MessageEmotionCreateManyMessageInputEnvelope
    set?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
    disconnect?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
    delete?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
    connect?: MessageEmotionWhereUniqueInput | MessageEmotionWhereUniqueInput[]
    update?: MessageEmotionUpdateWithWhereUniqueWithoutMessageInput | MessageEmotionUpdateWithWhereUniqueWithoutMessageInput[]
    updateMany?: MessageEmotionUpdateManyWithWhereWithoutMessageInput | MessageEmotionUpdateManyWithWhereWithoutMessageInput[]
    deleteMany?: MessageEmotionScalarWhereInput | MessageEmotionScalarWhereInput[]
  }

  export type MessageCreateNestedOneWithoutEmotionsInput = {
    create?: XOR<MessageCreateWithoutEmotionsInput, MessageUncheckedCreateWithoutEmotionsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutEmotionsInput
    connect?: MessageWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MessageUpdateOneRequiredWithoutEmotionsNestedInput = {
    create?: XOR<MessageCreateWithoutEmotionsInput, MessageUncheckedCreateWithoutEmotionsInput>
    connectOrCreate?: MessageCreateOrConnectWithoutEmotionsInput
    upsert?: MessageUpsertWithoutEmotionsInput
    connect?: MessageWhereUniqueInput
    update?: XOR<XOR<MessageUpdateToOneWithWhereWithoutEmotionsInput, MessageUpdateWithoutEmotionsInput>, MessageUncheckedUpdateWithoutEmotionsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.NotificationStatus
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutRecommendationsInput = {
    create?: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRecommendationObjectTypeFieldUpdateOperationsInput = {
    set?: $Enums.RecommendationObjectType
  }

  export type UserUpdateOneRequiredWithoutRecommendationsNestedInput = {
    create?: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRecommendationsInput
    upsert?: UserUpsertWithoutRecommendationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRecommendationsInput, UserUpdateWithoutRecommendationsInput>, UserUncheckedUpdateWithoutRecommendationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPlanTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeFilter<$PrismaModel> | $Enums.PlanType
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedEnumThemeColorFilter<$PrismaModel = never> = {
    equals?: $Enums.ThemeColor | EnumThemeColorFieldRefInput<$PrismaModel>
    in?: $Enums.ThemeColor[] | ListEnumThemeColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.ThemeColor[] | ListEnumThemeColorFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeColorFilter<$PrismaModel> | $Enums.ThemeColor
  }

  export type NestedEnumActivityVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityVisibility | EnumActivityVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityVisibilityFilter<$PrismaModel> | $Enums.ActivityVisibility
  }

  export type NestedEnumDailyCheckinTimeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.DailyCheckinTime | EnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DailyCheckinTime[] | ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DailyCheckinTime[] | ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDailyCheckinTimeNullableFilter<$PrismaModel> | $Enums.DailyCheckinTime | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanType | EnumPlanTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanType[] | ListEnumPlanTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlanType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanTypeFilter<$PrismaModel>
    _max?: NestedEnumPlanTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumThemeColorWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ThemeColor | EnumThemeColorFieldRefInput<$PrismaModel>
    in?: $Enums.ThemeColor[] | ListEnumThemeColorFieldRefInput<$PrismaModel>
    notIn?: $Enums.ThemeColor[] | ListEnumThemeColorFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeColorWithAggregatesFilter<$PrismaModel> | $Enums.ThemeColor
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeColorFilter<$PrismaModel>
    _max?: NestedEnumThemeColorFilter<$PrismaModel>
  }

  export type NestedEnumActivityVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityVisibility | EnumActivityVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumActivityVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.ActivityVisibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumActivityVisibilityFilter<$PrismaModel>
    _max?: NestedEnumActivityVisibilityFilter<$PrismaModel>
  }

  export type NestedEnumDailyCheckinTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DailyCheckinTime | EnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    in?: $Enums.DailyCheckinTime[] | ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.DailyCheckinTime[] | ListEnumDailyCheckinTimeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDailyCheckinTimeNullableWithAggregatesFilter<$PrismaModel> | $Enums.DailyCheckinTime | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDailyCheckinTimeNullableFilter<$PrismaModel>
    _max?: NestedEnumDailyCheckinTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumConnectionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ConnectionStatus | EnumConnectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConnectionStatus[] | ListEnumConnectionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConnectionStatus[] | ListEnumConnectionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConnectionStatusFilter<$PrismaModel> | $Enums.ConnectionStatus
  }

  export type NestedEnumConnectionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConnectionStatus | EnumConnectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ConnectionStatus[] | ListEnumConnectionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConnectionStatus[] | ListEnumConnectionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumConnectionStatusWithAggregatesFilter<$PrismaModel> | $Enums.ConnectionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConnectionStatusFilter<$PrismaModel>
    _max?: NestedEnumConnectionStatusFilter<$PrismaModel>
  }

  export type NestedEnumActivityVisibilityNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityVisibility | EnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumActivityVisibilityNullableFilter<$PrismaModel> | $Enums.ActivityVisibility | null
  }

  export type NestedEnumActivityVisibilityNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ActivityVisibility | EnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    in?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.ActivityVisibility[] | ListEnumActivityVisibilityFieldRefInput<$PrismaModel> | null
    not?: NestedEnumActivityVisibilityNullableWithAggregatesFilter<$PrismaModel> | $Enums.ActivityVisibility | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumActivityVisibilityNullableFilter<$PrismaModel>
    _max?: NestedEnumActivityVisibilityNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumPlanDurationTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanDurationType | EnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PlanDurationType[] | ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PlanDurationType[] | ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPlanDurationTypeNullableFilter<$PrismaModel> | $Enums.PlanDurationType | null
  }

  export type NestedEnumPlanOutlineTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanOutlineType | EnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanOutlineType[] | ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanOutlineType[] | ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanOutlineTypeFilter<$PrismaModel> | $Enums.PlanOutlineType
  }

  export type NestedEnumPlanStateFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanState | EnumPlanStateFieldRefInput<$PrismaModel>
    in?: $Enums.PlanState[] | ListEnumPlanStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanState[] | ListEnumPlanStateFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanStateFilter<$PrismaModel> | $Enums.PlanState
  }

  export type NestedEnumPlanDurationTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanDurationType | EnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.PlanDurationType[] | ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PlanDurationType[] | ListEnumPlanDurationTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPlanDurationTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.PlanDurationType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPlanDurationTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumPlanDurationTypeNullableFilter<$PrismaModel>
  }

  export type NestedEnumPlanOutlineTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanOutlineType | EnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PlanOutlineType[] | ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanOutlineType[] | ListEnumPlanOutlineTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanOutlineTypeWithAggregatesFilter<$PrismaModel> | $Enums.PlanOutlineType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanOutlineTypeFilter<$PrismaModel>
    _max?: NestedEnumPlanOutlineTypeFilter<$PrismaModel>
  }

  export type NestedEnumPlanStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PlanState | EnumPlanStateFieldRefInput<$PrismaModel>
    in?: $Enums.PlanState[] | ListEnumPlanStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.PlanState[] | ListEnumPlanStateFieldRefInput<$PrismaModel>
    not?: NestedEnumPlanStateWithAggregatesFilter<$PrismaModel> | $Enums.PlanState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlanStateFilter<$PrismaModel>
    _max?: NestedEnumPlanStateFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumInvitationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusFilter<$PrismaModel> | $Enums.InvitationStatus
  }

  export type NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InvitationStatus | EnumInvitationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.InvitationStatus[] | ListEnumInvitationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumInvitationStatusWithAggregatesFilter<$PrismaModel> | $Enums.InvitationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumInvitationStatusFilter<$PrismaModel>
    _max?: NestedEnumInvitationStatusFilter<$PrismaModel>
  }

  export type NestedEnumMessageRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageRole | EnumMessageRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MessageRole[] | ListEnumMessageRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageRole[] | ListEnumMessageRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageRoleFilter<$PrismaModel> | $Enums.MessageRole
  }

  export type NestedEnumMessageRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MessageRole | EnumMessageRoleFieldRefInput<$PrismaModel>
    in?: $Enums.MessageRole[] | ListEnumMessageRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.MessageRole[] | ListEnumMessageRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumMessageRoleWithAggregatesFilter<$PrismaModel> | $Enums.MessageRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMessageRoleFilter<$PrismaModel>
    _max?: NestedEnumMessageRoleFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumNotificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusFilter<$PrismaModel> | $Enums.NotificationStatus
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationStatus | EnumNotificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationStatus[] | ListEnumNotificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.NotificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationStatusFilter<$PrismaModel>
    _max?: NestedEnumNotificationStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumRecommendationObjectTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationObjectType | EnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationObjectType[] | ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RecommendationObjectType[] | ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRecommendationObjectTypeFilter<$PrismaModel> | $Enums.RecommendationObjectType
  }

  export type NestedEnumRecommendationObjectTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RecommendationObjectType | EnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RecommendationObjectType[] | ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RecommendationObjectType[] | ListEnumRecommendationObjectTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRecommendationObjectTypeWithAggregatesFilter<$PrismaModel> | $Enums.RecommendationObjectType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRecommendationObjectTypeFilter<$PrismaModel>
    _max?: NestedEnumRecommendationObjectTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ActivityCreateWithoutUserInput = {
    id?: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    entries?: ActivityEntryCreateNestedManyWithoutActivityInput
    planSessions?: PlanSessionCreateNestedManyWithoutActivityInput
    plans?: PlanCreateNestedManyWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    entries?: ActivityEntryUncheckedCreateNestedManyWithoutActivityInput
    planSessions?: PlanSessionUncheckedCreateNestedManyWithoutActivityInput
    plans?: PlanUncheckedCreateNestedManyWithoutActivitiesInput
  }

  export type ActivityCreateOrConnectWithoutUserInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityCreateManyUserInputEnvelope = {
    data: ActivityCreateManyUserInput | ActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityEntryCreateWithoutUserInput = {
    id?: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    activity: ActivityCreateNestedOneWithoutEntriesInput
    reactions?: ReactionCreateNestedManyWithoutActivityEntryInput
    comments?: CommentCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryUncheckedCreateWithoutUserInput = {
    id?: string
    activityId: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    reactions?: ReactionUncheckedCreateNestedManyWithoutActivityEntryInput
    comments?: CommentUncheckedCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryCreateOrConnectWithoutUserInput = {
    where: ActivityEntryWhereUniqueInput
    create: XOR<ActivityEntryCreateWithoutUserInput, ActivityEntryUncheckedCreateWithoutUserInput>
  }

  export type ActivityEntryCreateManyUserInputEnvelope = {
    data: ActivityEntryCreateManyUserInput | ActivityEntryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MetricCreateWithoutUserInput = {
    id?: string
    title: string
    emoji: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: MetricEntryCreateNestedManyWithoutMetricInput
  }

  export type MetricUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    emoji: string
    createdAt?: Date | string
    updatedAt?: Date | string
    entries?: MetricEntryUncheckedCreateNestedManyWithoutMetricInput
  }

  export type MetricCreateOrConnectWithoutUserInput = {
    where: MetricWhereUniqueInput
    create: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput>
  }

  export type MetricCreateManyUserInputEnvelope = {
    data: MetricCreateManyUserInput | MetricCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MetricEntryCreateWithoutUserInput = {
    id?: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
    metric: MetricCreateNestedOneWithoutEntriesInput
  }

  export type MetricEntryUncheckedCreateWithoutUserInput = {
    id?: string
    metricId: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
  }

  export type MetricEntryCreateOrConnectWithoutUserInput = {
    where: MetricEntryWhereUniqueInput
    create: XOR<MetricEntryCreateWithoutUserInput, MetricEntryUncheckedCreateWithoutUserInput>
  }

  export type MetricEntryCreateManyUserInputEnvelope = {
    data: MetricEntryCreateManyUserInput | MetricEntryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlanCreateWithoutUserInput = {
    id?: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    planGroup?: PlanGroupCreateNestedOneWithoutPlansInput
    sessions?: PlanSessionCreateNestedManyWithoutPlanInput
    activities?: ActivityCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutUserInput = {
    id?: string
    planGroupId?: string | null
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    sessions?: PlanSessionUncheckedCreateNestedManyWithoutPlanInput
    activities?: ActivityUncheckedCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationUncheckedCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutUserInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput>
  }

  export type PlanCreateManyUserInputEnvelope = {
    data: PlanCreateManyUserInput | PlanCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutUserInput = {
    id?: string
    role: $Enums.MessageRole
    content: string
    createdAt?: Date | string
    emotions?: MessageEmotionCreateNestedManyWithoutMessageInput
  }

  export type MessageUncheckedCreateWithoutUserInput = {
    id?: string
    role: $Enums.MessageRole
    content: string
    createdAt?: Date | string
    emotions?: MessageEmotionUncheckedCreateNestedManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutUserInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageCreateManyUserInputEnvelope = {
    data: MessageCreateManyUserInput | MessageCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    message: string
    createdAt?: Date | string
    sentAt?: Date | string | null
    processedAt?: Date | string | null
    openedAt?: Date | string | null
    concludedAt?: Date | string | null
    promptTag?: string | null
    status?: $Enums.NotificationStatus
    type?: $Enums.NotificationType
    relatedId?: string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    createdAt?: Date | string
    sentAt?: Date | string | null
    processedAt?: Date | string | null
    openedAt?: Date | string | null
    concludedAt?: Date | string | null
    promptTag?: string | null
    status?: $Enums.NotificationStatus
    type?: $Enums.NotificationType
    relatedId?: string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PlanInvitationCreateWithoutSenderInput = {
    id?: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    plan: PlanCreateNestedOneWithoutInvitationsInput
    recipient: UserCreateNestedOneWithoutPlanInvitationsReceivedInput
  }

  export type PlanInvitationUncheckedCreateWithoutSenderInput = {
    id?: string
    planId: string
    recipientId: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PlanInvitationCreateOrConnectWithoutSenderInput = {
    where: PlanInvitationWhereUniqueInput
    create: XOR<PlanInvitationCreateWithoutSenderInput, PlanInvitationUncheckedCreateWithoutSenderInput>
  }

  export type PlanInvitationCreateManySenderInputEnvelope = {
    data: PlanInvitationCreateManySenderInput | PlanInvitationCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type PlanInvitationCreateWithoutRecipientInput = {
    id?: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    plan: PlanCreateNestedOneWithoutInvitationsInput
    sender: UserCreateNestedOneWithoutPlanInvitationsSentInput
  }

  export type PlanInvitationUncheckedCreateWithoutRecipientInput = {
    id?: string
    planId: string
    senderId: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PlanInvitationCreateOrConnectWithoutRecipientInput = {
    where: PlanInvitationWhereUniqueInput
    create: XOR<PlanInvitationCreateWithoutRecipientInput, PlanInvitationUncheckedCreateWithoutRecipientInput>
  }

  export type PlanInvitationCreateManyRecipientInputEnvelope = {
    data: PlanInvitationCreateManyRecipientInput | PlanInvitationCreateManyRecipientInput[]
    skipDuplicates?: boolean
  }

  export type PlanGroupCreateWithoutMembersInput = {
    id?: string
    createdAt?: Date | string
    plans?: PlanCreateNestedManyWithoutPlanGroupInput
  }

  export type PlanGroupUncheckedCreateWithoutMembersInput = {
    id?: string
    createdAt?: Date | string
    plans?: PlanUncheckedCreateNestedManyWithoutPlanGroupInput
  }

  export type PlanGroupCreateOrConnectWithoutMembersInput = {
    where: PlanGroupWhereUniqueInput
    create: XOR<PlanGroupCreateWithoutMembersInput, PlanGroupUncheckedCreateWithoutMembersInput>
  }

  export type RecommendationCreateWithoutUserInput = {
    id?: string
    recommendationObjectType?: $Enums.RecommendationObjectType
    recommendationObjectId: string
    score: number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationUncheckedCreateWithoutUserInput = {
    id?: string
    recommendationObjectType?: $Enums.RecommendationObjectType
    recommendationObjectId: string
    score: number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RecommendationCreateOrConnectWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    create: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput>
  }

  export type RecommendationCreateManyUserInputEnvelope = {
    data: RecommendationCreateManyUserInput | RecommendationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReactionCreateWithoutUserInput = {
    id?: string
    emoji: string
    createdAt?: Date | string
    activityEntry: ActivityEntryCreateNestedOneWithoutReactionsInput
  }

  export type ReactionUncheckedCreateWithoutUserInput = {
    id?: string
    activityEntryId: string
    emoji: string
    createdAt?: Date | string
  }

  export type ReactionCreateOrConnectWithoutUserInput = {
    where: ReactionWhereUniqueInput
    create: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput>
  }

  export type ReactionCreateManyUserInputEnvelope = {
    data: ReactionCreateManyUserInput | ReactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ConnectionCreateWithoutFromInput = {
    id?: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    to: UserCreateNestedOneWithoutConnectionsToInput
  }

  export type ConnectionUncheckedCreateWithoutFromInput = {
    id?: string
    toId: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ConnectionCreateOrConnectWithoutFromInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutFromInput, ConnectionUncheckedCreateWithoutFromInput>
  }

  export type ConnectionCreateManyFromInputEnvelope = {
    data: ConnectionCreateManyFromInput | ConnectionCreateManyFromInput[]
    skipDuplicates?: boolean
  }

  export type ConnectionCreateWithoutToInput = {
    id?: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
    from: UserCreateNestedOneWithoutConnectionsFromInput
  }

  export type ConnectionUncheckedCreateWithoutToInput = {
    id?: string
    fromId: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ConnectionCreateOrConnectWithoutToInput = {
    where: ConnectionWhereUniqueInput
    create: XOR<ConnectionCreateWithoutToInput, ConnectionUncheckedCreateWithoutToInput>
  }

  export type ConnectionCreateManyToInputEnvelope = {
    data: ConnectionCreateManyToInput | ConnectionCreateManyToInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutReferredByInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
  }

  export type UserUncheckedCreateWithoutReferredByInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutReferredByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferredByInput, UserUncheckedCreateWithoutReferredByInput>
  }

  export type UserCreateManyReferredByInputEnvelope = {
    data: UserCreateManyReferredByInput | UserCreateManyReferredByInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutReferredUsersInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutReferredUsersInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
  }

  export type UserCreateOrConnectWithoutReferredUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReferredUsersInput, UserUncheckedCreateWithoutReferredUsersInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityCreateWithoutUserInput, ActivityUncheckedCreateWithoutUserInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutUserInput, ActivityUncheckedUpdateWithoutUserInput>
  }

  export type ActivityUpdateManyWithWhereWithoutUserInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    id?: StringFilter<"Activity"> | string
    userId?: StringFilter<"Activity"> | string
    title?: StringFilter<"Activity"> | string
    measure?: StringFilter<"Activity"> | string
    emoji?: StringFilter<"Activity"> | string
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    privacySettings?: EnumActivityVisibilityNullableFilter<"Activity"> | $Enums.ActivityVisibility | null
    colorHex?: StringNullableFilter<"Activity"> | string | null
    deletedAt?: DateTimeNullableFilter<"Activity"> | Date | string | null
  }

  export type ActivityEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: ActivityEntryWhereUniqueInput
    update: XOR<ActivityEntryUpdateWithoutUserInput, ActivityEntryUncheckedUpdateWithoutUserInput>
    create: XOR<ActivityEntryCreateWithoutUserInput, ActivityEntryUncheckedCreateWithoutUserInput>
  }

  export type ActivityEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: ActivityEntryWhereUniqueInput
    data: XOR<ActivityEntryUpdateWithoutUserInput, ActivityEntryUncheckedUpdateWithoutUserInput>
  }

  export type ActivityEntryUpdateManyWithWhereWithoutUserInput = {
    where: ActivityEntryScalarWhereInput
    data: XOR<ActivityEntryUpdateManyMutationInput, ActivityEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type ActivityEntryScalarWhereInput = {
    AND?: ActivityEntryScalarWhereInput | ActivityEntryScalarWhereInput[]
    OR?: ActivityEntryScalarWhereInput[]
    NOT?: ActivityEntryScalarWhereInput | ActivityEntryScalarWhereInput[]
    id?: StringFilter<"ActivityEntry"> | string
    activityId?: StringFilter<"ActivityEntry"> | string
    userId?: StringFilter<"ActivityEntry"> | string
    quantity?: IntFilter<"ActivityEntry"> | number
    date?: DateTimeFilter<"ActivityEntry"> | Date | string
    createdAt?: DateTimeFilter<"ActivityEntry"> | Date | string
    description?: StringNullableFilter<"ActivityEntry"> | string | null
    deletedAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    timezone?: StringNullableFilter<"ActivityEntry"> | string | null
    imageS3Path?: StringNullableFilter<"ActivityEntry"> | string | null
    imageUrl?: StringNullableFilter<"ActivityEntry"> | string | null
    imageExpiresAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    imageCreatedAt?: DateTimeNullableFilter<"ActivityEntry"> | Date | string | null
    imageIsPublic?: BoolFilter<"ActivityEntry"> | boolean
  }

  export type MetricUpsertWithWhereUniqueWithoutUserInput = {
    where: MetricWhereUniqueInput
    update: XOR<MetricUpdateWithoutUserInput, MetricUncheckedUpdateWithoutUserInput>
    create: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput>
  }

  export type MetricUpdateWithWhereUniqueWithoutUserInput = {
    where: MetricWhereUniqueInput
    data: XOR<MetricUpdateWithoutUserInput, MetricUncheckedUpdateWithoutUserInput>
  }

  export type MetricUpdateManyWithWhereWithoutUserInput = {
    where: MetricScalarWhereInput
    data: XOR<MetricUpdateManyMutationInput, MetricUncheckedUpdateManyWithoutUserInput>
  }

  export type MetricScalarWhereInput = {
    AND?: MetricScalarWhereInput | MetricScalarWhereInput[]
    OR?: MetricScalarWhereInput[]
    NOT?: MetricScalarWhereInput | MetricScalarWhereInput[]
    id?: StringFilter<"Metric"> | string
    userId?: StringFilter<"Metric"> | string
    title?: StringFilter<"Metric"> | string
    emoji?: StringFilter<"Metric"> | string
    createdAt?: DateTimeFilter<"Metric"> | Date | string
    updatedAt?: DateTimeFilter<"Metric"> | Date | string
  }

  export type MetricEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: MetricEntryWhereUniqueInput
    update: XOR<MetricEntryUpdateWithoutUserInput, MetricEntryUncheckedUpdateWithoutUserInput>
    create: XOR<MetricEntryCreateWithoutUserInput, MetricEntryUncheckedCreateWithoutUserInput>
  }

  export type MetricEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: MetricEntryWhereUniqueInput
    data: XOR<MetricEntryUpdateWithoutUserInput, MetricEntryUncheckedUpdateWithoutUserInput>
  }

  export type MetricEntryUpdateManyWithWhereWithoutUserInput = {
    where: MetricEntryScalarWhereInput
    data: XOR<MetricEntryUpdateManyMutationInput, MetricEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type MetricEntryScalarWhereInput = {
    AND?: MetricEntryScalarWhereInput | MetricEntryScalarWhereInput[]
    OR?: MetricEntryScalarWhereInput[]
    NOT?: MetricEntryScalarWhereInput | MetricEntryScalarWhereInput[]
    id?: StringFilter<"MetricEntry"> | string
    userId?: StringFilter<"MetricEntry"> | string
    metricId?: StringFilter<"MetricEntry"> | string
    rating?: IntFilter<"MetricEntry"> | number
    date?: DateTimeFilter<"MetricEntry"> | Date | string
    createdAt?: DateTimeFilter<"MetricEntry"> | Date | string
    updatedAt?: DateTimeFilter<"MetricEntry"> | Date | string
    description?: StringNullableFilter<"MetricEntry"> | string | null
    skipped?: BoolFilter<"MetricEntry"> | boolean
    descriptionSkipped?: BoolFilter<"MetricEntry"> | boolean
  }

  export type PlanUpsertWithWhereUniqueWithoutUserInput = {
    where: PlanWhereUniqueInput
    update: XOR<PlanUpdateWithoutUserInput, PlanUncheckedUpdateWithoutUserInput>
    create: XOR<PlanCreateWithoutUserInput, PlanUncheckedCreateWithoutUserInput>
  }

  export type PlanUpdateWithWhereUniqueWithoutUserInput = {
    where: PlanWhereUniqueInput
    data: XOR<PlanUpdateWithoutUserInput, PlanUncheckedUpdateWithoutUserInput>
  }

  export type PlanUpdateManyWithWhereWithoutUserInput = {
    where: PlanScalarWhereInput
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyWithoutUserInput>
  }

  export type PlanScalarWhereInput = {
    AND?: PlanScalarWhereInput | PlanScalarWhereInput[]
    OR?: PlanScalarWhereInput[]
    NOT?: PlanScalarWhereInput | PlanScalarWhereInput[]
    id?: StringFilter<"Plan"> | string
    userId?: StringFilter<"Plan"> | string
    planGroupId?: StringNullableFilter<"Plan"> | string | null
    goal?: StringFilter<"Plan"> | string
    emoji?: StringNullableFilter<"Plan"> | string | null
    finishingDate?: DateTimeNullableFilter<"Plan"> | Date | string | null
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
    durationType?: EnumPlanDurationTypeNullableFilter<"Plan"> | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFilter<"Plan"> | $Enums.PlanOutlineType
    timesPerWeek?: IntNullableFilter<"Plan"> | number | null
    coachSuggestedTimesPerWeek?: IntNullableFilter<"Plan"> | number | null
    notes?: StringNullableFilter<"Plan"> | string | null
    coachNotes?: StringNullableFilter<"Plan"> | string | null
    suggestedByCoachAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
    sortOrder?: IntNullableFilter<"Plan"> | number | null
    currentWeekState?: EnumPlanStateFilter<"Plan"> | $Enums.PlanState
    currentWeekStateCalculatedAt?: DateTimeNullableFilter<"Plan"> | Date | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
    create: XOR<MessageCreateWithoutUserInput, MessageUncheckedCreateWithoutUserInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutUserInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutUserInput, MessageUncheckedUpdateWithoutUserInput>
  }

  export type MessageUpdateManyWithWhereWithoutUserInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutUserInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    userId?: StringFilter<"Message"> | string
    role?: EnumMessageRoleFilter<"Message"> | $Enums.MessageRole
    content?: StringFilter<"Message"> | string
    createdAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    processedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    openedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    concludedAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    promptTag?: StringNullableFilter<"Notification"> | string | null
    status?: EnumNotificationStatusFilter<"Notification"> | $Enums.NotificationStatus
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    relatedId?: StringNullableFilter<"Notification"> | string | null
    relatedData?: JsonNullableFilter<"Notification">
  }

  export type PlanInvitationUpsertWithWhereUniqueWithoutSenderInput = {
    where: PlanInvitationWhereUniqueInput
    update: XOR<PlanInvitationUpdateWithoutSenderInput, PlanInvitationUncheckedUpdateWithoutSenderInput>
    create: XOR<PlanInvitationCreateWithoutSenderInput, PlanInvitationUncheckedCreateWithoutSenderInput>
  }

  export type PlanInvitationUpdateWithWhereUniqueWithoutSenderInput = {
    where: PlanInvitationWhereUniqueInput
    data: XOR<PlanInvitationUpdateWithoutSenderInput, PlanInvitationUncheckedUpdateWithoutSenderInput>
  }

  export type PlanInvitationUpdateManyWithWhereWithoutSenderInput = {
    where: PlanInvitationScalarWhereInput
    data: XOR<PlanInvitationUpdateManyMutationInput, PlanInvitationUncheckedUpdateManyWithoutSenderInput>
  }

  export type PlanInvitationScalarWhereInput = {
    AND?: PlanInvitationScalarWhereInput | PlanInvitationScalarWhereInput[]
    OR?: PlanInvitationScalarWhereInput[]
    NOT?: PlanInvitationScalarWhereInput | PlanInvitationScalarWhereInput[]
    id?: StringFilter<"PlanInvitation"> | string
    planId?: StringFilter<"PlanInvitation"> | string
    senderId?: StringFilter<"PlanInvitation"> | string
    recipientId?: StringFilter<"PlanInvitation"> | string
    status?: EnumInvitationStatusFilter<"PlanInvitation"> | $Enums.InvitationStatus
    createdAt?: DateTimeFilter<"PlanInvitation"> | Date | string
    updatedAt?: DateTimeNullableFilter<"PlanInvitation"> | Date | string | null
  }

  export type PlanInvitationUpsertWithWhereUniqueWithoutRecipientInput = {
    where: PlanInvitationWhereUniqueInput
    update: XOR<PlanInvitationUpdateWithoutRecipientInput, PlanInvitationUncheckedUpdateWithoutRecipientInput>
    create: XOR<PlanInvitationCreateWithoutRecipientInput, PlanInvitationUncheckedCreateWithoutRecipientInput>
  }

  export type PlanInvitationUpdateWithWhereUniqueWithoutRecipientInput = {
    where: PlanInvitationWhereUniqueInput
    data: XOR<PlanInvitationUpdateWithoutRecipientInput, PlanInvitationUncheckedUpdateWithoutRecipientInput>
  }

  export type PlanInvitationUpdateManyWithWhereWithoutRecipientInput = {
    where: PlanInvitationScalarWhereInput
    data: XOR<PlanInvitationUpdateManyMutationInput, PlanInvitationUncheckedUpdateManyWithoutRecipientInput>
  }

  export type PlanGroupUpsertWithWhereUniqueWithoutMembersInput = {
    where: PlanGroupWhereUniqueInput
    update: XOR<PlanGroupUpdateWithoutMembersInput, PlanGroupUncheckedUpdateWithoutMembersInput>
    create: XOR<PlanGroupCreateWithoutMembersInput, PlanGroupUncheckedCreateWithoutMembersInput>
  }

  export type PlanGroupUpdateWithWhereUniqueWithoutMembersInput = {
    where: PlanGroupWhereUniqueInput
    data: XOR<PlanGroupUpdateWithoutMembersInput, PlanGroupUncheckedUpdateWithoutMembersInput>
  }

  export type PlanGroupUpdateManyWithWhereWithoutMembersInput = {
    where: PlanGroupScalarWhereInput
    data: XOR<PlanGroupUpdateManyMutationInput, PlanGroupUncheckedUpdateManyWithoutMembersInput>
  }

  export type PlanGroupScalarWhereInput = {
    AND?: PlanGroupScalarWhereInput | PlanGroupScalarWhereInput[]
    OR?: PlanGroupScalarWhereInput[]
    NOT?: PlanGroupScalarWhereInput | PlanGroupScalarWhereInput[]
    id?: StringFilter<"PlanGroup"> | string
    createdAt?: DateTimeFilter<"PlanGroup"> | Date | string
  }

  export type RecommendationUpsertWithWhereUniqueWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    update: XOR<RecommendationUpdateWithoutUserInput, RecommendationUncheckedUpdateWithoutUserInput>
    create: XOR<RecommendationCreateWithoutUserInput, RecommendationUncheckedCreateWithoutUserInput>
  }

  export type RecommendationUpdateWithWhereUniqueWithoutUserInput = {
    where: RecommendationWhereUniqueInput
    data: XOR<RecommendationUpdateWithoutUserInput, RecommendationUncheckedUpdateWithoutUserInput>
  }

  export type RecommendationUpdateManyWithWhereWithoutUserInput = {
    where: RecommendationScalarWhereInput
    data: XOR<RecommendationUpdateManyMutationInput, RecommendationUncheckedUpdateManyWithoutUserInput>
  }

  export type RecommendationScalarWhereInput = {
    AND?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    OR?: RecommendationScalarWhereInput[]
    NOT?: RecommendationScalarWhereInput | RecommendationScalarWhereInput[]
    id?: StringFilter<"Recommendation"> | string
    userId?: StringFilter<"Recommendation"> | string
    recommendationObjectType?: EnumRecommendationObjectTypeFilter<"Recommendation"> | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFilter<"Recommendation"> | string
    score?: FloatFilter<"Recommendation"> | number
    metadata?: JsonFilter<"Recommendation">
    createdAt?: DateTimeFilter<"Recommendation"> | Date | string
    updatedAt?: DateTimeFilter<"Recommendation"> | Date | string
  }

  export type ReactionUpsertWithWhereUniqueWithoutUserInput = {
    where: ReactionWhereUniqueInput
    update: XOR<ReactionUpdateWithoutUserInput, ReactionUncheckedUpdateWithoutUserInput>
    create: XOR<ReactionCreateWithoutUserInput, ReactionUncheckedCreateWithoutUserInput>
  }

  export type ReactionUpdateWithWhereUniqueWithoutUserInput = {
    where: ReactionWhereUniqueInput
    data: XOR<ReactionUpdateWithoutUserInput, ReactionUncheckedUpdateWithoutUserInput>
  }

  export type ReactionUpdateManyWithWhereWithoutUserInput = {
    where: ReactionScalarWhereInput
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyWithoutUserInput>
  }

  export type ReactionScalarWhereInput = {
    AND?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
    OR?: ReactionScalarWhereInput[]
    NOT?: ReactionScalarWhereInput | ReactionScalarWhereInput[]
    id?: StringFilter<"Reaction"> | string
    activityEntryId?: StringFilter<"Reaction"> | string
    userId?: StringFilter<"Reaction"> | string
    emoji?: StringFilter<"Reaction"> | string
    createdAt?: DateTimeFilter<"Reaction"> | Date | string
  }

  export type ConnectionUpsertWithWhereUniqueWithoutFromInput = {
    where: ConnectionWhereUniqueInput
    update: XOR<ConnectionUpdateWithoutFromInput, ConnectionUncheckedUpdateWithoutFromInput>
    create: XOR<ConnectionCreateWithoutFromInput, ConnectionUncheckedCreateWithoutFromInput>
  }

  export type ConnectionUpdateWithWhereUniqueWithoutFromInput = {
    where: ConnectionWhereUniqueInput
    data: XOR<ConnectionUpdateWithoutFromInput, ConnectionUncheckedUpdateWithoutFromInput>
  }

  export type ConnectionUpdateManyWithWhereWithoutFromInput = {
    where: ConnectionScalarWhereInput
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyWithoutFromInput>
  }

  export type ConnectionScalarWhereInput = {
    AND?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
    OR?: ConnectionScalarWhereInput[]
    NOT?: ConnectionScalarWhereInput | ConnectionScalarWhereInput[]
    id?: StringFilter<"Connection"> | string
    fromId?: StringFilter<"Connection"> | string
    toId?: StringFilter<"Connection"> | string
    status?: EnumConnectionStatusFilter<"Connection"> | $Enums.ConnectionStatus
    message?: StringNullableFilter<"Connection"> | string | null
    createdAt?: DateTimeFilter<"Connection"> | Date | string
    updatedAt?: DateTimeNullableFilter<"Connection"> | Date | string | null
  }

  export type ConnectionUpsertWithWhereUniqueWithoutToInput = {
    where: ConnectionWhereUniqueInput
    update: XOR<ConnectionUpdateWithoutToInput, ConnectionUncheckedUpdateWithoutToInput>
    create: XOR<ConnectionCreateWithoutToInput, ConnectionUncheckedCreateWithoutToInput>
  }

  export type ConnectionUpdateWithWhereUniqueWithoutToInput = {
    where: ConnectionWhereUniqueInput
    data: XOR<ConnectionUpdateWithoutToInput, ConnectionUncheckedUpdateWithoutToInput>
  }

  export type ConnectionUpdateManyWithWhereWithoutToInput = {
    where: ConnectionScalarWhereInput
    data: XOR<ConnectionUpdateManyMutationInput, ConnectionUncheckedUpdateManyWithoutToInput>
  }

  export type UserUpsertWithWhereUniqueWithoutReferredByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutReferredByInput, UserUncheckedUpdateWithoutReferredByInput>
    create: XOR<UserCreateWithoutReferredByInput, UserUncheckedCreateWithoutReferredByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutReferredByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutReferredByInput, UserUncheckedUpdateWithoutReferredByInput>
  }

  export type UserUpdateManyWithWhereWithoutReferredByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutReferredByInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    profile?: StringNullableFilter<"User"> | string | null
    picture?: StringNullableFilter<"User"> | string | null
    age?: IntNullableFilter<"User"> | number | null
    username?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    clerkId?: StringNullableFilter<"User"> | string | null
    language?: StringNullableFilter<"User"> | string | null
    planType?: EnumPlanTypeFilter<"User"> | $Enums.PlanType
    lastActiveAt?: DateTimeNullableFilter<"User"> | Date | string | null
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    isPwaInstalled?: BoolFilter<"User"> | boolean
    isPwaNotificationsEnabled?: BoolFilter<"User"> | boolean
    lookingForAp?: BoolNullableFilter<"User"> | boolean | null
    pwaSubscriptionEndpoint?: StringNullableFilter<"User"> | string | null
    pwaSubscriptionKey?: StringNullableFilter<"User"> | string | null
    pwaSubscriptionAuthToken?: StringNullableFilter<"User"> | string | null
    unactivatedEmailSentAt?: DateTimeNullableFilter<"User"> | Date | string | null
    themeBaseColor?: EnumThemeColorFilter<"User"> | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFilter<"User"> | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFilter<"User"> | boolean
    recommendationsLastCalculatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    dailyCheckinDays?: StringNullableListFilter<"User">
    dailyCheckinTime?: EnumDailyCheckinTimeNullableFilter<"User"> | $Enums.DailyCheckinTime | null
    stripeCustomerId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionId?: StringNullableFilter<"User"> | string | null
    stripeSubscriptionStatus?: StringNullableFilter<"User"> | string | null
    referredById?: StringNullableFilter<"User"> | string | null
  }

  export type UserUpsertWithoutReferredUsersInput = {
    update: XOR<UserUpdateWithoutReferredUsersInput, UserUncheckedUpdateWithoutReferredUsersInput>
    create: XOR<UserCreateWithoutReferredUsersInput, UserUncheckedCreateWithoutReferredUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReferredUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReferredUsersInput, UserUncheckedUpdateWithoutReferredUsersInput>
  }

  export type UserUpdateWithoutReferredUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReferredUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
  }

  export type UserCreateWithoutConnectionsFromInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutConnectionsFromInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutConnectionsFromInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConnectionsFromInput, UserUncheckedCreateWithoutConnectionsFromInput>
  }

  export type UserCreateWithoutConnectionsToInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutConnectionsToInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutConnectionsToInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConnectionsToInput, UserUncheckedCreateWithoutConnectionsToInput>
  }

  export type UserUpsertWithoutConnectionsFromInput = {
    update: XOR<UserUpdateWithoutConnectionsFromInput, UserUncheckedUpdateWithoutConnectionsFromInput>
    create: XOR<UserCreateWithoutConnectionsFromInput, UserUncheckedCreateWithoutConnectionsFromInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConnectionsFromInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConnectionsFromInput, UserUncheckedUpdateWithoutConnectionsFromInput>
  }

  export type UserUpdateWithoutConnectionsFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutConnectionsFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type UserUpsertWithoutConnectionsToInput = {
    update: XOR<UserUpdateWithoutConnectionsToInput, UserUncheckedUpdateWithoutConnectionsToInput>
    create: XOR<UserCreateWithoutConnectionsToInput, UserUncheckedCreateWithoutConnectionsToInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConnectionsToInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConnectionsToInput, UserUncheckedUpdateWithoutConnectionsToInput>
  }

  export type UserUpdateWithoutConnectionsToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutConnectionsToInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type UserCreateWithoutActivitiesInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type ActivityEntryCreateWithoutActivityInput = {
    id?: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    user: UserCreateNestedOneWithoutActivityEntriesInput
    reactions?: ReactionCreateNestedManyWithoutActivityEntryInput
    comments?: CommentCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryUncheckedCreateWithoutActivityInput = {
    id?: string
    userId: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    reactions?: ReactionUncheckedCreateNestedManyWithoutActivityEntryInput
    comments?: CommentUncheckedCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryCreateOrConnectWithoutActivityInput = {
    where: ActivityEntryWhereUniqueInput
    create: XOR<ActivityEntryCreateWithoutActivityInput, ActivityEntryUncheckedCreateWithoutActivityInput>
  }

  export type ActivityEntryCreateManyActivityInputEnvelope = {
    data: ActivityEntryCreateManyActivityInput | ActivityEntryCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type PlanSessionCreateWithoutActivityInput = {
    id?: string
    isCoachSuggested?: boolean
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
    plan: PlanCreateNestedOneWithoutSessionsInput
  }

  export type PlanSessionUncheckedCreateWithoutActivityInput = {
    id?: string
    planId: string
    isCoachSuggested?: boolean
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
  }

  export type PlanSessionCreateOrConnectWithoutActivityInput = {
    where: PlanSessionWhereUniqueInput
    create: XOR<PlanSessionCreateWithoutActivityInput, PlanSessionUncheckedCreateWithoutActivityInput>
  }

  export type PlanSessionCreateManyActivityInputEnvelope = {
    data: PlanSessionCreateManyActivityInput | PlanSessionCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type PlanCreateWithoutActivitiesInput = {
    id?: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPlansInput
    planGroup?: PlanGroupCreateNestedOneWithoutPlansInput
    sessions?: PlanSessionCreateNestedManyWithoutPlanInput
    invitations?: PlanInvitationCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutActivitiesInput = {
    id?: string
    userId: string
    planGroupId?: string | null
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    sessions?: PlanSessionUncheckedCreateNestedManyWithoutPlanInput
    invitations?: PlanInvitationUncheckedCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutActivitiesInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutActivitiesInput, PlanUncheckedCreateWithoutActivitiesInput>
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type ActivityEntryUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityEntryWhereUniqueInput
    update: XOR<ActivityEntryUpdateWithoutActivityInput, ActivityEntryUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityEntryCreateWithoutActivityInput, ActivityEntryUncheckedCreateWithoutActivityInput>
  }

  export type ActivityEntryUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityEntryWhereUniqueInput
    data: XOR<ActivityEntryUpdateWithoutActivityInput, ActivityEntryUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityEntryUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityEntryScalarWhereInput
    data: XOR<ActivityEntryUpdateManyMutationInput, ActivityEntryUncheckedUpdateManyWithoutActivityInput>
  }

  export type PlanSessionUpsertWithWhereUniqueWithoutActivityInput = {
    where: PlanSessionWhereUniqueInput
    update: XOR<PlanSessionUpdateWithoutActivityInput, PlanSessionUncheckedUpdateWithoutActivityInput>
    create: XOR<PlanSessionCreateWithoutActivityInput, PlanSessionUncheckedCreateWithoutActivityInput>
  }

  export type PlanSessionUpdateWithWhereUniqueWithoutActivityInput = {
    where: PlanSessionWhereUniqueInput
    data: XOR<PlanSessionUpdateWithoutActivityInput, PlanSessionUncheckedUpdateWithoutActivityInput>
  }

  export type PlanSessionUpdateManyWithWhereWithoutActivityInput = {
    where: PlanSessionScalarWhereInput
    data: XOR<PlanSessionUpdateManyMutationInput, PlanSessionUncheckedUpdateManyWithoutActivityInput>
  }

  export type PlanSessionScalarWhereInput = {
    AND?: PlanSessionScalarWhereInput | PlanSessionScalarWhereInput[]
    OR?: PlanSessionScalarWhereInput[]
    NOT?: PlanSessionScalarWhereInput | PlanSessionScalarWhereInput[]
    id?: StringFilter<"PlanSession"> | string
    planId?: StringFilter<"PlanSession"> | string
    isCoachSuggested?: BoolFilter<"PlanSession"> | boolean
    activityId?: StringFilter<"PlanSession"> | string
    date?: DateTimeFilter<"PlanSession"> | Date | string
    descriptiveGuide?: StringFilter<"PlanSession"> | string
    quantity?: IntFilter<"PlanSession"> | number
    createdAt?: DateTimeFilter<"PlanSession"> | Date | string
  }

  export type PlanUpsertWithWhereUniqueWithoutActivitiesInput = {
    where: PlanWhereUniqueInput
    update: XOR<PlanUpdateWithoutActivitiesInput, PlanUncheckedUpdateWithoutActivitiesInput>
    create: XOR<PlanCreateWithoutActivitiesInput, PlanUncheckedCreateWithoutActivitiesInput>
  }

  export type PlanUpdateWithWhereUniqueWithoutActivitiesInput = {
    where: PlanWhereUniqueInput
    data: XOR<PlanUpdateWithoutActivitiesInput, PlanUncheckedUpdateWithoutActivitiesInput>
  }

  export type PlanUpdateManyWithWhereWithoutActivitiesInput = {
    where: PlanScalarWhereInput
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyWithoutActivitiesInput>
  }

  export type ActivityCreateWithoutEntriesInput = {
    id?: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutActivitiesInput
    planSessions?: PlanSessionCreateNestedManyWithoutActivityInput
    plans?: PlanCreateNestedManyWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutEntriesInput = {
    id?: string
    userId: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    planSessions?: PlanSessionUncheckedCreateNestedManyWithoutActivityInput
    plans?: PlanUncheckedCreateNestedManyWithoutActivitiesInput
  }

  export type ActivityCreateOrConnectWithoutEntriesInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutEntriesInput, ActivityUncheckedCreateWithoutEntriesInput>
  }

  export type UserCreateWithoutActivityEntriesInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutActivityEntriesInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutActivityEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivityEntriesInput, UserUncheckedCreateWithoutActivityEntriesInput>
  }

  export type ReactionCreateWithoutActivityEntryInput = {
    id?: string
    emoji: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutReactionsSentInput
  }

  export type ReactionUncheckedCreateWithoutActivityEntryInput = {
    id?: string
    userId: string
    emoji: string
    createdAt?: Date | string
  }

  export type ReactionCreateOrConnectWithoutActivityEntryInput = {
    where: ReactionWhereUniqueInput
    create: XOR<ReactionCreateWithoutActivityEntryInput, ReactionUncheckedCreateWithoutActivityEntryInput>
  }

  export type ReactionCreateManyActivityEntryInputEnvelope = {
    data: ReactionCreateManyActivityEntryInput | ReactionCreateManyActivityEntryInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutActivityEntryInput = {
    id?: string
    userId: string
    username: string
    text: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    picture?: string | null
  }

  export type CommentUncheckedCreateWithoutActivityEntryInput = {
    id?: string
    userId: string
    username: string
    text: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    picture?: string | null
  }

  export type CommentCreateOrConnectWithoutActivityEntryInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutActivityEntryInput, CommentUncheckedCreateWithoutActivityEntryInput>
  }

  export type CommentCreateManyActivityEntryInputEnvelope = {
    data: CommentCreateManyActivityEntryInput | CommentCreateManyActivityEntryInput[]
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithoutEntriesInput = {
    update: XOR<ActivityUpdateWithoutEntriesInput, ActivityUncheckedUpdateWithoutEntriesInput>
    create: XOR<ActivityCreateWithoutEntriesInput, ActivityUncheckedCreateWithoutEntriesInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutEntriesInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutEntriesInput, ActivityUncheckedUpdateWithoutEntriesInput>
  }

  export type ActivityUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    planSessions?: PlanSessionUpdateManyWithoutActivityNestedInput
    plans?: PlanUpdateManyWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planSessions?: PlanSessionUncheckedUpdateManyWithoutActivityNestedInput
    plans?: PlanUncheckedUpdateManyWithoutActivitiesNestedInput
  }

  export type UserUpsertWithoutActivityEntriesInput = {
    update: XOR<UserUpdateWithoutActivityEntriesInput, UserUncheckedUpdateWithoutActivityEntriesInput>
    create: XOR<UserCreateWithoutActivityEntriesInput, UserUncheckedCreateWithoutActivityEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivityEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivityEntriesInput, UserUncheckedUpdateWithoutActivityEntriesInput>
  }

  export type UserUpdateWithoutActivityEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutActivityEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type ReactionUpsertWithWhereUniqueWithoutActivityEntryInput = {
    where: ReactionWhereUniqueInput
    update: XOR<ReactionUpdateWithoutActivityEntryInput, ReactionUncheckedUpdateWithoutActivityEntryInput>
    create: XOR<ReactionCreateWithoutActivityEntryInput, ReactionUncheckedCreateWithoutActivityEntryInput>
  }

  export type ReactionUpdateWithWhereUniqueWithoutActivityEntryInput = {
    where: ReactionWhereUniqueInput
    data: XOR<ReactionUpdateWithoutActivityEntryInput, ReactionUncheckedUpdateWithoutActivityEntryInput>
  }

  export type ReactionUpdateManyWithWhereWithoutActivityEntryInput = {
    where: ReactionScalarWhereInput
    data: XOR<ReactionUpdateManyMutationInput, ReactionUncheckedUpdateManyWithoutActivityEntryInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutActivityEntryInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutActivityEntryInput, CommentUncheckedUpdateWithoutActivityEntryInput>
    create: XOR<CommentCreateWithoutActivityEntryInput, CommentUncheckedCreateWithoutActivityEntryInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutActivityEntryInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutActivityEntryInput, CommentUncheckedUpdateWithoutActivityEntryInput>
  }

  export type CommentUpdateManyWithWhereWithoutActivityEntryInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutActivityEntryInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    activityEntryId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    username?: StringFilter<"Comment"> | string
    text?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Comment"> | Date | string | null
    picture?: StringNullableFilter<"Comment"> | string | null
  }

  export type ActivityEntryCreateWithoutReactionsInput = {
    id?: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    activity: ActivityCreateNestedOneWithoutEntriesInput
    user: UserCreateNestedOneWithoutActivityEntriesInput
    comments?: CommentCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryUncheckedCreateWithoutReactionsInput = {
    id?: string
    activityId: string
    userId: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    comments?: CommentUncheckedCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryCreateOrConnectWithoutReactionsInput = {
    where: ActivityEntryWhereUniqueInput
    create: XOR<ActivityEntryCreateWithoutReactionsInput, ActivityEntryUncheckedCreateWithoutReactionsInput>
  }

  export type UserCreateWithoutReactionsSentInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutReactionsSentInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutReactionsSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReactionsSentInput, UserUncheckedCreateWithoutReactionsSentInput>
  }

  export type ActivityEntryUpsertWithoutReactionsInput = {
    update: XOR<ActivityEntryUpdateWithoutReactionsInput, ActivityEntryUncheckedUpdateWithoutReactionsInput>
    create: XOR<ActivityEntryCreateWithoutReactionsInput, ActivityEntryUncheckedCreateWithoutReactionsInput>
    where?: ActivityEntryWhereInput
  }

  export type ActivityEntryUpdateToOneWithWhereWithoutReactionsInput = {
    where?: ActivityEntryWhereInput
    data: XOR<ActivityEntryUpdateWithoutReactionsInput, ActivityEntryUncheckedUpdateWithoutReactionsInput>
  }

  export type ActivityEntryUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    activity?: ActivityUpdateOneRequiredWithoutEntriesNestedInput
    user?: UserUpdateOneRequiredWithoutActivityEntriesNestedInput
    comments?: CommentUpdateManyWithoutActivityEntryNestedInput
  }

  export type ActivityEntryUncheckedUpdateWithoutReactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    comments?: CommentUncheckedUpdateManyWithoutActivityEntryNestedInput
  }

  export type UserUpsertWithoutReactionsSentInput = {
    update: XOR<UserUpdateWithoutReactionsSentInput, UserUncheckedUpdateWithoutReactionsSentInput>
    create: XOR<UserCreateWithoutReactionsSentInput, UserUncheckedCreateWithoutReactionsSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReactionsSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReactionsSentInput, UserUncheckedUpdateWithoutReactionsSentInput>
  }

  export type UserUpdateWithoutReactionsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReactionsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type ActivityEntryCreateWithoutCommentsInput = {
    id?: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    activity: ActivityCreateNestedOneWithoutEntriesInput
    user: UserCreateNestedOneWithoutActivityEntriesInput
    reactions?: ReactionCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryUncheckedCreateWithoutCommentsInput = {
    id?: string
    activityId: string
    userId: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
    reactions?: ReactionUncheckedCreateNestedManyWithoutActivityEntryInput
  }

  export type ActivityEntryCreateOrConnectWithoutCommentsInput = {
    where: ActivityEntryWhereUniqueInput
    create: XOR<ActivityEntryCreateWithoutCommentsInput, ActivityEntryUncheckedCreateWithoutCommentsInput>
  }

  export type ActivityEntryUpsertWithoutCommentsInput = {
    update: XOR<ActivityEntryUpdateWithoutCommentsInput, ActivityEntryUncheckedUpdateWithoutCommentsInput>
    create: XOR<ActivityEntryCreateWithoutCommentsInput, ActivityEntryUncheckedCreateWithoutCommentsInput>
    where?: ActivityEntryWhereInput
  }

  export type ActivityEntryUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ActivityEntryWhereInput
    data: XOR<ActivityEntryUpdateWithoutCommentsInput, ActivityEntryUncheckedUpdateWithoutCommentsInput>
  }

  export type ActivityEntryUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    activity?: ActivityUpdateOneRequiredWithoutEntriesNestedInput
    user?: UserUpdateOneRequiredWithoutActivityEntriesNestedInput
    reactions?: ReactionUpdateManyWithoutActivityEntryNestedInput
  }

  export type ActivityEntryUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    reactions?: ReactionUncheckedUpdateManyWithoutActivityEntryNestedInput
  }

  export type UserCreateWithoutMetricsInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutMetricsInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutMetricsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMetricsInput, UserUncheckedCreateWithoutMetricsInput>
  }

  export type MetricEntryCreateWithoutMetricInput = {
    id?: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
    user: UserCreateNestedOneWithoutMetricEntriesInput
  }

  export type MetricEntryUncheckedCreateWithoutMetricInput = {
    id?: string
    userId: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
  }

  export type MetricEntryCreateOrConnectWithoutMetricInput = {
    where: MetricEntryWhereUniqueInput
    create: XOR<MetricEntryCreateWithoutMetricInput, MetricEntryUncheckedCreateWithoutMetricInput>
  }

  export type MetricEntryCreateManyMetricInputEnvelope = {
    data: MetricEntryCreateManyMetricInput | MetricEntryCreateManyMetricInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMetricsInput = {
    update: XOR<UserUpdateWithoutMetricsInput, UserUncheckedUpdateWithoutMetricsInput>
    create: XOR<UserCreateWithoutMetricsInput, UserUncheckedCreateWithoutMetricsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMetricsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMetricsInput, UserUncheckedUpdateWithoutMetricsInput>
  }

  export type UserUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutMetricsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type MetricEntryUpsertWithWhereUniqueWithoutMetricInput = {
    where: MetricEntryWhereUniqueInput
    update: XOR<MetricEntryUpdateWithoutMetricInput, MetricEntryUncheckedUpdateWithoutMetricInput>
    create: XOR<MetricEntryCreateWithoutMetricInput, MetricEntryUncheckedCreateWithoutMetricInput>
  }

  export type MetricEntryUpdateWithWhereUniqueWithoutMetricInput = {
    where: MetricEntryWhereUniqueInput
    data: XOR<MetricEntryUpdateWithoutMetricInput, MetricEntryUncheckedUpdateWithoutMetricInput>
  }

  export type MetricEntryUpdateManyWithWhereWithoutMetricInput = {
    where: MetricEntryScalarWhereInput
    data: XOR<MetricEntryUpdateManyMutationInput, MetricEntryUncheckedUpdateManyWithoutMetricInput>
  }

  export type UserCreateWithoutMetricEntriesInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutMetricEntriesInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutMetricEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMetricEntriesInput, UserUncheckedCreateWithoutMetricEntriesInput>
  }

  export type MetricCreateWithoutEntriesInput = {
    id?: string
    title: string
    emoji: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMetricsInput
  }

  export type MetricUncheckedCreateWithoutEntriesInput = {
    id?: string
    userId: string
    title: string
    emoji: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricCreateOrConnectWithoutEntriesInput = {
    where: MetricWhereUniqueInput
    create: XOR<MetricCreateWithoutEntriesInput, MetricUncheckedCreateWithoutEntriesInput>
  }

  export type UserUpsertWithoutMetricEntriesInput = {
    update: XOR<UserUpdateWithoutMetricEntriesInput, UserUncheckedUpdateWithoutMetricEntriesInput>
    create: XOR<UserCreateWithoutMetricEntriesInput, UserUncheckedCreateWithoutMetricEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMetricEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMetricEntriesInput, UserUncheckedUpdateWithoutMetricEntriesInput>
  }

  export type UserUpdateWithoutMetricEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutMetricEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type MetricUpsertWithoutEntriesInput = {
    update: XOR<MetricUpdateWithoutEntriesInput, MetricUncheckedUpdateWithoutEntriesInput>
    create: XOR<MetricCreateWithoutEntriesInput, MetricUncheckedCreateWithoutEntriesInput>
    where?: MetricWhereInput
  }

  export type MetricUpdateToOneWithWhereWithoutEntriesInput = {
    where?: MetricWhereInput
    data: XOR<MetricUpdateWithoutEntriesInput, MetricUncheckedUpdateWithoutEntriesInput>
  }

  export type MetricUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMetricsNestedInput
  }

  export type MetricUncheckedUpdateWithoutEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPlansInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutPlansInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlansInput, UserUncheckedCreateWithoutPlansInput>
  }

  export type PlanGroupCreateWithoutPlansInput = {
    id?: string
    createdAt?: Date | string
    members?: UserCreateNestedManyWithoutPlanGroupMembershipsInput
  }

  export type PlanGroupUncheckedCreateWithoutPlansInput = {
    id?: string
    createdAt?: Date | string
    members?: UserUncheckedCreateNestedManyWithoutPlanGroupMembershipsInput
  }

  export type PlanGroupCreateOrConnectWithoutPlansInput = {
    where: PlanGroupWhereUniqueInput
    create: XOR<PlanGroupCreateWithoutPlansInput, PlanGroupUncheckedCreateWithoutPlansInput>
  }

  export type PlanSessionCreateWithoutPlanInput = {
    id?: string
    isCoachSuggested?: boolean
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
    activity: ActivityCreateNestedOneWithoutPlanSessionsInput
  }

  export type PlanSessionUncheckedCreateWithoutPlanInput = {
    id?: string
    isCoachSuggested?: boolean
    activityId: string
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
  }

  export type PlanSessionCreateOrConnectWithoutPlanInput = {
    where: PlanSessionWhereUniqueInput
    create: XOR<PlanSessionCreateWithoutPlanInput, PlanSessionUncheckedCreateWithoutPlanInput>
  }

  export type PlanSessionCreateManyPlanInputEnvelope = {
    data: PlanSessionCreateManyPlanInput | PlanSessionCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type ActivityCreateWithoutPlansInput = {
    id?: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutActivitiesInput
    entries?: ActivityEntryCreateNestedManyWithoutActivityInput
    planSessions?: PlanSessionCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutPlansInput = {
    id?: string
    userId: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    entries?: ActivityEntryUncheckedCreateNestedManyWithoutActivityInput
    planSessions?: PlanSessionUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutPlansInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutPlansInput, ActivityUncheckedCreateWithoutPlansInput>
  }

  export type PlanInvitationCreateWithoutPlanInput = {
    id?: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
    sender: UserCreateNestedOneWithoutPlanInvitationsSentInput
    recipient: UserCreateNestedOneWithoutPlanInvitationsReceivedInput
  }

  export type PlanInvitationUncheckedCreateWithoutPlanInput = {
    id?: string
    senderId: string
    recipientId: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PlanInvitationCreateOrConnectWithoutPlanInput = {
    where: PlanInvitationWhereUniqueInput
    create: XOR<PlanInvitationCreateWithoutPlanInput, PlanInvitationUncheckedCreateWithoutPlanInput>
  }

  export type PlanInvitationCreateManyPlanInputEnvelope = {
    data: PlanInvitationCreateManyPlanInput | PlanInvitationCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type PlanMilestoneCreateWithoutPlanInput = {
    id?: string
    date: Date | string
    description: string
    progress?: number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PlanMilestoneUncheckedCreateWithoutPlanInput = {
    id?: string
    date: Date | string
    description: string
    progress?: number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PlanMilestoneCreateOrConnectWithoutPlanInput = {
    where: PlanMilestoneWhereUniqueInput
    create: XOR<PlanMilestoneCreateWithoutPlanInput, PlanMilestoneUncheckedCreateWithoutPlanInput>
  }

  export type PlanMilestoneCreateManyPlanInputEnvelope = {
    data: PlanMilestoneCreateManyPlanInput | PlanMilestoneCreateManyPlanInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPlansInput = {
    update: XOR<UserUpdateWithoutPlansInput, UserUncheckedUpdateWithoutPlansInput>
    create: XOR<UserCreateWithoutPlansInput, UserUncheckedCreateWithoutPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlansInput, UserUncheckedUpdateWithoutPlansInput>
  }

  export type UserUpdateWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type PlanGroupUpsertWithoutPlansInput = {
    update: XOR<PlanGroupUpdateWithoutPlansInput, PlanGroupUncheckedUpdateWithoutPlansInput>
    create: XOR<PlanGroupCreateWithoutPlansInput, PlanGroupUncheckedCreateWithoutPlansInput>
    where?: PlanGroupWhereInput
  }

  export type PlanGroupUpdateToOneWithWhereWithoutPlansInput = {
    where?: PlanGroupWhereInput
    data: XOR<PlanGroupUpdateWithoutPlansInput, PlanGroupUncheckedUpdateWithoutPlansInput>
  }

  export type PlanGroupUpdateWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUpdateManyWithoutPlanGroupMembershipsNestedInput
  }

  export type PlanGroupUncheckedUpdateWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: UserUncheckedUpdateManyWithoutPlanGroupMembershipsNestedInput
  }

  export type PlanSessionUpsertWithWhereUniqueWithoutPlanInput = {
    where: PlanSessionWhereUniqueInput
    update: XOR<PlanSessionUpdateWithoutPlanInput, PlanSessionUncheckedUpdateWithoutPlanInput>
    create: XOR<PlanSessionCreateWithoutPlanInput, PlanSessionUncheckedCreateWithoutPlanInput>
  }

  export type PlanSessionUpdateWithWhereUniqueWithoutPlanInput = {
    where: PlanSessionWhereUniqueInput
    data: XOR<PlanSessionUpdateWithoutPlanInput, PlanSessionUncheckedUpdateWithoutPlanInput>
  }

  export type PlanSessionUpdateManyWithWhereWithoutPlanInput = {
    where: PlanSessionScalarWhereInput
    data: XOR<PlanSessionUpdateManyMutationInput, PlanSessionUncheckedUpdateManyWithoutPlanInput>
  }

  export type ActivityUpsertWithWhereUniqueWithoutPlansInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutPlansInput, ActivityUncheckedUpdateWithoutPlansInput>
    create: XOR<ActivityCreateWithoutPlansInput, ActivityUncheckedCreateWithoutPlansInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutPlansInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutPlansInput, ActivityUncheckedUpdateWithoutPlansInput>
  }

  export type ActivityUpdateManyWithWhereWithoutPlansInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutPlansInput>
  }

  export type PlanInvitationUpsertWithWhereUniqueWithoutPlanInput = {
    where: PlanInvitationWhereUniqueInput
    update: XOR<PlanInvitationUpdateWithoutPlanInput, PlanInvitationUncheckedUpdateWithoutPlanInput>
    create: XOR<PlanInvitationCreateWithoutPlanInput, PlanInvitationUncheckedCreateWithoutPlanInput>
  }

  export type PlanInvitationUpdateWithWhereUniqueWithoutPlanInput = {
    where: PlanInvitationWhereUniqueInput
    data: XOR<PlanInvitationUpdateWithoutPlanInput, PlanInvitationUncheckedUpdateWithoutPlanInput>
  }

  export type PlanInvitationUpdateManyWithWhereWithoutPlanInput = {
    where: PlanInvitationScalarWhereInput
    data: XOR<PlanInvitationUpdateManyMutationInput, PlanInvitationUncheckedUpdateManyWithoutPlanInput>
  }

  export type PlanMilestoneUpsertWithWhereUniqueWithoutPlanInput = {
    where: PlanMilestoneWhereUniqueInput
    update: XOR<PlanMilestoneUpdateWithoutPlanInput, PlanMilestoneUncheckedUpdateWithoutPlanInput>
    create: XOR<PlanMilestoneCreateWithoutPlanInput, PlanMilestoneUncheckedCreateWithoutPlanInput>
  }

  export type PlanMilestoneUpdateWithWhereUniqueWithoutPlanInput = {
    where: PlanMilestoneWhereUniqueInput
    data: XOR<PlanMilestoneUpdateWithoutPlanInput, PlanMilestoneUncheckedUpdateWithoutPlanInput>
  }

  export type PlanMilestoneUpdateManyWithWhereWithoutPlanInput = {
    where: PlanMilestoneScalarWhereInput
    data: XOR<PlanMilestoneUpdateManyMutationInput, PlanMilestoneUncheckedUpdateManyWithoutPlanInput>
  }

  export type PlanMilestoneScalarWhereInput = {
    AND?: PlanMilestoneScalarWhereInput | PlanMilestoneScalarWhereInput[]
    OR?: PlanMilestoneScalarWhereInput[]
    NOT?: PlanMilestoneScalarWhereInput | PlanMilestoneScalarWhereInput[]
    id?: StringFilter<"PlanMilestone"> | string
    planId?: StringFilter<"PlanMilestone"> | string
    date?: DateTimeFilter<"PlanMilestone"> | Date | string
    description?: StringFilter<"PlanMilestone"> | string
    progress?: IntNullableFilter<"PlanMilestone"> | number | null
    criteria?: JsonNullableFilter<"PlanMilestone">
    createdAt?: DateTimeFilter<"PlanMilestone"> | Date | string
  }

  export type PlanCreateWithoutSessionsInput = {
    id?: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPlansInput
    planGroup?: PlanGroupCreateNestedOneWithoutPlansInput
    activities?: ActivityCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutSessionsInput = {
    id?: string
    userId: string
    planGroupId?: string | null
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationUncheckedCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutSessionsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutSessionsInput, PlanUncheckedCreateWithoutSessionsInput>
  }

  export type ActivityCreateWithoutPlanSessionsInput = {
    id?: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    user: UserCreateNestedOneWithoutActivitiesInput
    entries?: ActivityEntryCreateNestedManyWithoutActivityInput
    plans?: PlanCreateNestedManyWithoutActivitiesInput
  }

  export type ActivityUncheckedCreateWithoutPlanSessionsInput = {
    id?: string
    userId: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
    entries?: ActivityEntryUncheckedCreateNestedManyWithoutActivityInput
    plans?: PlanUncheckedCreateNestedManyWithoutActivitiesInput
  }

  export type ActivityCreateOrConnectWithoutPlanSessionsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutPlanSessionsInput, ActivityUncheckedCreateWithoutPlanSessionsInput>
  }

  export type PlanUpsertWithoutSessionsInput = {
    update: XOR<PlanUpdateWithoutSessionsInput, PlanUncheckedUpdateWithoutSessionsInput>
    create: XOR<PlanCreateWithoutSessionsInput, PlanUncheckedCreateWithoutSessionsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutSessionsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutSessionsInput, PlanUncheckedUpdateWithoutSessionsInput>
  }

  export type PlanUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPlansNestedInput
    planGroup?: PlanGroupUpdateOneWithoutPlansNestedInput
    activities?: ActivityUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    activities?: ActivityUncheckedUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUncheckedUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type ActivityUpsertWithoutPlanSessionsInput = {
    update: XOR<ActivityUpdateWithoutPlanSessionsInput, ActivityUncheckedUpdateWithoutPlanSessionsInput>
    create: XOR<ActivityCreateWithoutPlanSessionsInput, ActivityUncheckedCreateWithoutPlanSessionsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutPlanSessionsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutPlanSessionsInput, ActivityUncheckedUpdateWithoutPlanSessionsInput>
  }

  export type ActivityUpdateWithoutPlanSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    entries?: ActivityEntryUpdateManyWithoutActivityNestedInput
    plans?: PlanUpdateManyWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutPlanSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entries?: ActivityEntryUncheckedUpdateManyWithoutActivityNestedInput
    plans?: PlanUncheckedUpdateManyWithoutActivitiesNestedInput
  }

  export type PlanCreateWithoutMilestonesInput = {
    id?: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPlansInput
    planGroup?: PlanGroupCreateNestedOneWithoutPlansInput
    sessions?: PlanSessionCreateNestedManyWithoutPlanInput
    activities?: ActivityCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutMilestonesInput = {
    id?: string
    userId: string
    planGroupId?: string | null
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    sessions?: PlanSessionUncheckedCreateNestedManyWithoutPlanInput
    activities?: ActivityUncheckedCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutMilestonesInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutMilestonesInput, PlanUncheckedCreateWithoutMilestonesInput>
  }

  export type PlanUpsertWithoutMilestonesInput = {
    update: XOR<PlanUpdateWithoutMilestonesInput, PlanUncheckedUpdateWithoutMilestonesInput>
    create: XOR<PlanCreateWithoutMilestonesInput, PlanUncheckedCreateWithoutMilestonesInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutMilestonesInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutMilestonesInput, PlanUncheckedUpdateWithoutMilestonesInput>
  }

  export type PlanUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPlansNestedInput
    planGroup?: PlanGroupUpdateOneWithoutPlansNestedInput
    sessions?: PlanSessionUpdateManyWithoutPlanNestedInput
    activities?: ActivityUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutMilestonesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: PlanSessionUncheckedUpdateManyWithoutPlanNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type UserCreateWithoutPlanGroupMembershipsInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutPlanGroupMembershipsInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutPlanGroupMembershipsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlanGroupMembershipsInput, UserUncheckedCreateWithoutPlanGroupMembershipsInput>
  }

  export type PlanCreateWithoutPlanGroupInput = {
    id?: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPlansInput
    sessions?: PlanSessionCreateNestedManyWithoutPlanInput
    activities?: ActivityCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutPlanGroupInput = {
    id?: string
    userId: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    sessions?: PlanSessionUncheckedCreateNestedManyWithoutPlanInput
    activities?: ActivityUncheckedCreateNestedManyWithoutPlansInput
    invitations?: PlanInvitationUncheckedCreateNestedManyWithoutPlanInput
    milestones?: PlanMilestoneUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutPlanGroupInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutPlanGroupInput, PlanUncheckedCreateWithoutPlanGroupInput>
  }

  export type PlanCreateManyPlanGroupInputEnvelope = {
    data: PlanCreateManyPlanGroupInput | PlanCreateManyPlanGroupInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutPlanGroupMembershipsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPlanGroupMembershipsInput, UserUncheckedUpdateWithoutPlanGroupMembershipsInput>
    create: XOR<UserCreateWithoutPlanGroupMembershipsInput, UserUncheckedCreateWithoutPlanGroupMembershipsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPlanGroupMembershipsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPlanGroupMembershipsInput, UserUncheckedUpdateWithoutPlanGroupMembershipsInput>
  }

  export type UserUpdateManyWithWhereWithoutPlanGroupMembershipsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPlanGroupMembershipsInput>
  }

  export type PlanUpsertWithWhereUniqueWithoutPlanGroupInput = {
    where: PlanWhereUniqueInput
    update: XOR<PlanUpdateWithoutPlanGroupInput, PlanUncheckedUpdateWithoutPlanGroupInput>
    create: XOR<PlanCreateWithoutPlanGroupInput, PlanUncheckedCreateWithoutPlanGroupInput>
  }

  export type PlanUpdateWithWhereUniqueWithoutPlanGroupInput = {
    where: PlanWhereUniqueInput
    data: XOR<PlanUpdateWithoutPlanGroupInput, PlanUncheckedUpdateWithoutPlanGroupInput>
  }

  export type PlanUpdateManyWithWhereWithoutPlanGroupInput = {
    where: PlanScalarWhereInput
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyWithoutPlanGroupInput>
  }

  export type PlanCreateWithoutInvitationsInput = {
    id?: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    user: UserCreateNestedOneWithoutPlansInput
    planGroup?: PlanGroupCreateNestedOneWithoutPlansInput
    sessions?: PlanSessionCreateNestedManyWithoutPlanInput
    activities?: ActivityCreateNestedManyWithoutPlansInput
    milestones?: PlanMilestoneCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutInvitationsInput = {
    id?: string
    userId: string
    planGroupId?: string | null
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
    sessions?: PlanSessionUncheckedCreateNestedManyWithoutPlanInput
    activities?: ActivityUncheckedCreateNestedManyWithoutPlansInput
    milestones?: PlanMilestoneUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutInvitationsInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutInvitationsInput, PlanUncheckedCreateWithoutInvitationsInput>
  }

  export type UserCreateWithoutPlanInvitationsSentInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutPlanInvitationsSentInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutPlanInvitationsSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlanInvitationsSentInput, UserUncheckedCreateWithoutPlanInvitationsSentInput>
  }

  export type UserCreateWithoutPlanInvitationsReceivedInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutPlanInvitationsReceivedInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutPlanInvitationsReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPlanInvitationsReceivedInput, UserUncheckedCreateWithoutPlanInvitationsReceivedInput>
  }

  export type PlanUpsertWithoutInvitationsInput = {
    update: XOR<PlanUpdateWithoutInvitationsInput, PlanUncheckedUpdateWithoutInvitationsInput>
    create: XOR<PlanCreateWithoutInvitationsInput, PlanUncheckedCreateWithoutInvitationsInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutInvitationsInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutInvitationsInput, PlanUncheckedUpdateWithoutInvitationsInput>
  }

  export type PlanUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPlansNestedInput
    planGroup?: PlanGroupUpdateOneWithoutPlansNestedInput
    sessions?: PlanSessionUpdateManyWithoutPlanNestedInput
    activities?: ActivityUpdateManyWithoutPlansNestedInput
    milestones?: PlanMilestoneUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutInvitationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: PlanSessionUncheckedUpdateManyWithoutPlanNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutPlansNestedInput
    milestones?: PlanMilestoneUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type UserUpsertWithoutPlanInvitationsSentInput = {
    update: XOR<UserUpdateWithoutPlanInvitationsSentInput, UserUncheckedUpdateWithoutPlanInvitationsSentInput>
    create: XOR<UserCreateWithoutPlanInvitationsSentInput, UserUncheckedCreateWithoutPlanInvitationsSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlanInvitationsSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlanInvitationsSentInput, UserUncheckedUpdateWithoutPlanInvitationsSentInput>
  }

  export type UserUpdateWithoutPlanInvitationsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPlanInvitationsSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type UserUpsertWithoutPlanInvitationsReceivedInput = {
    update: XOR<UserUpdateWithoutPlanInvitationsReceivedInput, UserUncheckedUpdateWithoutPlanInvitationsReceivedInput>
    create: XOR<UserCreateWithoutPlanInvitationsReceivedInput, UserUncheckedCreateWithoutPlanInvitationsReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPlanInvitationsReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPlanInvitationsReceivedInput, UserUncheckedUpdateWithoutPlanInvitationsReceivedInput>
  }

  export type UserUpdateWithoutPlanInvitationsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPlanInvitationsReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type UserCreateWithoutMessagesInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutMessagesInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
  }

  export type MessageEmotionCreateWithoutMessageInput = {
    id?: string
    name: string
    score: number
    color: string
  }

  export type MessageEmotionUncheckedCreateWithoutMessageInput = {
    id?: string
    name: string
    score: number
    color: string
  }

  export type MessageEmotionCreateOrConnectWithoutMessageInput = {
    where: MessageEmotionWhereUniqueInput
    create: XOR<MessageEmotionCreateWithoutMessageInput, MessageEmotionUncheckedCreateWithoutMessageInput>
  }

  export type MessageEmotionCreateManyMessageInputEnvelope = {
    data: MessageEmotionCreateManyMessageInput | MessageEmotionCreateManyMessageInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMessagesInput = {
    update: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
    create: XOR<UserCreateWithoutMessagesInput, UserUncheckedCreateWithoutMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesInput, UserUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type MessageEmotionUpsertWithWhereUniqueWithoutMessageInput = {
    where: MessageEmotionWhereUniqueInput
    update: XOR<MessageEmotionUpdateWithoutMessageInput, MessageEmotionUncheckedUpdateWithoutMessageInput>
    create: XOR<MessageEmotionCreateWithoutMessageInput, MessageEmotionUncheckedCreateWithoutMessageInput>
  }

  export type MessageEmotionUpdateWithWhereUniqueWithoutMessageInput = {
    where: MessageEmotionWhereUniqueInput
    data: XOR<MessageEmotionUpdateWithoutMessageInput, MessageEmotionUncheckedUpdateWithoutMessageInput>
  }

  export type MessageEmotionUpdateManyWithWhereWithoutMessageInput = {
    where: MessageEmotionScalarWhereInput
    data: XOR<MessageEmotionUpdateManyMutationInput, MessageEmotionUncheckedUpdateManyWithoutMessageInput>
  }

  export type MessageEmotionScalarWhereInput = {
    AND?: MessageEmotionScalarWhereInput | MessageEmotionScalarWhereInput[]
    OR?: MessageEmotionScalarWhereInput[]
    NOT?: MessageEmotionScalarWhereInput | MessageEmotionScalarWhereInput[]
    id?: StringFilter<"MessageEmotion"> | string
    messageId?: StringFilter<"MessageEmotion"> | string
    name?: StringFilter<"MessageEmotion"> | string
    score?: FloatFilter<"MessageEmotion"> | number
    color?: StringFilter<"MessageEmotion"> | string
  }

  export type MessageCreateWithoutEmotionsInput = {
    id?: string
    role: $Enums.MessageRole
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateWithoutEmotionsInput = {
    id?: string
    userId: string
    role: $Enums.MessageRole
    content: string
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutEmotionsInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutEmotionsInput, MessageUncheckedCreateWithoutEmotionsInput>
  }

  export type MessageUpsertWithoutEmotionsInput = {
    update: XOR<MessageUpdateWithoutEmotionsInput, MessageUncheckedUpdateWithoutEmotionsInput>
    create: XOR<MessageCreateWithoutEmotionsInput, MessageUncheckedCreateWithoutEmotionsInput>
    where?: MessageWhereInput
  }

  export type MessageUpdateToOneWithWhereWithoutEmotionsInput = {
    where?: MessageWhereInput
    data: XOR<MessageUpdateWithoutEmotionsInput, MessageUncheckedUpdateWithoutEmotionsInput>
  }

  export type MessageUpdateWithoutEmotionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateWithoutEmotionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    recommendations?: RecommendationUncheckedCreateNestedManyWithoutUserInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type UserCreateWithoutRecommendationsInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    activities?: ActivityCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryCreateNestedManyWithoutUserInput
    plans?: PlanCreateNestedManyWithoutUserInput
    messages?: MessageCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupCreateNestedManyWithoutMembersInput
    reactionsSent?: ReactionCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionCreateNestedManyWithoutToInput
    referredUsers?: UserCreateNestedManyWithoutReferredByInput
    referredBy?: UserCreateNestedOneWithoutReferredUsersInput
  }

  export type UserUncheckedCreateWithoutRecommendationsInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
    referredById?: string | null
    activities?: ActivityUncheckedCreateNestedManyWithoutUserInput
    activityEntries?: ActivityEntryUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    metricEntries?: MetricEntryUncheckedCreateNestedManyWithoutUserInput
    plans?: PlanUncheckedCreateNestedManyWithoutUserInput
    messages?: MessageUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    planInvitationsSent?: PlanInvitationUncheckedCreateNestedManyWithoutSenderInput
    planInvitationsReceived?: PlanInvitationUncheckedCreateNestedManyWithoutRecipientInput
    planGroupMemberships?: PlanGroupUncheckedCreateNestedManyWithoutMembersInput
    reactionsSent?: ReactionUncheckedCreateNestedManyWithoutUserInput
    connectionsFrom?: ConnectionUncheckedCreateNestedManyWithoutFromInput
    connectionsTo?: ConnectionUncheckedCreateNestedManyWithoutToInput
    referredUsers?: UserUncheckedCreateNestedManyWithoutReferredByInput
  }

  export type UserCreateOrConnectWithoutRecommendationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
  }

  export type UserUpsertWithoutRecommendationsInput = {
    update: XOR<UserUpdateWithoutRecommendationsInput, UserUncheckedUpdateWithoutRecommendationsInput>
    create: XOR<UserCreateWithoutRecommendationsInput, UserUncheckedCreateWithoutRecommendationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRecommendationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRecommendationsInput, UserUncheckedUpdateWithoutRecommendationsInput>
  }

  export type UserUpdateWithoutRecommendationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutRecommendationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type ActivityCreateManyUserInput = {
    id?: string
    title: string
    measure: string
    emoji: string
    createdAt?: Date | string
    privacySettings?: $Enums.ActivityVisibility | null
    colorHex?: string | null
    deletedAt?: Date | string | null
  }

  export type ActivityEntryCreateManyUserInput = {
    id?: string
    activityId: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
  }

  export type MetricCreateManyUserInput = {
    id?: string
    title: string
    emoji: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MetricEntryCreateManyUserInput = {
    id?: string
    metricId: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
  }

  export type PlanCreateManyUserInput = {
    id?: string
    planGroupId?: string | null
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
  }

  export type MessageCreateManyUserInput = {
    id?: string
    role: $Enums.MessageRole
    content: string
    createdAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    message: string
    createdAt?: Date | string
    sentAt?: Date | string | null
    processedAt?: Date | string | null
    openedAt?: Date | string | null
    concludedAt?: Date | string | null
    promptTag?: string | null
    status?: $Enums.NotificationStatus
    type?: $Enums.NotificationType
    relatedId?: string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlanInvitationCreateManySenderInput = {
    id?: string
    planId: string
    recipientId: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PlanInvitationCreateManyRecipientInput = {
    id?: string
    planId: string
    senderId: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type RecommendationCreateManyUserInput = {
    id?: string
    recommendationObjectType?: $Enums.RecommendationObjectType
    recommendationObjectId: string
    score: number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReactionCreateManyUserInput = {
    id?: string
    activityEntryId: string
    emoji: string
    createdAt?: Date | string
  }

  export type ConnectionCreateManyFromInput = {
    id?: string
    toId: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type ConnectionCreateManyToInput = {
    id?: string
    fromId: string
    status?: $Enums.ConnectionStatus
    message?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type UserCreateManyReferredByInput = {
    id?: string
    name?: string | null
    profile?: string | null
    picture?: string | null
    age?: number | null
    username?: string | null
    timezone?: string | null
    clerkId?: string | null
    language?: string | null
    planType?: $Enums.PlanType
    lastActiveAt?: Date | string | null
    email: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    isPwaInstalled?: boolean
    isPwaNotificationsEnabled?: boolean
    lookingForAp?: boolean | null
    pwaSubscriptionEndpoint?: string | null
    pwaSubscriptionKey?: string | null
    pwaSubscriptionAuthToken?: string | null
    unactivatedEmailSentAt?: Date | string | null
    themeBaseColor?: $Enums.ThemeColor
    defaultActivityVisibility?: $Enums.ActivityVisibility
    recommendationsOutdated?: boolean
    recommendationsLastCalculatedAt?: Date | string | null
    dailyCheckinDays?: UserCreatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: $Enums.DailyCheckinTime | null
    stripeCustomerId?: string | null
    stripeSubscriptionId?: string | null
    stripeSubscriptionStatus?: string | null
  }

  export type ActivityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entries?: ActivityEntryUpdateManyWithoutActivityNestedInput
    planSessions?: PlanSessionUpdateManyWithoutActivityNestedInput
    plans?: PlanUpdateManyWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entries?: ActivityEntryUncheckedUpdateManyWithoutActivityNestedInput
    planSessions?: PlanSessionUncheckedUpdateManyWithoutActivityNestedInput
    plans?: PlanUncheckedUpdateManyWithoutActivitiesNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ActivityEntryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    activity?: ActivityUpdateOneRequiredWithoutEntriesNestedInput
    reactions?: ReactionUpdateManyWithoutActivityEntryNestedInput
    comments?: CommentUpdateManyWithoutActivityEntryNestedInput
  }

  export type ActivityEntryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    reactions?: ReactionUncheckedUpdateManyWithoutActivityEntryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutActivityEntryNestedInput
  }

  export type ActivityEntryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MetricUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: MetricEntryUpdateManyWithoutMetricNestedInput
  }

  export type MetricUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entries?: MetricEntryUncheckedUpdateManyWithoutMetricNestedInput
  }

  export type MetricUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MetricEntryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
    metric?: MetricUpdateOneRequiredWithoutEntriesNestedInput
  }

  export type MetricEntryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MetricEntryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlanUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    planGroup?: PlanGroupUpdateOneWithoutPlansNestedInput
    sessions?: PlanSessionUpdateManyWithoutPlanNestedInput
    activities?: ActivityUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: PlanSessionUncheckedUpdateManyWithoutPlanNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUncheckedUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emotions?: MessageEmotionUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    emotions?: MessageEmotionUncheckedUpdateManyWithoutMessageNestedInput
  }

  export type MessageUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumMessageRoleFieldUpdateOperationsInput | $Enums.MessageRole
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concludedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promptTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concludedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promptTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    openedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    concludedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promptTag?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumNotificationStatusFieldUpdateOperationsInput | $Enums.NotificationStatus
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    relatedId?: NullableStringFieldUpdateOperationsInput | string | null
    relatedData?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PlanInvitationUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: PlanUpdateOneRequiredWithoutInvitationsNestedInput
    recipient?: UserUpdateOneRequiredWithoutPlanInvitationsReceivedNestedInput
  }

  export type PlanInvitationUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanInvitationUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanInvitationUpdateWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plan?: PlanUpdateOneRequiredWithoutInvitationsNestedInput
    sender?: UserUpdateOneRequiredWithoutPlanInvitationsSentNestedInput
  }

  export type PlanInvitationUncheckedUpdateWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanInvitationUncheckedUpdateManyWithoutRecipientInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanGroupUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plans?: PlanUpdateManyWithoutPlanGroupNestedInput
  }

  export type PlanGroupUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plans?: PlanUncheckedUpdateManyWithoutPlanGroupNestedInput
  }

  export type PlanGroupUncheckedUpdateManyWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationObjectType?: EnumRecommendationObjectTypeFieldUpdateOperationsInput | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationObjectType?: EnumRecommendationObjectTypeFieldUpdateOperationsInput | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RecommendationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    recommendationObjectType?: EnumRecommendationObjectTypeFieldUpdateOperationsInput | $Enums.RecommendationObjectType
    recommendationObjectId?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    metadata?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityEntry?: ActivityEntryUpdateOneRequiredWithoutReactionsNestedInput
  }

  export type ReactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityEntryId?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReactionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    activityEntryId?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConnectionUpdateWithoutFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    to?: UserUpdateOneRequiredWithoutConnectionsToNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    toId?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConnectionUncheckedUpdateManyWithoutFromInput = {
    id?: StringFieldUpdateOperationsInput | string
    toId?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConnectionUpdateWithoutToInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    from?: UserUpdateOneRequiredWithoutConnectionsFromNestedInput
  }

  export type ConnectionUncheckedUpdateWithoutToInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromId?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ConnectionUncheckedUpdateManyWithoutToInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromId?: StringFieldUpdateOperationsInput | string
    status?: EnumConnectionStatusFieldUpdateOperationsInput | $Enums.ConnectionStatus
    message?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpdateWithoutReferredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
  }

  export type UserUncheckedUpdateWithoutReferredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    planGroupMemberships?: PlanGroupUncheckedUpdateManyWithoutMembersNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutReferredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityEntryCreateManyActivityInput = {
    id?: string
    userId: string
    quantity: number
    date: Date | string
    createdAt?: Date | string
    description?: string | null
    deletedAt?: Date | string | null
    timezone?: string | null
    imageS3Path?: string | null
    imageUrl?: string | null
    imageExpiresAt?: Date | string | null
    imageCreatedAt?: Date | string | null
    imageIsPublic?: boolean
  }

  export type PlanSessionCreateManyActivityInput = {
    id?: string
    planId: string
    isCoachSuggested?: boolean
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
  }

  export type ActivityEntryUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutActivityEntriesNestedInput
    reactions?: ReactionUpdateManyWithoutActivityEntryNestedInput
    comments?: CommentUpdateManyWithoutActivityEntryNestedInput
  }

  export type ActivityEntryUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
    reactions?: ReactionUncheckedUpdateManyWithoutActivityEntryNestedInput
    comments?: CommentUncheckedUpdateManyWithoutActivityEntryNestedInput
  }

  export type ActivityEntryUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    imageS3Path?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    imageExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageCreatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    imageIsPublic?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlanSessionUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type PlanSessionUncheckedUpdateWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanSessionUncheckedUpdateManyWithoutActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    planId?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPlansNestedInput
    planGroup?: PlanGroupUpdateOneWithoutPlansNestedInput
    sessions?: PlanSessionUpdateManyWithoutPlanNestedInput
    invitations?: PlanInvitationUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: PlanSessionUncheckedUpdateManyWithoutPlanNestedInput
    invitations?: PlanInvitationUncheckedUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateManyWithoutActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    planGroupId?: NullableStringFieldUpdateOperationsInput | string | null
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ReactionCreateManyActivityEntryInput = {
    id?: string
    userId: string
    emoji: string
    createdAt?: Date | string
  }

  export type CommentCreateManyActivityEntryInput = {
    id?: string
    userId: string
    username: string
    text: string
    createdAt?: Date | string
    deletedAt?: Date | string | null
    picture?: string | null
  }

  export type ReactionUpdateWithoutActivityEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReactionsSentNestedInput
  }

  export type ReactionUncheckedUpdateWithoutActivityEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReactionUncheckedUpdateManyWithoutActivityEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutActivityEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateWithoutActivityEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUncheckedUpdateManyWithoutActivityEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricEntryCreateManyMetricInput = {
    id?: string
    userId: string
    rating: number
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    description?: string | null
    skipped?: boolean
    descriptionSkipped?: boolean
  }

  export type MetricEntryUpdateWithoutMetricInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutMetricEntriesNestedInput
  }

  export type MetricEntryUncheckedUpdateWithoutMetricInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MetricEntryUncheckedUpdateManyWithoutMetricInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    skipped?: BoolFieldUpdateOperationsInput | boolean
    descriptionSkipped?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlanSessionCreateManyPlanInput = {
    id?: string
    isCoachSuggested?: boolean
    activityId: string
    date: Date | string
    descriptiveGuide?: string
    quantity: number
    createdAt?: Date | string
  }

  export type PlanInvitationCreateManyPlanInput = {
    id?: string
    senderId: string
    recipientId: string
    status?: $Enums.InvitationStatus
    createdAt?: Date | string
    updatedAt?: Date | string | null
  }

  export type PlanMilestoneCreateManyPlanInput = {
    id?: string
    date: Date | string
    description: string
    progress?: number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PlanSessionUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutPlanSessionsNestedInput
  }

  export type PlanSessionUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    activityId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanSessionUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    isCoachSuggested?: BoolFieldUpdateOperationsInput | boolean
    activityId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    descriptiveGuide?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityUpdateWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
    entries?: ActivityEntryUpdateManyWithoutActivityNestedInput
    planSessions?: PlanSessionUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entries?: ActivityEntryUncheckedUpdateManyWithoutActivityNestedInput
    planSessions?: PlanSessionUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutPlansInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    measure?: StringFieldUpdateOperationsInput | string
    emoji?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    privacySettings?: NullableEnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility | null
    colorHex?: NullableStringFieldUpdateOperationsInput | string | null
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanInvitationUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sender?: UserUpdateOneRequiredWithoutPlanInvitationsSentNestedInput
    recipient?: UserUpdateOneRequiredWithoutPlanInvitationsReceivedNestedInput
  }

  export type PlanInvitationUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanInvitationUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    recipientId?: StringFieldUpdateOperationsInput | string
    status?: EnumInvitationStatusFieldUpdateOperationsInput | $Enums.InvitationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PlanMilestoneUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMilestoneUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanMilestoneUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: StringFieldUpdateOperationsInput | string
    progress?: NullableIntFieldUpdateOperationsInput | number | null
    criteria?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanCreateManyPlanGroupInput = {
    id?: string
    userId: string
    goal: string
    emoji?: string | null
    finishingDate?: Date | string | null
    createdAt?: Date | string
    deletedAt?: Date | string | null
    durationType?: $Enums.PlanDurationType | null
    outlineType?: $Enums.PlanOutlineType
    timesPerWeek?: number | null
    coachSuggestedTimesPerWeek?: number | null
    notes?: string | null
    coachNotes?: string | null
    suggestedByCoachAt?: Date | string | null
    sortOrder?: number | null
    currentWeekState?: $Enums.PlanState
    currentWeekStateCalculatedAt?: Date | string | null
  }

  export type UserUpdateWithoutPlanGroupMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUpdateManyWithoutUserNestedInput
    plans?: PlanUpdateManyWithoutUserNestedInput
    messages?: MessageUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUpdateManyWithoutRecipientNestedInput
    recommendations?: RecommendationUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUpdateManyWithoutToNestedInput
    referredUsers?: UserUpdateManyWithoutReferredByNestedInput
    referredBy?: UserUpdateOneWithoutReferredUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPlanGroupMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
    activities?: ActivityUncheckedUpdateManyWithoutUserNestedInput
    activityEntries?: ActivityEntryUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    metricEntries?: MetricEntryUncheckedUpdateManyWithoutUserNestedInput
    plans?: PlanUncheckedUpdateManyWithoutUserNestedInput
    messages?: MessageUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    planInvitationsSent?: PlanInvitationUncheckedUpdateManyWithoutSenderNestedInput
    planInvitationsReceived?: PlanInvitationUncheckedUpdateManyWithoutRecipientNestedInput
    recommendations?: RecommendationUncheckedUpdateManyWithoutUserNestedInput
    reactionsSent?: ReactionUncheckedUpdateManyWithoutUserNestedInput
    connectionsFrom?: ConnectionUncheckedUpdateManyWithoutFromNestedInput
    connectionsTo?: ConnectionUncheckedUpdateManyWithoutToNestedInput
    referredUsers?: UserUncheckedUpdateManyWithoutReferredByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutPlanGroupMembershipsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    age?: NullableIntFieldUpdateOperationsInput | number | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    clerkId?: NullableStringFieldUpdateOperationsInput | string | null
    language?: NullableStringFieldUpdateOperationsInput | string | null
    planType?: EnumPlanTypeFieldUpdateOperationsInput | $Enums.PlanType
    lastActiveAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isPwaInstalled?: BoolFieldUpdateOperationsInput | boolean
    isPwaNotificationsEnabled?: BoolFieldUpdateOperationsInput | boolean
    lookingForAp?: NullableBoolFieldUpdateOperationsInput | boolean | null
    pwaSubscriptionEndpoint?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionKey?: NullableStringFieldUpdateOperationsInput | string | null
    pwaSubscriptionAuthToken?: NullableStringFieldUpdateOperationsInput | string | null
    unactivatedEmailSentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    themeBaseColor?: EnumThemeColorFieldUpdateOperationsInput | $Enums.ThemeColor
    defaultActivityVisibility?: EnumActivityVisibilityFieldUpdateOperationsInput | $Enums.ActivityVisibility
    recommendationsOutdated?: BoolFieldUpdateOperationsInput | boolean
    recommendationsLastCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyCheckinDays?: UserUpdatedailyCheckinDaysInput | string[]
    dailyCheckinTime?: NullableEnumDailyCheckinTimeFieldUpdateOperationsInput | $Enums.DailyCheckinTime | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeSubscriptionStatus?: NullableStringFieldUpdateOperationsInput | string | null
    referredById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlanUpdateWithoutPlanGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPlansNestedInput
    sessions?: PlanSessionUpdateManyWithoutPlanNestedInput
    activities?: ActivityUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutPlanGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: PlanSessionUncheckedUpdateManyWithoutPlanNestedInput
    activities?: ActivityUncheckedUpdateManyWithoutPlansNestedInput
    invitations?: PlanInvitationUncheckedUpdateManyWithoutPlanNestedInput
    milestones?: PlanMilestoneUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateManyWithoutPlanGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    goal?: StringFieldUpdateOperationsInput | string
    emoji?: NullableStringFieldUpdateOperationsInput | string | null
    finishingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    durationType?: NullableEnumPlanDurationTypeFieldUpdateOperationsInput | $Enums.PlanDurationType | null
    outlineType?: EnumPlanOutlineTypeFieldUpdateOperationsInput | $Enums.PlanOutlineType
    timesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    coachSuggestedTimesPerWeek?: NullableIntFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    coachNotes?: NullableStringFieldUpdateOperationsInput | string | null
    suggestedByCoachAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sortOrder?: NullableIntFieldUpdateOperationsInput | number | null
    currentWeekState?: EnumPlanStateFieldUpdateOperationsInput | $Enums.PlanState
    currentWeekStateCalculatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MessageEmotionCreateManyMessageInput = {
    id?: string
    name: string
    score: number
    color: string
  }

  export type MessageEmotionUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type MessageEmotionUncheckedUpdateWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }

  export type MessageEmotionUncheckedUpdateManyWithoutMessageInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    color?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}