
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  profile: 'profile',
  picture: 'picture',
  age: 'age',
  username: 'username',
  timezone: 'timezone',
  clerkId: 'clerkId',
  language: 'language',
  planType: 'planType',
  lastActiveAt: 'lastActiveAt',
  email: 'email',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  isPwaInstalled: 'isPwaInstalled',
  isPwaNotificationsEnabled: 'isPwaNotificationsEnabled',
  lookingForAp: 'lookingForAp',
  pwaSubscriptionEndpoint: 'pwaSubscriptionEndpoint',
  pwaSubscriptionKey: 'pwaSubscriptionKey',
  pwaSubscriptionAuthToken: 'pwaSubscriptionAuthToken',
  unactivatedEmailSentAt: 'unactivatedEmailSentAt',
  themeBaseColor: 'themeBaseColor',
  defaultActivityVisibility: 'defaultActivityVisibility',
  recommendationsOutdated: 'recommendationsOutdated',
  recommendationsLastCalculatedAt: 'recommendationsLastCalculatedAt',
  dailyCheckinDays: 'dailyCheckinDays',
  dailyCheckinTime: 'dailyCheckinTime',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripeSubscriptionStatus: 'stripeSubscriptionStatus',
  referredById: 'referredById'
};

exports.Prisma.ConnectionScalarFieldEnum = {
  id: 'id',
  fromId: 'fromId',
  toId: 'toId',
  status: 'status',
  message: 'message',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  measure: 'measure',
  emoji: 'emoji',
  createdAt: 'createdAt',
  privacySettings: 'privacySettings',
  colorHex: 'colorHex',
  deletedAt: 'deletedAt'
};

exports.Prisma.ActivityEntryScalarFieldEnum = {
  id: 'id',
  activityId: 'activityId',
  userId: 'userId',
  quantity: 'quantity',
  date: 'date',
  createdAt: 'createdAt',
  description: 'description',
  deletedAt: 'deletedAt',
  timezone: 'timezone',
  imageS3Path: 'imageS3Path',
  imageUrl: 'imageUrl',
  imageExpiresAt: 'imageExpiresAt',
  imageCreatedAt: 'imageCreatedAt',
  imageIsPublic: 'imageIsPublic'
};

exports.Prisma.ReactionScalarFieldEnum = {
  id: 'id',
  activityEntryId: 'activityEntryId',
  userId: 'userId',
  emoji: 'emoji',
  createdAt: 'createdAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  activityEntryId: 'activityEntryId',
  userId: 'userId',
  username: 'username',
  text: 'text',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  picture: 'picture'
};

exports.Prisma.MetricScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  emoji: 'emoji',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MetricEntryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  metricId: 'metricId',
  rating: 'rating',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  description: 'description',
  skipped: 'skipped',
  descriptionSkipped: 'descriptionSkipped'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planGroupId: 'planGroupId',
  goal: 'goal',
  emoji: 'emoji',
  finishingDate: 'finishingDate',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  durationType: 'durationType',
  outlineType: 'outlineType',
  timesPerWeek: 'timesPerWeek',
  coachSuggestedTimesPerWeek: 'coachSuggestedTimesPerWeek',
  notes: 'notes',
  coachNotes: 'coachNotes',
  suggestedByCoachAt: 'suggestedByCoachAt',
  sortOrder: 'sortOrder',
  currentWeekState: 'currentWeekState',
  currentWeekStateCalculatedAt: 'currentWeekStateCalculatedAt'
};

exports.Prisma.PlanSessionScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  isCoachSuggested: 'isCoachSuggested',
  activityId: 'activityId',
  date: 'date',
  descriptiveGuide: 'descriptiveGuide',
  quantity: 'quantity',
  createdAt: 'createdAt'
};

exports.Prisma.PlanMilestoneScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  date: 'date',
  description: 'description',
  progress: 'progress',
  criteria: 'criteria',
  createdAt: 'createdAt'
};

exports.Prisma.PlanGroupScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt'
};

exports.Prisma.PlanInvitationScalarFieldEnum = {
  id: 'id',
  planId: 'planId',
  senderId: 'senderId',
  recipientId: 'recipientId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  role: 'role',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.MessageEmotionScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  name: 'name',
  score: 'score',
  color: 'color'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message',
  createdAt: 'createdAt',
  sentAt: 'sentAt',
  processedAt: 'processedAt',
  openedAt: 'openedAt',
  concludedAt: 'concludedAt',
  promptTag: 'promptTag',
  status: 'status',
  type: 'type',
  relatedId: 'relatedId',
  relatedData: 'relatedData'
};

exports.Prisma.RecommendationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  recommendationObjectType: 'recommendationObjectType',
  recommendationObjectId: 'recommendationObjectId',
  score: 'score',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.PlanType = exports.$Enums.PlanType = {
  FREE: 'FREE',
  PLUS: 'PLUS'
};

exports.ThemeColor = exports.$Enums.ThemeColor = {
  RANDOM: 'RANDOM',
  SLATE: 'SLATE',
  BLUE: 'BLUE',
  VIOLET: 'VIOLET',
  AMBER: 'AMBER',
  EMERALD: 'EMERALD',
  ROSE: 'ROSE'
};

exports.ActivityVisibility = exports.$Enums.ActivityVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  FRIENDS: 'FRIENDS'
};

exports.DailyCheckinTime = exports.$Enums.DailyCheckinTime = {
  MORNING: 'MORNING',
  AFTERNOON: 'AFTERNOON',
  EVENING: 'EVENING'
};

exports.ConnectionStatus = exports.$Enums.ConnectionStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  BLOCKED: 'BLOCKED'
};

exports.PlanDurationType = exports.$Enums.PlanDurationType = {
  HABIT: 'HABIT',
  LIFESTYLE: 'LIFESTYLE',
  CUSTOM: 'CUSTOM'
};

exports.PlanOutlineType = exports.$Enums.PlanOutlineType = {
  SPECIFIC: 'SPECIFIC',
  TIMES_PER_WEEK: 'TIMES_PER_WEEK'
};

exports.PlanState = exports.$Enums.PlanState = {
  ON_TRACK: 'ON_TRACK',
  AT_RISK: 'AT_RISK',
  FAILED: 'FAILED',
  COMPLETED: 'COMPLETED'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.MessageRole = exports.$Enums.MessageRole = {
  USER: 'USER',
  ASSISTANT: 'ASSISTANT',
  SYSTEM: 'SYSTEM'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  PROCESSED: 'PROCESSED',
  OPENED: 'OPENED',
  CONCLUDED: 'CONCLUDED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  FRIEND_REQUEST: 'FRIEND_REQUEST',
  PLAN_INVITATION: 'PLAN_INVITATION',
  ENGAGEMENT: 'ENGAGEMENT',
  INFO: 'INFO',
  METRIC_CHECKIN: 'METRIC_CHECKIN',
  COACH: 'COACH'
};

exports.RecommendationObjectType = exports.$Enums.RecommendationObjectType = {
  USER: 'USER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Connection: 'Connection',
  Activity: 'Activity',
  ActivityEntry: 'ActivityEntry',
  Reaction: 'Reaction',
  Comment: 'Comment',
  Metric: 'Metric',
  MetricEntry: 'MetricEntry',
  Plan: 'Plan',
  PlanSession: 'PlanSession',
  PlanMilestone: 'PlanMilestone',
  PlanGroup: 'PlanGroup',
  PlanInvitation: 'PlanInvitation',
  Message: 'Message',
  MessageEmotion: 'MessageEmotion',
  Notification: 'Notification',
  Recommendation: 'Recommendation'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
