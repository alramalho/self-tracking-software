// Generated by Zero Schema Generator

import {
  table,
  string,
  boolean,
  number,
  json,
  enumeration,
  relationships,
  createSchema,
  type Row,
} from "@rocicorp/zero";

// Define enums

export enum PlanType {
  FREE = "FREE",
  PLUS = "PLUS",
}

export enum ThemeColor {
  RANDOM = "RANDOM",
  SLATE = "SLATE",
  BLUE = "BLUE",
  VIOLET = "VIOLET",
  AMBER = "AMBER",
  EMERALD = "EMERALD",
  ROSE = "ROSE",
}

export enum ActivityVisibility {
  PUBLIC = "PUBLIC",
  PRIVATE = "PRIVATE",
  FRIENDS = "FRIENDS",
}

export enum DailyCheckinTime {
  MORNING = "MORNING",
  AFTERNOON = "AFTERNOON",
  EVENING = "EVENING",
}

export enum PlanDurationType {
  HABIT = "HABIT",
  LIFESTYLE = "LIFESTYLE",
  CUSTOM = "CUSTOM",
}

export enum PlanOutlineType {
  SPECIFIC = "SPECIFIC",
  TIMES_PER_WEEK = "TIMES_PER_WEEK",
}

export enum PlanState {
  ON_TRACK = "ON_TRACK",
  AT_RISK = "AT_RISK",
  FAILED = "FAILED",
  COMPLETED = "COMPLETED",
}

export enum CriteriaJunction {
  AND = "AND",
  OR = "OR",
}

export enum ConnectionStatus {
  PENDING = "PENDING",
  ACCEPTED = "ACCEPTED",
  REJECTED = "REJECTED",
  BLOCKED = "BLOCKED",
}

export enum InvitationStatus {
  PENDING = "PENDING",
  ACCEPTED = "ACCEPTED",
  REJECTED = "REJECTED",
}

export enum NotificationRecurrence {
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
}

export enum NotificationStatus {
  PENDING = "PENDING",
  PROCESSED = "PROCESSED",
  OPENED = "OPENED",
  CONCLUDED = "CONCLUDED",
}

export enum NotificationType {
  FRIEND_REQUEST = "FRIEND_REQUEST",
  PLAN_INVITATION = "PLAN_INVITATION",
  ENGAGEMENT = "ENGAGEMENT",
  INFO = "INFO",
  METRIC_CHECKIN = "METRIC_CHECKIN",
  COACH = "COACH",
}

export enum RecommendationObjectType {
  USER = "USER",
}

export enum MessageRole {
  USER = "USER",
  ASSISTANT = "ASSISTANT",
}

// Define tables

export const userTable = table("users")
  .columns({
    id: string(),
    name: string().optional(),
    profile: string().optional(),
    picture: string().optional(),
    age: number().optional(),
    username: string().optional(),
    timezone: string().optional(),
    clerkId: string().optional(),
    language: string().optional(),
    planType: enumeration<PlanType>(),
    lastActiveAt: number().optional(),
    email: string(),
    createdAt: number(),
    deletedAt: number().optional(),
    isPwaInstalled: boolean(),
    isPwaNotificationsEnabled: boolean(),
    lookingForAp: boolean().optional(),
    pwaSubscriptionEndpoint: string().optional(),
    pwaSubscriptionKey: string().optional(),
    pwaSubscriptionAuthToken: string().optional(),
    unactivatedEmailSentAt: number().optional(),
    themeBaseColor: enumeration<ThemeColor>(),
    defaultActivityVisibility: enumeration<ActivityVisibility>(),
    recommendationsOutdated: boolean(),
    recommendationsLastCalculatedAt: number().optional(),
    dailyCheckinDays: json<string[]>(),
    dailyCheckinTime: enumeration<DailyCheckinTime>().optional(),
    stripeCustomerId: string().optional(),
    stripeSubscriptionId: string().optional(),
    stripeSubscriptionStatus: string().optional(),
    referredById: string().optional(),
  })
  .primaryKey("id");

export const connectionTable = table("connections")
  .columns({
    id: string(),
    fromId: string(),
    toId: string(),
    status: enumeration<ConnectionStatus>(),
    message: string().optional(),
    createdAt: number(),
    updatedAt: number().optional(),
  })
  .primaryKey("id");

export const activityTable = table("activities")
  .columns({
    id: string(),
    userId: string(),
    title: string(),
    measure: string(),
    emoji: string(),
    createdAt: number(),
    privacySettings: enumeration<ActivityVisibility>().optional(),
    colorHex: string().optional(),
    deletedAt: number().optional(),
  })
  .primaryKey("id");

export const activityEntryTable = table("activity_entries")
  .columns({
    id: string(),
    activityId: string(),
    userId: string(),
    quantity: number(),
    date: number(),
    createdAt: number(),
    description: string().optional(),
    deletedAt: number().optional(),
    timezone: string().optional(),
    imageS3Path: string().optional(),
    imageUrl: string().optional(),
    imageExpiresAt: number().optional(),
    imageCreatedAt: number().optional(),
    imageIsPublic: boolean(),
  })
  .primaryKey("id");

export const reactionTable = table("reactions")
  .columns({
    id: string(),
    activityEntryId: string(),
    userId: string(),
    emoji: string(),
    createdAt: number(),
  })
  .primaryKey("id");

export const commentTable = table("comments")
  .columns({
    id: string(),
    activityEntryId: string(),
    userId: string(),
    username: string(),
    text: string(),
    createdAt: number(),
    deletedAt: number().optional(),
    picture: string().optional(),
  })
  .primaryKey("id");

export const metricTable = table("metrics")
  .columns({
    id: string(),
    userId: string(),
    title: string(),
    emoji: string(),
    createdAt: number(),
    updatedAt: number(),
  })
  .primaryKey("id");

export const metricEntryTable = table("metric_entries")
  .columns({
    id: string(),
    userId: string(),
    metricId: string(),
    rating: number(),
    date: number(),
    createdAt: number(),
    updatedAt: number(),
    description: string().optional(),
    skipped: boolean(),
    descriptionSkipped: boolean(),
  })
  .primaryKey("id");

export const planTable = table("plans")
  .columns({
    id: string(),
    userId: string(),
    planGroupId: string().optional(),
    goal: string(),
    emoji: string().optional(),
    finishingDate: number().optional(),
    createdAt: number(),
    deletedAt: number().optional(),
    durationType: enumeration<PlanDurationType>().optional(),
    outlineType: enumeration<PlanOutlineType>(),
    timesPerWeek: number().optional(),
    coachSuggestedTimesPerWeek: number().optional(),
    notes: string().optional(),
    coachNotes: string().optional(),
    suggestedByCoachAt: number().optional(),
    currentWeekState: enumeration<PlanState>(),
    currentWeekStateCalculatedAt: number().optional(),
  })
  .primaryKey("id");

export const planSessionTable = table("plan_sessions")
  .columns({
    id: string(),
    planId: string(),
    isCoachSuggested: boolean(),
    activityId: string(),
    date: number(),
    descriptiveGuide: string(),
    quantity: number(),
    createdAt: number(),
  })
  .primaryKey("id");

export const planMilestoneTable = table("plan_milestones")
  .columns({
    id: string(),
    planId: string(),
    date: number(),
    description: string(),
    progress: number().optional(),
    criteria: json().optional(),
    createdAt: number(),
  })
  .primaryKey("id");

export const planGroupTable = table("plan_groups")
  .columns({
    id: string(),
    createdAt: number(),
  })
  .primaryKey("id");

export const planInvitationTable = table("plan_invitations")
  .columns({
    id: string(),
    planId: string(),
    senderId: string(),
    recipientId: string(),
    status: enumeration<InvitationStatus>(),
    createdAt: number(),
    updatedAt: number().optional(),
  })
  .primaryKey("id");

export const messageTable = table("messages")
  .columns({
    id: string(),
    userId: string(),
    role: enumeration<MessageRole>(),
    content: string(),
    createdAt: number(),
  })
  .primaryKey("id");

export const messageEmotionTable = table("message_emotions")
  .columns({
    id: string(),
    messageId: string(),
    name: string(),
    score: number(),
    color: string(),
  })
  .primaryKey("id");

export const notificationTable = table("notifications")
  .columns({
    id: string(),
    userId: string(),
    message: string(),
    createdAt: number(),
    sentAt: number().optional(),
    processedAt: number().optional(),
    openedAt: number().optional(),
    concludedAt: number().optional(),
    scheduledFor: number().optional(),
    recurrence: enumeration<NotificationRecurrence>().optional(),
    awsCronjobId: string().optional(),
    promptTag: string().optional(),
    status: enumeration<NotificationStatus>(),
    type: enumeration<NotificationType>(),
    relatedId: string().optional(),
    relatedData: json().optional(),
  })
  .primaryKey("id");

export const recommendationTable = table("recommendations")
  .columns({
    id: string(),
    userId: string(),
    recommendationObjectType: enumeration<RecommendationObjectType>(),
    recommendationObjectId: string(),
    score: number(),
    metadata: json(),
    createdAt: number(),
    updatedAt: number(),
  })
  .primaryKey("id");

export const _activityToPlanTable = table("_ActivityToPlan")
  .from("_ActivityToPlan")
  .columns({
    A: string(),
    B: string(),
  })
  .primaryKey("A", "B");

export const _planGroupToUserTable = table("_PlanGroupToUser")
  .from("_PlanGroupToUser")
  .columns({
    A: string(),
    B: string(),
  })
  .primaryKey("A", "B");

// Define relationships

export const userTableRelationships = relationships(
  userTable,
  ({ one, many }) => ({
    activities: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: activityTable,
    }),
    activityEntries: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: activityEntryTable,
    }),
    metrics: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: metricTable,
    }),
    metricEntries: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: metricEntryTable,
    }),
    plans: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: planTable,
    }),
    messages: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: messageTable,
    }),
    notifications: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: notificationTable,
    }),
    planInvitationsSent: many({
      sourceField: ["id"],
      destField: ["senderId"],
      destSchema: planInvitationTable,
    }),
    planInvitationsReceived: many({
      sourceField: ["id"],
      destField: ["recipientId"],
      destSchema: planInvitationTable,
    }),
    planGroupMemberships: many(
      {
        sourceField: ["id"],
        destField: ["B"],
        destSchema: _planGroupToUserTable,
      },
      {
        sourceField: ["A"],
        destField: ["id"],
        destSchema: planGroupTable,
      }
    ),
    recommendations: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: recommendationTable,
    }),
    reactionsSent: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: reactionTable,
    }),
    commentsPosted: many({
      sourceField: ["id"],
      destField: ["userId"],
      destSchema: commentTable,
    }),
    connectionsFrom: many({
      sourceField: ["id"],
      destField: ["fromId"],
      destSchema: connectionTable,
    }),
    connectionsTo: many({
      sourceField: ["id"],
      destField: ["toId"],
      destSchema: connectionTable,
    }),
    // referredUsers: many({
    //   sourceField: ["id"],
    //   destField: ["A"],
    //   destSchema: _userReferralsTable,
    // }, {
    //   sourceField: ["B"],
    //   destField: ["id"],
    //   destSchema: userTable,
    // }),
    referredBy: one({
      sourceField: ["referredById"],
      destField: ["id"],
      destSchema: userTable,
    }),
  })
);

export const connectionTableRelationships = relationships(
  connectionTable,
  ({ one }) => ({
    from: one({
      sourceField: ["fromId"],
      destField: ["id"],
      destSchema: userTable,
    }),
    to: one({
      sourceField: ["toId"],
      destField: ["id"],
      destSchema: userTable,
    }),
  })
);

export const activityTableRelationships = relationships(
  activityTable,
  ({ one, many }) => ({
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
    entries: many({
      sourceField: ["id"],
      destField: ["activityId"],
      destSchema: activityEntryTable,
    }),
    planSessions: many({
      sourceField: ["id"],
      destField: ["activityId"],
      destSchema: planSessionTable,
    }),
    plans: many(
      {
        sourceField: ["id"],
        destField: ["A"],
        destSchema: _activityToPlanTable,
      },
      {
        sourceField: ["B"],
        destField: ["id"],
        destSchema: planTable,
      }
    ),
  })
);

export const activityEntryTableRelationships = relationships(
  activityEntryTable,
  ({ one, many }) => ({
    activity: one({
      sourceField: ["activityId"],
      destField: ["id"],
      destSchema: activityTable,
    }),
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
    reactions: many({
      sourceField: ["id"],
      destField: ["activityEntryId"],
      destSchema: reactionTable,
    }),
    comments: many({
      sourceField: ["id"],
      destField: ["activityEntryId"],
      destSchema: commentTable,
    }),
  })
);

export const reactionTableRelationships = relationships(
  reactionTable,
  ({ one }) => ({
    activityEntry: one({
      sourceField: ["activityEntryId"],
      destField: ["id"],
      destSchema: activityEntryTable,
    }),
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
  })
);

export const commentTableRelationships = relationships(
  commentTable,
  ({ one }) => ({
    activityEntry: one({
      sourceField: ["activityEntryId"],
      destField: ["id"],
      destSchema: activityEntryTable,
    }),
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
  })
);

export const metricTableRelationships = relationships(
  metricTable,
  ({ one, many }) => ({
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
    entries: many({
      sourceField: ["id"],
      destField: ["metricId"],
      destSchema: metricEntryTable,
    }),
  })
);

export const metricEntryTableRelationships = relationships(
  metricEntryTable,
  ({ one }) => ({
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
    metric: one({
      sourceField: ["metricId"],
      destField: ["id"],
      destSchema: metricTable,
    }),
  })
);

export const planTableRelationships = relationships(
  planTable,
  ({ one, many }) => ({
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
    planGroup: one({
      sourceField: ["planGroupId"],
      destField: ["id"],
      destSchema: planGroupTable,
    }),
    sessions: many({
      sourceField: ["id"],
      destField: ["planId"],
      destSchema: planSessionTable,
    }),
    activities: many(
      {
        sourceField: ["id"],
        destField: ["B"],
        destSchema: _activityToPlanTable,
      },
      {
        sourceField: ["A"],
        destField: ["id"],
        destSchema: activityTable,
      }
    ),
    invitations: many({
      sourceField: ["id"],
      destField: ["planId"],
      destSchema: planInvitationTable,
    }),
    milestones: many({
      sourceField: ["id"],
      destField: ["planId"],
      destSchema: planMilestoneTable,
    }),
  })
);

export const planSessionTableRelationships = relationships(
  planSessionTable,
  ({ one }) => ({
    plan: one({
      sourceField: ["planId"],
      destField: ["id"],
      destSchema: planTable,
    }),
    activity: one({
      sourceField: ["activityId"],
      destField: ["id"],
      destSchema: activityTable,
    }),
  })
);

export const planMilestoneTableRelationships = relationships(
  planMilestoneTable,
  ({ one }) => ({
    plan: one({
      sourceField: ["planId"],
      destField: ["id"],
      destSchema: planTable,
    }),
  })
);

export const planGroupTableRelationships = relationships(
  planGroupTable,
  ({ many }) => ({
    members: many(
      {
        sourceField: ["id"],
        destField: ["A"],
        destSchema: _planGroupToUserTable,
      },
      {
        sourceField: ["B"],
        destField: ["id"],
        destSchema: userTable,
      }
    ),
    plans: many({
      sourceField: ["id"],
      destField: ["planGroupId"],
      destSchema: planTable,
    }),
  })
);

export const planInvitationTableRelationships = relationships(
  planInvitationTable,
  ({ one }) => ({
    plan: one({
      sourceField: ["planId"],
      destField: ["id"],
      destSchema: planTable,
    }),
    sender: one({
      sourceField: ["senderId"],
      destField: ["id"],
      destSchema: userTable,
    }),
    recipient: one({
      sourceField: ["recipientId"],
      destField: ["id"],
      destSchema: userTable,
    }),
  })
);

export const messageTableRelationships = relationships(
  messageTable,
  ({ one, many }) => ({
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
    emotions: many({
      sourceField: ["id"],
      destField: ["messageId"],
      destSchema: messageEmotionTable,
    }),
  })
);

export const messageEmotionTableRelationships = relationships(
  messageEmotionTable,
  ({ one }) => ({
    message: one({
      sourceField: ["messageId"],
      destField: ["id"],
      destSchema: messageTable,
    }),
  })
);

export const notificationTableRelationships = relationships(
  notificationTable,
  ({ one }) => ({
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
  })
);

export const recommendationTableRelationships = relationships(
  recommendationTable,
  ({ one }) => ({
    user: one({
      sourceField: ["userId"],
      destField: ["id"],
      destSchema: userTable,
    }),
  })
);

export const _activityToPlanTableRelationships = relationships(
  _activityToPlanTable,
  ({ one }) => ({
    modelA: one({
      sourceField: ["A"],
      destField: ["id"],
      destSchema: activityTable,
    }),
    modelB: one({
      sourceField: ["B"],
      destField: ["id"],
      destSchema: planTable,
    }),
  })
);

export const _planGroupToUserTableRelationships = relationships(
  _planGroupToUserTable,
  ({ one }) => ({
    modelA: one({
      sourceField: ["A"],
      destField: ["id"],
      destSchema: planGroupTable,
    }),
    modelB: one({
      sourceField: ["B"],
      destField: ["id"],
      destSchema: userTable,
    }),
  })
);

// Define schema

export const schema = createSchema({
  tables: [
    userTable,
    connectionTable,
    activityTable,
    activityEntryTable,
    reactionTable,
    commentTable,
    metricTable,
    metricEntryTable,
    planTable,
    planSessionTable,
    planMilestoneTable,
    planGroupTable,
    planInvitationTable,
    messageTable,
    messageEmotionTable,
    notificationTable,
    recommendationTable,
    _activityToPlanTable,
    _planGroupToUserTable,
  ],
  relationships: [
    userTableRelationships,
    connectionTableRelationships,
    activityTableRelationships,
    activityEntryTableRelationships,
    reactionTableRelationships,
    commentTableRelationships,
    metricTableRelationships,
    metricEntryTableRelationships,
    planTableRelationships,
    planSessionTableRelationships,
    planMilestoneTableRelationships,
    planGroupTableRelationships,
    planInvitationTableRelationships,
    messageTableRelationships,
    messageEmotionTableRelationships,
    notificationTableRelationships,
    recommendationTableRelationships,
    _activityToPlanTableRelationships,
    _planGroupToUserTableRelationships,
  ],
});

// Define types
export type Schema = typeof schema;
export type User = Row<typeof schema.tables.users>;
export type Connection = Row<typeof schema.tables.connections>;
export type Activity = Row<typeof schema.tables.activities>;
export type ActivityEntry = Row<typeof schema.tables.activity_entries>;
export type Reaction = Row<typeof schema.tables.reactions>;
export type Comment = Row<typeof schema.tables.comments>;
export type Metric = Row<typeof schema.tables.metrics>;
export type MetricEntry = Row<typeof schema.tables.metric_entries>;
export type Plan = Row<typeof schema.tables.plans>;
export type PlanSession = Row<typeof schema.tables.plan_sessions>;
export type PlanMilestone = Row<typeof schema.tables.plan_milestones>;
export type PlanGroup = Row<typeof schema.tables.plan_groups>;
export type PlanInvitation = Row<typeof schema.tables.plan_invitations>;
export type Message = Row<typeof schema.tables.messages>;
export type MessageEmotion = Row<typeof schema.tables.message_emotions>;
export type Notification = Row<typeof schema.tables.notifications>;
export type Recommendation = Row<typeof schema.tables.recommendations>;
export type _ActivityToPlan = Row<typeof schema.tables._ActivityToPlan>;
export type _PlanGroupToUser = Row<typeof schema.tables._PlanGroupToUser>;
