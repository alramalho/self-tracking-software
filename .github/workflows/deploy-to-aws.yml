name: Deploy to AWS

on:
  workflow_call:
jobs:
  # deploy-dev-cdk:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: latest

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #         cache: 'pnpm'
  #         cache-dependency-path: 'aws-infrastructure/pnpm-lock.yaml'

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: eu-central-1

  #     - name: Deploy CDK to dev
  #       env:
  #         ENVIRONMENT: dev 
  #         CERTIFICATE_ARN: irrelevant
  #         # we're only interested in propagating db schema, so env vars for api are irrelevant
  #       run: |
  #         cd aws-infrastructure
  #         pnpm install
  #         pnpm bootstrap
  #         pnpm deploy-dev-db
          
  deploy-prod-cdk:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Deploy Prod CDK
        env:
          ENVIRONMENT: production
          CERTIFICATE_ARN: ${{ secrets.CERTIFICATE_ARN }}
          NODE_CERTIFICATE_ARN: ${{ secrets.NODE_CERTIFICATE_ARN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SHARED_ENCRYPTION_KEY: ${{ secrets.SHARED_ENCRYPTION_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          MONGO_DB_CONNECTION_STRING: ${{ secrets.MONGO_DB_CONNECTION_STRING }}
          CLERK_PUBLISHABLE_KEY: ${{ vars.CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          CLERK_JWT_PUBLIC_KEY: ${{ secrets.CLERK_JWT_PUBLIC_KEY }}
          SVIX_SECRET: ${{ secrets.SVIX_SECRET }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
          JINA_API_KEY: ${{ secrets.JINA_API_KEY }}
          POSTHOG_API_KEY: ${{ secrets.POSTHOG_API_KEY }}
          ADMIN_API_KEY: ${{ secrets.ADMIN_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          LOOPS_API_KEY: ${{ secrets.LOOPS_API_KEY }}
          # Axiom Configuration
          AXIOM_TOKEN: ${{ secrets.AXIOM_TOKEN }}
          OTEL_ENABLED: "true"
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "https://api.axiom.co/v1/traces"
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "https://api.axiom.co/v1/logs"
          AXIOM_ORG_ID: "tracking.software"
          AXIOM_DATASET: "app.tracking.so"
          AXIOM_BATCH_SIZE: "5"
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          STRIPE_PLUS_PRODUCT_ID: ${{ secrets.STRIPE_PLUS_PRODUCT_ID }}
          STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
          STRIPE_ENDPOINT_SECRET: ${{ secrets.STRIPE_ENDPOINT_SECRET }}
          WAF_BYPASS_TOKEN: ${{ secrets.WAF_BYPASS_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}

          BETTER_STACK_SOURCE_TOKEN: ${{ secrets.BETTER_STACK_SOURCE_TOKEN }}
          BETTER_STACK_INGESTING_HOST: ${{ secrets.BETTER_STACK_INGESTING_HOST }}
          
        run: |
          cd aws-infrastructure
          pnpm install 
          pnpm run bootstrap
          pnpm run deploy